{"version":3,"file":"core.cjs.production.min.js","sources":["../src/components/Accessibility/defaults.ts","../src/store/actions.ts","../src/utilities/other/noop.ts","../src/store/constructors.ts","../src/store/context.ts","../src/store/reducer.ts","../src/hooks/monitor/useDndMonitor.ts","../src/components/Accessibility/Accessibility.tsx","../src/utilities/coordinates/constants.ts","../src/utilities/coordinates/distanceBetweenPoints.ts","../src/utilities/coordinates/getRelativeTransformOrigin.ts","../src/utilities/algorithms/helpers.ts","../src/utilities/algorithms/closestCenter.ts","../src/utilities/algorithms/rectIntersection.ts","../src/utilities/algorithms/pointerWithin.ts","../src/utilities/rect/rectAdjustment.ts","../src/utilities/rect/getRect.ts","../src/utilities/transform/inverseTransform.ts","../src/utilities/scroll/getScrollableAncestors.ts","../src/utilities/scroll/isScrollable.ts","../src/utilities/scroll/isFixed.ts","../src/utilities/scroll/getScrollableElement.ts","../src/utilities/scroll/getScrollCoordinates.ts","../src/types/direction.ts","../src/utilities/scroll/getScrollPosition.ts","../src/utilities/scroll/getScrollDirectionAndSpeed.ts","../src/utilities/scroll/documentScrollingElement.ts","../src/utilities/scroll/getScrollElementRect.ts","../src/utilities/scroll/getScrollOffsets.ts","../src/utilities/rect/Rect.ts","../src/hooks/utilities/useAutoScroller.ts","../src/hooks/utilities/useDroppableMeasuring.ts","../src/hooks/utilities/useResizeObserver.ts","../src/hooks/utilities/useScrollableAncestors.ts","../src/hooks/utilities/useRect.ts","../src/utilities/nodes/getMeasurableNode.ts","../src/sensors/utilities/Listeners.ts","../src/sensors/utilities/hasExceededDistance.ts","../src/sensors/events.ts","../src/sensors/keyboard/types.ts","../src/sensors/keyboard/defaults.ts","../src/sensors/keyboard/KeyboardSensor.ts","../src/sensors/pointer/AbstractPointerSensor.ts","../src/sensors/utilities/getEventListenerTarget.ts","../src/sensors/pointer/PointerSensor.ts","../src/sensors/mouse/MouseSensor.ts","../src/sensors/touch/TouchSensor.ts","../src/modifiers/applyModifiers.ts","../src/components/DndContext/DndContext.tsx","../src/hooks/utilities/useCachedNode.ts","../src/hooks/utilities/useDragOverlayMeasuring.ts","../src/utilities/rect/getRectDelta.ts","../src/utilities/rect/getWindowClientRect.ts","../src/hooks/utilities/useScrollOffsets.ts","../src/utilities/rect/adjustScale.ts","../src/hooks/utilities/useCombineActivators.ts","../src/hooks/utilities/useSensorSetup.ts","../src/hooks/useDraggable.ts","../src/hooks/useDndContext.ts","../src/hooks/useDroppable.ts","../src/components/DragOverlay/hooks/useDropAnimation.ts","../src/components/DragOverlay/DragOverlay.tsx","../src/utilities/algorithms/closestCorners.ts","../src/hooks/utilities/useSyntheticListeners.ts","../src/sensors/useSensor.ts","../src/sensors/useSensors.ts"],"sourcesContent":["import type {Announcements, ScreenReaderInstructions} from './types';\n\nexport const screenReaderInstructions: ScreenReaderInstructions = {\n  draggable: `\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  `,\n};\n\nexport const defaultAnnouncements: Announcements = {\n  onDragStart(id) {\n    return `Picked up draggable item ${id}.`;\n  },\n  onDragOver(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was moved over droppable area ${overId}.`;\n    }\n\n    return `Draggable item ${id} is no longer over a droppable area.`;\n  },\n  onDragEnd(id, overId) {\n    if (overId) {\n      return `Draggable item ${id} was dropped over droppable area ${overId}`;\n    }\n\n    return `Draggable item ${id} was dropped.`;\n  },\n  onDragCancel(id) {\n    return `Dragging was cancelled. Draggable item ${id} was dropped.`;\n  },\n};\n","import type {Coordinates, UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\nexport enum Action {\n  DragStart = 'dragStart',\n  DragMove = 'dragMove',\n  DragEnd = 'dragEnd',\n  DragCancel = 'dragCancel',\n  DragOver = 'dragOver',\n  RegisterDroppable = 'registerDroppable',\n  SetDroppableDisabled = 'setDroppableDisabled',\n  UnregisterDroppable = 'unregisterDroppable',\n}\n\nexport type Actions =\n  | {\n      type: Action.DragStart;\n      active: UniqueIdentifier;\n      initialCoordinates: Coordinates;\n    }\n  | {type: Action.DragMove; coordinates: Coordinates}\n  | {type: Action.DragEnd}\n  | {type: Action.DragCancel}\n  | {\n      type: Action.RegisterDroppable;\n      element: DroppableContainer;\n    }\n  | {\n      type: Action.SetDroppableDisabled;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n      disabled: boolean;\n    }\n  | {\n      type: Action.UnregisterDroppable;\n      id: UniqueIdentifier;\n      key: UniqueIdentifier;\n    };\n","export function noop(..._args: any) {}\n","import type {UniqueIdentifier} from '../types';\nimport type {DroppableContainer} from './types';\n\ntype Identifier = UniqueIdentifier | null | undefined;\n\nexport class DroppableContainersMap extends Map<\n  UniqueIdentifier,\n  DroppableContainer\n> {\n  get(id: Identifier) {\n    return id != null ? super.get(id) ?? undefined : undefined;\n  }\n\n  toArray(): DroppableContainer[] {\n    return Array.from(this.values());\n  }\n\n  getEnabled(): DroppableContainer[] {\n    return this.toArray().filter(({disabled}) => !disabled);\n  }\n\n  getNodeFor(id: Identifier) {\n    return this.get(id)?.node.current ?? undefined;\n  }\n}\n","import {createContext} from 'react';\n\nimport {noop} from '../utilities/other';\nimport {DroppableContainersMap} from './constructors';\nimport type {InternalContextDescriptor, PublicContextDescriptor} from './types';\n\nexport const defaultPublicContext: PublicContextDescriptor = {\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  collisions: null,\n  containerNodeRect: null,\n  draggableNodes: {},\n  droppableRects: new Map(),\n  droppableContainers: new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null,\n    },\n    rect: null,\n    setRef: noop,\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  measureDroppableContainers: noop,\n  windowRect: null,\n  measuringScheduled: false,\n};\n\nexport const defaultInternalContext: InternalContextDescriptor = {\n  activatorEvent: null,\n  activators: [],\n  active: null,\n  activeNodeRect: null,\n  ariaDescribedById: {\n    draggable: '',\n  },\n  dispatch: noop,\n  draggableNodes: {},\n  over: null,\n  measureDroppableContainers: noop,\n};\n\nexport const InternalContext = createContext<InternalContextDescriptor>(\n  defaultInternalContext\n);\n\nexport const PublicContext = createContext<PublicContextDescriptor>(\n  defaultPublicContext\n);\n","import {Action, Actions} from './actions';\nimport {DroppableContainersMap} from './constructors';\nimport type {State} from './types';\n\nexport function getInitialState(): State {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {x: 0, y: 0},\n      nodes: {},\n      translate: {x: 0, y: 0},\n    },\n    droppable: {\n      containers: new DroppableContainersMap(),\n    },\n  };\n}\n\nexport function reducer(state: State, action: Actions): State {\n  switch (action.type) {\n    case Action.DragStart:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          initialCoordinates: action.initialCoordinates,\n          active: action.active,\n        },\n      };\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y,\n          },\n        },\n      };\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return {\n        ...state,\n        draggable: {\n          ...state.draggable,\n          active: null,\n          initialCoordinates: {x: 0, y: 0},\n          translate: {x: 0, y: 0},\n        },\n      };\n\n    case Action.RegisterDroppable: {\n      const {element} = action;\n      const {id} = element;\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, element);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.SetDroppableDisabled: {\n      const {id, key, disabled} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.set(id, {\n        ...element,\n        disabled,\n      });\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    case Action.UnregisterDroppable: {\n      const {id, key} = action;\n      const element = state.droppable.containers.get(id);\n\n      if (!element || key !== element.key) {\n        return state;\n      }\n\n      const containers = new DroppableContainersMap(state.droppable.containers);\n      containers.delete(id);\n\n      return {\n        ...state,\n        droppable: {\n          ...state.droppable,\n          containers,\n        },\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import {createContext, useContext, useEffect, useRef} from 'react';\n\nimport {Action} from '../../store';\nimport type {\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n} from '../../types';\n\nexport interface Arguments {\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\nexport interface DndMonitorState {\n  type: Action | null;\n  event:\n    | null\n    | DragStartEvent\n    | DragMoveEvent\n    | DragOverEvent\n    | DragEndEvent\n    | DragCancelEvent;\n}\n\nexport const DndMonitorContext = createContext<DndMonitorState>({\n  type: null,\n  event: null,\n});\n\nexport function useDndMonitor({\n  onDragStart,\n  onDragMove,\n  onDragOver,\n  onDragEnd,\n  onDragCancel,\n}: Arguments) {\n  const monitorState = useContext(DndMonitorContext);\n  const previousMonitorState = useRef(monitorState);\n\n  useEffect(() => {\n    if (monitorState !== previousMonitorState.current) {\n      const {type, event} = monitorState;\n\n      switch (type) {\n        case Action.DragStart:\n          onDragStart?.(event as DragStartEvent);\n          break;\n        case Action.DragMove:\n          onDragMove?.(event as DragMoveEvent);\n          break;\n        case Action.DragOver:\n          onDragOver?.(event as DragOverEvent);\n          break;\n        case Action.DragCancel:\n          onDragCancel?.(event as DragCancelEvent);\n          break;\n        case Action.DragEnd:\n          onDragEnd?.(event as DragEndEvent);\n          break;\n      }\n\n      previousMonitorState.current = monitorState;\n    }\n  }, [\n    monitorState,\n    onDragStart,\n    onDragMove,\n    onDragOver,\n    onDragEnd,\n    onDragCancel,\n  ]);\n}\n","import React, {useEffect, useMemo, useState} from 'react';\nimport {createPortal} from 'react-dom';\nimport {useUniqueId} from '@dnd-kit/utilities';\nimport {HiddenText, LiveRegion, useAnnouncement} from '@dnd-kit/accessibility';\n\nimport type {Announcements, ScreenReaderInstructions} from './types';\nimport type {UniqueIdentifier} from '../../types';\nimport {defaultAnnouncements} from './defaults';\nimport {DndMonitorArguments, useDndMonitor} from '../../hooks/monitor';\n\ninterface Props {\n  announcements?: Announcements;\n  screenReaderInstructions: ScreenReaderInstructions;\n  hiddenTextDescribedById: UniqueIdentifier;\n}\n\nexport function Accessibility({\n  announcements = defaultAnnouncements,\n  hiddenTextDescribedById,\n  screenReaderInstructions,\n}: Props) {\n  const {announce, announcement} = useAnnouncement();\n  const liveRegionId = useUniqueId(`DndLiveRegion`);\n\n  const [mounted, setMounted] = useState(false);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useDndMonitor(\n    useMemo<DndMonitorArguments>(\n      () => ({\n        onDragStart({active}) {\n          announce(announcements.onDragStart(active.id));\n        },\n        onDragMove({active, over}) {\n          if (announcements.onDragMove) {\n            announce(announcements.onDragMove(active.id, over?.id));\n          }\n        },\n        onDragOver({active, over}) {\n          announce(announcements.onDragOver(active.id, over?.id));\n        },\n        onDragEnd({active, over}) {\n          announce(announcements.onDragEnd(active.id, over?.id));\n        },\n        onDragCancel({active}) {\n          announce(announcements.onDragCancel(active.id));\n        },\n      }),\n      [announce, announcements]\n    )\n  );\n\n  return mounted\n    ? createPortal(\n        <>\n          <HiddenText\n            id={hiddenTextDescribedById}\n            value={screenReaderInstructions.draggable}\n          />\n          <LiveRegion id={liveRegionId} announcement={announcement} />\n        </>,\n        document.body\n      )\n    : null;\n}\n","import type {Coordinates} from '../../types';\n\nexport const defaultCoordinates: Coordinates = Object.freeze({\n  x: 0,\n  y: 0,\n});\n","import type {Coordinates} from '../../types';\n\n/**\n * Returns the distance between two points\n */\nexport function distanceBetween(p1: Coordinates, p2: Coordinates) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\n","import {getEventCoordinates} from '@dnd-kit/utilities';\nimport type {ClientRect} from '../../types';\n\nexport function getRelativeTransformOrigin(\n  event: MouseEvent | TouchEvent | KeyboardEvent,\n  rect: ClientRect\n) {\n  const eventCoordinates = getEventCoordinates(event);\n\n  if (!eventCoordinates) {\n    return '0 0';\n  }\n\n  const transformOrigin = {\n    x: ((eventCoordinates.x - rect.left) / rect.width) * 100,\n    y: ((eventCoordinates.y - rect.top) / rect.height) * 100,\n  };\n\n  return `${transformOrigin.x}% ${transformOrigin.y}%`;\n}\n","/* eslint-disable no-redeclare */\nimport type {ClientRect} from '../../types';\n\nimport type {Collision, CollisionDescriptor} from './types';\n\n/**\n * Sort collisions from smallest to greatest value\n */\nexport function sortCollisionsAsc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return a - b;\n}\n\n/**\n * Sort collisions from greatest to smallest value\n */\nexport function sortCollisionsDesc(\n  {data: {value: a}}: CollisionDescriptor,\n  {data: {value: b}}: CollisionDescriptor\n) {\n  return b - a;\n}\n\n/**\n * Returns the coordinates of the corners of a given rectangle:\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\n */\nexport function cornersOfRectangle({left, top, height, width}: ClientRect) {\n  return [\n    {\n      x: left,\n      y: top,\n    },\n    {\n      x: left + width,\n      y: top,\n    },\n    {\n      x: left,\n      y: top + height,\n    },\n    {\n      x: left + width,\n      y: top + height,\n    },\n  ];\n}\n\n/**\n * Returns the first collision, or null if there isn't one.\n * If a property is specified, returns the specified property of the first collision.\n */\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined\n): Collision | null;\nexport function getFirstCollision<T extends keyof Collision>(\n  collisions: Collision[] | null | undefined,\n  property: T\n): Collision[T] | null;\nexport function getFirstCollision(\n  collisions: Collision[] | null | undefined,\n  property?: keyof Collision\n) {\n  if (!collisions || collisions.length === 0) {\n    return null;\n  }\n\n  const [firstCollision] = collisions;\n\n  return property ? firstCollision[property] : firstCollision;\n}\n","import {distanceBetween} from '../coordinates';\nimport type {Coordinates, ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsAsc} from './helpers';\n\n/**\n * Returns the coordinates of the center of a given ClientRect\n */\nfunction centerOfRectangle(\n  rect: ClientRect,\n  left = rect.left,\n  top = rect.top\n): Coordinates {\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5,\n  };\n}\n\n/**\n * Returns the closest rectangles from an array of rectangles to the center of a given\n * rectangle.\n */\nexport const closestCenter: CollisionDetection = ({\n  collisionRect,\n  droppableContainers,\n}) => {\n  const centerRect = centerOfRectangle(\n    collisionRect,\n    collisionRect.left,\n    collisionRect.top\n  );\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id,\n      rect: {current: rect},\n    } = droppableContainer;\n\n    if (rect) {\n      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n\n      collisions.push({id, data: {droppableContainer, value: distBetween}});\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import type {ClientRect} from '../../types';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {sortCollisionsDesc} from './helpers';\n\n/**\n * Returns the intersecting rectangle area between two rectangles\n */\nexport function getIntersectionRatio(\n  entry: ClientRect,\n  target: ClientRect\n): number {\n  const top = Math.max(target.top, entry.top);\n  const left = Math.max(target.left, entry.left);\n  const right = Math.min(target.left + target.width, entry.left + entry.width);\n  const bottom = Math.min(target.top + target.height, entry.top + entry.height);\n  const width = right - left;\n  const height = bottom - top;\n\n  if (left < right && top < bottom) {\n    const targetArea = target.width * target.height;\n    const entryArea = entry.width * entry.height;\n    const intersectionArea = width * height;\n    const intersectionRatio =\n      intersectionArea / (targetArea + entryArea - intersectionArea);\n\n    return Number(intersectionRatio.toFixed(4));\n  }\n\n  // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n  return 0;\n}\n\n/**\n * Returns the rectangles that has the greatest intersection area with a given\n * rectangle in an array of rectangles.\n */\nexport const rectIntersection: CollisionDetection = ({\n  collisionRect,\n  droppableContainers,\n}) => {\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id,\n      rect: {current: rect},\n    } = droppableContainer;\n\n    if (rect) {\n      const intersectionRatio = getIntersectionRatio(rect, collisionRect);\n\n      if (intersectionRatio > 0) {\n        collisions.push({\n          id,\n          data: {droppableContainer, value: intersectionRatio},\n        });\n      }\n    }\n  }\n\n  return collisions.sort(sortCollisionsDesc);\n};\n","import type {Coordinates, ClientRect} from '../../types';\nimport {distanceBetween} from '../coordinates';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {cornersOfRectangle, sortCollisionsAsc} from './helpers';\n\n/**\n * Check if a given point is contained within a bounding rectangle\n */\nfunction isPointWithinRect(point: Coordinates, rect: ClientRect): boolean {\n  const {top, left, bottom, right} = rect;\n\n  return (\n    top <= point.y && point.y <= bottom && left <= point.x && point.x <= right\n  );\n}\n\n/**\n * Returns the rectangles that the pointer is hovering over\n */\nexport const pointerWithin: CollisionDetection = ({\n  droppableContainers,\n  pointerCoordinates,\n}) => {\n  if (!pointerCoordinates) {\n    return [];\n  }\n\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id,\n      rect: {current: rect},\n    } = droppableContainer;\n\n    if (rect && isPointWithinRect(pointerCoordinates, rect)) {\n      /* There may be more than a single rectangle intersecting\n       * with the pointer coordinates. In order to sort the\n       * colliding rectangles, we measure the distance between\n       * the pointer and the corners of the intersecting rectangle\n       */\n      const corners = cornersOfRectangle(rect);\n      const distances = corners.reduce((accumulator, corner) => {\n        return accumulator + distanceBetween(pointerCoordinates, corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n\n      collisions.push({\n        id,\n        data: {droppableContainer, value: effectiveDistance},\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import type {Coordinates, ClientRect} from '../../types';\n\nexport function createRectAdjustmentFn(modifier: number) {\n  return function adjustClientRect(\n    rect: ClientRect,\n    ...adjustments: Coordinates[]\n  ): ClientRect {\n    return adjustments.reduce<ClientRect>(\n      (acc, adjustment) => ({\n        ...acc,\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x,\n      }),\n      {...rect}\n    );\n  };\n}\n\nexport const getAdjustedRect = createRectAdjustmentFn(1);\n","import {getWindow} from '@dnd-kit/utilities';\n\nimport type {ClientRect} from '../../types';\nimport {inverseTransform} from '../transform';\n\ninterface Options {\n  ignoreTransform?: boolean;\n}\n\nconst defaultOptions: Options = {ignoreTransform: false};\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n */\nexport function getClientRect(\n  element: HTMLElement,\n  options: Options = defaultOptions\n) {\n  let rect: ClientRect = element.getBoundingClientRect();\n\n  if (options.ignoreTransform) {\n    const {getComputedStyle} = getWindow(element);\n    const {transform, transformOrigin} = getComputedStyle(element);\n\n    if (transform) {\n      rect = inverseTransform(rect, transform, transformOrigin);\n    }\n  }\n\n  const {top, left, width, height, bottom, right} = rect;\n\n  return {\n    top,\n    left,\n    width,\n    height,\n    bottom,\n    right,\n  };\n}\n\n/**\n * Returns the bounding client rect of an element relative to the viewport.\n *\n * @remarks\n * The ClientRect returned by this method does not take into account transforms\n * applied to the element it measures.\n *\n */\nexport function getTransformAgnosticClientRect(\n  element: HTMLElement\n): ClientRect {\n  return getClientRect(element, {ignoreTransform: true});\n}\n","import type {ClientRect} from '../../types';\n\nexport function inverseTransform(\n  rect: ClientRect,\n  transform: string,\n  transformOrigin: string\n): ClientRect {\n  let ta, sx, sy, dx, dy;\n\n  if (transform.startsWith('matrix3d(')) {\n    ta = transform.slice(9, -1).split(/, /);\n    sx = +ta[0];\n    sy = +ta[5];\n    dx = +ta[12];\n    dy = +ta[13];\n  } else if (transform.startsWith('matrix(')) {\n    ta = transform.slice(7, -1).split(/, /);\n    sx = +ta[0];\n    sy = +ta[3];\n    dx = +ta[4];\n    dy = +ta[5];\n  } else {\n    return rect;\n  }\n\n  const x = rect.left - dx - (1 - sx) * parseFloat(transformOrigin);\n  const y =\n    rect.top -\n    dy -\n    (1 - sy) *\n      parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n  const w = sx ? rect.width / sx : rect.width;\n  const h = sy ? rect.height / sy : rect.height;\n\n  return {\n    width: w,\n    height: h,\n    top: y,\n    right: x + w,\n    bottom: y + h,\n    left: x,\n  };\n}\n","import {\n  getWindow,\n  isDocument,\n  isHTMLElement,\n  isSVGElement,\n} from '@dnd-kit/utilities';\n\nimport {isFixed} from './isFixed';\nimport {isScrollable} from './isScrollable';\n\nexport function getScrollableAncestors(element: Node | null): Element[] {\n  const scrollParents: Element[] = [];\n\n  function findScrollableAncestors(node: Node | null): Element[] {\n    if (!node) {\n      return scrollParents;\n    }\n\n    if (\n      isDocument(node) &&\n      node.scrollingElement != null &&\n      !scrollParents.includes(node.scrollingElement)\n    ) {\n      scrollParents.push(node.scrollingElement);\n\n      return scrollParents;\n    }\n\n    if (!isHTMLElement(node) || isSVGElement(node)) {\n      return scrollParents;\n    }\n\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n\n    const {getComputedStyle} = getWindow(node);\n    const computedStyle = getComputedStyle(node);\n\n    if (node !== element) {\n      if (isScrollable(node, computedStyle)) {\n        scrollParents.push(node);\n      }\n    }\n\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n\n    return findScrollableAncestors(node.parentNode);\n  }\n\n  if (!element) {\n    return scrollParents;\n  }\n\n  return findScrollableAncestors(element);\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isScrollable(\n  element: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(element).getComputedStyle(\n    element\n  )\n): boolean {\n  const overflowRegex = /(auto|scroll|overlay)/;\n  const properties = ['overflow', 'overflowX', 'overflowY'];\n\n  return (\n    properties.find((property) => {\n      const value = computedStyle[property as keyof CSSStyleDeclaration];\n\n      return typeof value === 'string' ? overflowRegex.test(value) : false;\n    }) != null\n  );\n}\n","import {getWindow} from '@dnd-kit/utilities';\n\nexport function isFixed(\n  node: HTMLElement,\n  computedStyle: CSSStyleDeclaration = getWindow(node).getComputedStyle(node)\n): boolean {\n  return computedStyle.position === 'fixed';\n}\n","import {\n  canUseDOM,\n  isHTMLElement,\n  isDocument,\n  getOwnerDocument,\n  isNode,\n  isWindow,\n} from '@dnd-kit/utilities';\n\nexport function getScrollableElement(element: EventTarget | null) {\n  if (!canUseDOM || !element) {\n    return null;\n  }\n\n  if (isWindow(element)) {\n    return element;\n  }\n\n  if (!isNode(element)) {\n    return null;\n  }\n\n  if (\n    isDocument(element) ||\n    element === getOwnerDocument(element).scrollingElement\n  ) {\n    return window;\n  }\n\n  if (isHTMLElement(element)) {\n    return element;\n  }\n\n  return null;\n}\n","import {isWindow} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\n\nexport function getScrollXCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollX;\n  }\n\n  return element.scrollLeft;\n}\n\nexport function getScrollYCoordinate(element: Element | typeof window): number {\n  if (isWindow(element)) {\n    return element.scrollY;\n  }\n\n  return element.scrollTop;\n}\n\nexport function getScrollCoordinates(\n  element: Element | typeof window\n): Coordinates {\n  return {\n    x: getScrollXCoordinate(element),\n    y: getScrollYCoordinate(element),\n  };\n}\n","export enum Direction {\n  Forward = 1,\n  Backward = -1,\n}\n","export function getScrollPosition(scrollingContainer: Element) {\n  const minScroll = {\n    x: 0,\n    y: 0,\n  };\n  const maxScroll = {\n    x: scrollingContainer.scrollWidth - scrollingContainer.clientWidth,\n    y: scrollingContainer.scrollHeight - scrollingContainer.clientHeight,\n  };\n\n  const isTop = scrollingContainer.scrollTop <= minScroll.y;\n  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n\n  return {\n    isTop,\n    isLeft,\n    isBottom,\n    isRight,\n    maxScroll,\n    minScroll,\n  };\n}\n","import {Direction, ClientRect} from '../../types';\nimport {getScrollPosition} from './getScrollPosition';\nimport {isDocumentScrollingElement} from './documentScrollingElement';\n\ninterface PositionalCoordinates\n  extends Pick<ClientRect, 'top' | 'left' | 'right' | 'bottom'> {}\n\nconst defaultThreshold = {\n  x: 0.2,\n  y: 0.2,\n};\n\nexport function getScrollDirectionAndSpeed(\n  scrollContainer: Element,\n  scrollContainerRect: ClientRect,\n  {top, left, right, bottom}: PositionalCoordinates,\n  acceleration = 10,\n  thresholdPercentage = defaultThreshold\n) {\n  const {clientHeight, clientWidth} = scrollContainer;\n  const finalScrollContainerRect = isDocumentScrollingElement(scrollContainer)\n    ? {\n        top: 0,\n        left: 0,\n        right: clientWidth,\n        bottom: clientHeight,\n        width: clientWidth,\n        height: clientHeight,\n      }\n    : scrollContainerRect;\n  const {isTop, isBottom, isLeft, isRight} = getScrollPosition(scrollContainer);\n\n  const direction = {\n    x: 0,\n    y: 0,\n  };\n  const speed = {\n    x: 0,\n    y: 0,\n  };\n  const threshold = {\n    height: finalScrollContainerRect.height * thresholdPercentage.y,\n    width: finalScrollContainerRect.width * thresholdPercentage.x,\n  };\n\n  if (!isTop && top <= finalScrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (finalScrollContainerRect.top + threshold.height - top) /\n          threshold.height\n      );\n  } else if (\n    !isBottom &&\n    bottom >= finalScrollContainerRect.bottom - threshold.height\n  ) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y =\n      acceleration *\n      Math.abs(\n        (finalScrollContainerRect.bottom - threshold.height - bottom) /\n          threshold.height\n      );\n  }\n\n  if (!isRight && right >= finalScrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (finalScrollContainerRect.right - threshold.width - right) /\n          threshold.width\n      );\n  } else if (\n    !isLeft &&\n    left <= finalScrollContainerRect.left + threshold.width\n  ) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x =\n      acceleration *\n      Math.abs(\n        (finalScrollContainerRect.left + threshold.width - left) /\n          threshold.width\n      );\n  }\n\n  return {\n    direction,\n    speed,\n  };\n}\n","import {canUseDOM} from '@dnd-kit/utilities';\n\nexport function isDocumentScrollingElement(element: Element | null) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n\n  return element === document.scrollingElement;\n}\n","export function getScrollElementRect(element: Element) {\n  if (element === document.scrollingElement) {\n    const {innerWidth, innerHeight} = window;\n\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight,\n    };\n  }\n\n  const {top, left, right, bottom} = element.getBoundingClientRect();\n\n  return {\n    top,\n    left,\n    right,\n    bottom,\n    width: element.clientWidth,\n    height: element.clientHeight,\n  };\n}\n","import {add} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  getScrollCoordinates,\n  getScrollXCoordinate,\n  getScrollYCoordinate,\n} from './getScrollCoordinates';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getScrollOffsets(scrollableAncestors: Element[]): Coordinates {\n  return scrollableAncestors.reduce<Coordinates>((acc, node) => {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\n\nexport function getScrollXOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollXCoordinate(node);\n  }, 0);\n}\n\nexport function getScrollYOffset(scrollableAncestors: Element[]): number {\n  return scrollableAncestors.reduce<number>((acc, node) => {\n    return acc + getScrollYCoordinate(node);\n  }, 0);\n}\n","import type {ClientRect} from '../../types/rect';\nimport {\n  getScrollableAncestors,\n  getScrollOffsets,\n  getScrollXOffset,\n  getScrollYOffset,\n} from '../scroll';\n\nconst properties = [\n  ['x', ['left', 'right'], getScrollXOffset],\n  ['y', ['top', 'bottom'], getScrollYOffset],\n] as const;\n\nexport class Rect {\n  constructor(rect: ClientRect, element: HTMLElement) {\n    const scrollableAncestors = getScrollableAncestors(element);\n    const scrollOffsets = getScrollOffsets(scrollableAncestors);\n\n    this.rect = {...rect};\n    this.width = rect.width;\n    this.height = rect.height;\n\n    for (const [axis, keys, getScrollOffset] of properties) {\n      for (const key of keys) {\n        Object.defineProperty(this, key, {\n          get: () => {\n            const currentOffsets = getScrollOffset(scrollableAncestors);\n            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n\n            return this.rect[key] + scrollOffsetsDeltla;\n          },\n          enumerable: true,\n        });\n      }\n    }\n\n    Object.defineProperty(this, 'rect', {enumerable: false});\n  }\n\n  private rect: ClientRect;\n\n  public width: number;\n\n  public height: number;\n\n  // The below properties are set by the `Object.defineProperty` calls in the constructor\n  // @ts-ignore\n  public top: number;\n  // @ts-ignore\n  public bottom: number;\n  // @ts-ignore\n  public right: number;\n  // @ts-ignore\n  public left: number;\n}\n","import {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useInterval} from '@dnd-kit/utilities';\n\nimport {getScrollDirectionAndSpeed, defaultCoordinates} from '../../utilities';\nimport type {Coordinates, Direction, ClientRect} from '../../types';\n\nexport type ScrollAncestorSortingFn = (ancestors: Element[]) => Element[];\n\nexport enum AutoScrollActivator {\n  Pointer,\n  DraggableRect,\n}\n\nexport interface Options {\n  acceleration?: number;\n  activator?: AutoScrollActivator;\n  canScroll?: CanScroll;\n  enabled?: boolean;\n  interval?: number;\n  order?: TraversalOrder;\n  threshold?: {\n    x: number;\n    y: number;\n  };\n}\n\ninterface Arguments extends Options {\n  draggingRect: ClientRect | null;\n  enabled: boolean;\n  pointerCoordinates: Coordinates | null;\n  scrollableAncestors: Element[];\n  scrollableAncestorRects: ClientRect[];\n}\n\nexport type CanScroll = (element: Element) => boolean;\n\nexport enum TraversalOrder {\n  TreeOrder,\n  ReversedTreeOrder,\n}\n\ninterface ScrollDirection {\n  x: 0 | Direction;\n  y: 0 | Direction;\n}\n\nexport function useAutoScroller({\n  acceleration,\n  activator = AutoScrollActivator.Pointer,\n  canScroll,\n  draggingRect,\n  enabled,\n  interval = 5,\n  order = TraversalOrder.TreeOrder,\n  pointerCoordinates,\n  scrollableAncestors,\n  scrollableAncestorRects,\n  threshold,\n}: Arguments) {\n  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();\n  const scrollSpeed = useRef<Coordinates>({\n    x: 1,\n    y: 1,\n  });\n  const rect = useMemo(() => {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates\n          ? {\n              top: pointerCoordinates.y,\n              bottom: pointerCoordinates.y,\n              left: pointerCoordinates.x,\n              right: pointerCoordinates.x,\n            }\n          : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n\n    return null;\n  }, [activator, draggingRect, pointerCoordinates]);\n  const scrollDirection = useRef<ScrollDirection>(defaultCoordinates);\n  const scrollContainerRef = useRef<Element | null>(null);\n  const autoScroll = useCallback(() => {\n    const scrollContainer = scrollContainerRef.current;\n\n    if (!scrollContainer) {\n      return;\n    }\n\n    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  const sortedScrollableAncestors = useMemo(\n    () =>\n      order === TraversalOrder.TreeOrder\n        ? [...scrollableAncestors].reverse()\n        : scrollableAncestors,\n    [order, scrollableAncestors]\n  );\n\n  useEffect(\n    () => {\n      if (!enabled || !scrollableAncestors.length || !rect) {\n        clearAutoScrollInterval();\n        return;\n      }\n\n      for (const scrollContainer of sortedScrollableAncestors) {\n        if (canScroll?.(scrollContainer) === false) {\n          continue;\n        }\n\n        const index = scrollableAncestors.indexOf(scrollContainer);\n        const scrollContainerRect = scrollableAncestorRects[index];\n\n        if (!scrollContainerRect) {\n          continue;\n        }\n\n        const {direction, speed} = getScrollDirectionAndSpeed(\n          scrollContainer,\n          scrollContainerRect,\n          rect,\n          acceleration,\n          threshold\n        );\n\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n\n          return;\n        }\n      }\n\n      scrollSpeed.current = {x: 0, y: 0};\n      scrollDirection.current = {x: 0, y: 0};\n      clearAutoScrollInterval();\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      acceleration,\n      autoScroll,\n      canScroll,\n      clearAutoScrollInterval,\n      enabled,\n      interval,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(rect),\n      setAutoScrollInterval,\n      scrollableAncestors,\n      sortedScrollableAncestors,\n      scrollableAncestorRects,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      JSON.stringify(threshold),\n    ]\n  );\n}\n","import {useCallback, useEffect, useRef, useState} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {Rect, getTransformAgnosticClientRect} from '../../utilities/rect';\nimport type {DroppableContainer, RectMap} from '../../store/types';\nimport type {ClientRect, UniqueIdentifier} from '../../types';\n\ninterface Arguments {\n  dragging: boolean;\n  dependencies: any[];\n  config: Partial<DroppableMeasuring> | undefined;\n}\n\nexport enum MeasuringStrategy {\n  Always,\n  BeforeDragging,\n  WhileDragging,\n}\n\nexport enum MeasuringFrequency {\n  Optimized = 'optimized',\n}\n\ntype MeasuringFunction = (element: HTMLElement) => ClientRect;\n\nexport interface DroppableMeasuring {\n  measure: MeasuringFunction;\n  strategy: MeasuringStrategy;\n  frequency: MeasuringFrequency | number;\n}\n\nconst defaultValue: RectMap = new Map();\n\nconst defaultConfig: DroppableMeasuring = {\n  measure: getTransformAgnosticClientRect,\n  strategy: MeasuringStrategy.WhileDragging,\n  frequency: MeasuringFrequency.Optimized,\n};\n\nexport function useDroppableMeasuring(\n  containers: DroppableContainer[],\n  {dragging, dependencies, config}: Arguments\n) {\n  const [\n    containerIdsScheduledForMeasurement,\n    setContainerIdsScheduledForMeasurement,\n  ] = useState<UniqueIdentifier[] | null>(null);\n  const measuringScheduled = containerIdsScheduledForMeasurement != null;\n  const {frequency, measure, strategy} = {\n    ...defaultConfig,\n    ...config,\n  };\n  const containersRef = useRef(containers);\n  const measureDroppableContainers = useCallback(\n    (ids: UniqueIdentifier[] = []) =>\n      setContainerIdsScheduledForMeasurement((value) =>\n        value ? value.concat(ids) : ids\n      ),\n    []\n  );\n  const timeoutId = useRef<NodeJS.Timeout | null>(null);\n  const disabled = isDisabled();\n  const droppableRects = useLazyMemo<RectMap>(\n    (previousValue) => {\n      if (disabled && !dragging) {\n        return defaultValue;\n      }\n\n      const ids = containerIdsScheduledForMeasurement;\n\n      if (\n        !previousValue ||\n        previousValue === defaultValue ||\n        containersRef.current !== containers ||\n        ids != null\n      ) {\n        const map: RectMap = new Map();\n\n        for (let container of containers) {\n          if (!container) {\n            continue;\n          }\n\n          if (\n            ids &&\n            ids.length > 0 &&\n            !ids.includes(container.id) &&\n            container.rect.current\n          ) {\n            // This container does not need to be re-measured\n            map.set(container.id, container.rect.current);\n            continue;\n          }\n\n          const node = container.node.current;\n          const rect = node ? new Rect(measure(node), node) : null;\n\n          container.rect.current = rect;\n\n          if (rect) {\n            map.set(container.id, rect);\n          }\n        }\n\n        return map;\n      }\n\n      return previousValue;\n    },\n    [\n      containers,\n      containerIdsScheduledForMeasurement,\n      dragging,\n      disabled,\n      measure,\n    ]\n  );\n\n  useEffect(() => {\n    containersRef.current = containers;\n  }, [containers]);\n\n  useEffect(\n    () => {\n      if (disabled) {\n        return;\n      }\n\n      requestAnimationFrame(() => measureDroppableContainers());\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [dragging, disabled]\n  );\n\n  useEffect(() => {\n    if (measuringScheduled) {\n      setContainerIdsScheduledForMeasurement(null);\n    }\n  }, [measuringScheduled]);\n\n  useEffect(\n    () => {\n      if (\n        disabled ||\n        typeof frequency !== 'number' ||\n        timeoutId.current !== null\n      ) {\n        return;\n      }\n\n      timeoutId.current = setTimeout(() => {\n        measureDroppableContainers();\n        timeoutId.current = null;\n      }, frequency);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [frequency, disabled, measureDroppableContainers, ...dependencies]\n  );\n\n  return {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled,\n  };\n\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\n","import {useMemo} from 'react';\n\ninterface Arguments {\n  disabled?: boolean;\n  onResize: ResizeObserverCallback;\n}\n\n/**\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\n */\nexport function useResizeObserver({onResize, disabled}: Arguments) {\n  const resizeObserver = useMemo(() => {\n    if (\n      disabled ||\n      typeof window === 'undefined' ||\n      typeof window.ResizeObserver === 'undefined'\n    ) {\n      return undefined;\n    }\n\n    const {ResizeObserver} = window;\n\n    return new ResizeObserver(onResize);\n  }, [disabled, onResize]);\n\n  return resizeObserver;\n}\n","import {useEffect, useRef} from 'react';\nimport {useLazyMemo} from '@dnd-kit/utilities';\n\nimport {getScrollableAncestors} from '../../utilities';\n\nconst defaultValue: Element[] = [];\n\nexport function useScrollableAncestors(node: HTMLElement | null) {\n  const previousNode = useRef(node);\n\n  const ancestors = useLazyMemo<Element[]>(\n    (previousValue) => {\n      if (!node) {\n        return defaultValue;\n      }\n\n      if (\n        previousValue &&\n        node &&\n        previousNode.current &&\n        node.parentNode === previousNode.current.parentNode\n      ) {\n        return previousValue;\n      }\n\n      return getScrollableAncestors(node);\n    },\n    [node]\n  );\n\n  useEffect(() => {\n    previousNode.current = node;\n  }, [node]);\n\n  return ancestors;\n}\n","import {useMemo, useRef} from 'react';\nimport {isHTMLElement, useLazyMemo} from '@dnd-kit/utilities';\n\nimport {\n  Rect,\n  getWindowClientRect,\n  getTransformAgnosticClientRect,\n} from '../../utilities/rect';\nimport type {ClientRect} from '../../types';\n\ntype RectFn<T> = (element: T) => ClientRect;\n\nexport const useClientRect = createUseRectFn(getTransformAgnosticClientRect);\nexport const useClientRects = createUseRectsFn(getTransformAgnosticClientRect);\n\nexport function useRect<T extends HTMLElement>(\n  element: T | null,\n  getRect: (element: T) => ClientRect,\n  forceRecompute?: boolean\n): Rect | null {\n  const previousElement = useRef(element);\n\n  return useLazyMemo<Rect | null>(\n    (previousValue) => {\n      if (!element) {\n        return null;\n      }\n\n      if (\n        forceRecompute ||\n        (!previousValue && element) ||\n        element !== previousElement.current\n      ) {\n        if (isHTMLElement(element) && element.parentNode == null) {\n          return null;\n        }\n\n        return new Rect(getRect(element), element);\n      }\n\n      return previousValue ?? null;\n    },\n    [element, forceRecompute, getRect]\n  );\n}\n\nexport function createUseRectFn<T extends HTMLElement>(getRect: RectFn<T>) {\n  return (element: T | null, forceRecompute?: boolean) =>\n    useRect(element, getRect, forceRecompute);\n}\n\nfunction createUseRectsFn(getRect: RectFn<HTMLElement>) {\n  const defaultValue: Rect[] = [];\n\n  return function useRects(\n    elements: HTMLElement[],\n    forceRecompute?: boolean\n  ): Rect[] {\n    const previousElements = useRef(elements);\n\n    return useLazyMemo<Rect[]>(\n      (previousValue) => {\n        if (!elements.length) {\n          return defaultValue;\n        }\n\n        if (\n          forceRecompute ||\n          (!previousValue && elements.length) ||\n          elements !== previousElements.current\n        ) {\n          return elements.map((element) => new Rect(getRect(element), element));\n        }\n\n        return previousValue ?? defaultValue;\n      },\n      [elements, forceRecompute]\n    );\n  };\n}\n\nexport function useWindowRect(element: typeof window | null) {\n  return useMemo(() => (element ? getWindowClientRect(element) : null), [\n    element,\n  ]);\n}\n","import {isHTMLElement} from '@dnd-kit/utilities';\n\nexport function getMeasurableNode(\n  node: HTMLElement | undefined | null\n): HTMLElement | null {\n  if (!node) {\n    return null;\n  }\n\n  if (node.children.length > 1) {\n    return node;\n  }\n  const firstChild = node.children[0];\n\n  return isHTMLElement(firstChild) ? firstChild : node;\n}\n","export class Listeners {\n  private listeners: [\n    string,\n    EventListenerOrEventListenerObject,\n    AddEventListenerOptions | boolean | undefined\n  ][] = [];\n\n  constructor(private target: EventTarget | null) {}\n\n  public add<T extends Event>(\n    eventName: string,\n    handler: (event: T) => void,\n    options?: AddEventListenerOptions | boolean\n  ) {\n    this.target?.addEventListener(eventName, handler as EventListener, options);\n    this.listeners.push([eventName, handler as EventListener, options]);\n  }\n\n  public removeAll = () => {\n    this.listeners.forEach((listener) =>\n      this.target?.removeEventListener(...listener)\n    );\n  };\n}\n","import type {Coordinates, DistanceMeasurement} from '../../types';\n\nexport function hasExceededDistance(\n  delta: Coordinates,\n  measurement: DistanceMeasurement\n): boolean {\n  const dx = Math.abs(delta.x);\n  const dy = Math.abs(delta.y);\n\n  if (typeof measurement === 'number') {\n    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;\n  }\n\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n\n  return false;\n}\n","export enum EventName {\n  Click = 'click',\n  DragStart = 'dragstart',\n  Keydown = 'keydown',\n  ContextMenu = 'contextmenu',\n  Resize = 'resize',\n  SelectionChange = 'selectionchange',\n  VisibilityChange = 'visibilitychange',\n}\n\nexport function preventDefault(event: Event) {\n  event.preventDefault();\n}\n\nexport function stopPropagation(event: Event) {\n  event.stopPropagation();\n}\n","import type {Coordinates, UniqueIdentifier} from '../../types';\nimport type {SensorContext} from '../types';\n\nexport enum KeyboardCode {\n  Space = 'Space',\n  Down = 'ArrowDown',\n  Right = 'ArrowRight',\n  Left = 'ArrowLeft',\n  Up = 'ArrowUp',\n  Esc = 'Escape',\n  Enter = 'Enter',\n}\n\nexport type KeyboardCodes = {\n  start: KeyboardEvent['code'][];\n  cancel: KeyboardEvent['code'][];\n  end: KeyboardEvent['code'][];\n};\n\nexport type KeyboardCoordinateGetter = (\n  event: KeyboardEvent,\n  args: {\n    active: UniqueIdentifier;\n    currentCoordinates: Coordinates;\n    context: SensorContext;\n  }\n) => Coordinates | void;\n","import {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\n\nexport const defaultKeyboardCodes: KeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter],\n};\n\nexport const defaultKeyboardCoordinateGetter: KeyboardCoordinateGetter = (\n  event,\n  {currentCoordinates}\n) => {\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x + 25,\n      };\n    case KeyboardCode.Left:\n      return {\n        ...currentCoordinates,\n        x: currentCoordinates.x - 25,\n      };\n    case KeyboardCode.Down:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y + 25,\n      };\n    case KeyboardCode.Up:\n      return {\n        ...currentCoordinates,\n        y: currentCoordinates.y - 25,\n      };\n  }\n\n  return undefined;\n};\n","import {\n  add as getAdjustedCoordinates,\n  subtract as getCoordinatesDelta,\n  getOwnerDocument,\n  getWindow,\n  isKeyboardEvent,\n} from '@dnd-kit/utilities';\n\nimport type {Coordinates} from '../../types';\nimport {\n  defaultCoordinates,\n  getTransformAgnosticClientRect,\n  getScrollPosition,\n  getScrollElementRect,\n} from '../../utilities';\nimport {Listeners} from '../utilities';\nimport {EventName} from '../events';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\n\nimport {KeyboardCoordinateGetter, KeyboardCode, KeyboardCodes} from './types';\nimport {\n  defaultKeyboardCodes,\n  defaultKeyboardCoordinateGetter,\n} from './defaults';\n\nexport interface KeyboardSensorOptions extends SensorOptions {\n  keyboardCodes?: KeyboardCodes;\n  coordinateGetter?: KeyboardCoordinateGetter;\n  scrollBehavior?: ScrollBehavior;\n  onActivation?({event}: {event: KeyboardEvent}): void;\n}\n\nexport type KeyboardSensorProps = SensorProps<KeyboardSensorOptions>;\n\nexport class KeyboardSensor implements SensorInstance {\n  public autoScrollEnabled = false;\n  private coordinates: Coordinates = defaultCoordinates;\n  private listeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(private props: KeyboardSensorProps) {\n    const {\n      event: {target},\n    } = props;\n\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    this.handleStart();\n\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n\n    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));\n  }\n\n  private handleStart() {\n    const {activeNode, onStart} = this.props;\n\n    if (!activeNode.node.current) {\n      throw new Error('Active draggable node is undefined');\n    }\n\n    const activeNodeRect = getTransformAgnosticClientRect(\n      activeNode.node.current\n    );\n    const coordinates = {\n      x: activeNodeRect.left,\n      y: activeNodeRect.top,\n    };\n\n    this.coordinates = coordinates;\n\n    onStart(coordinates);\n  }\n\n  private handleKeyDown(event: Event) {\n    if (isKeyboardEvent(event)) {\n      const {coordinates} = this;\n      const {active, context, options} = this.props;\n      const {\n        keyboardCodes = defaultKeyboardCodes,\n        coordinateGetter = defaultKeyboardCoordinateGetter,\n        scrollBehavior = 'smooth',\n      } = options;\n      const {code} = event;\n\n      if (keyboardCodes.end.includes(code)) {\n        this.handleEnd(event);\n        return;\n      }\n\n      if (keyboardCodes.cancel.includes(code)) {\n        this.handleCancel(event);\n        return;\n      }\n\n      const newCoordinates = coordinateGetter(event, {\n        active,\n        context: context.current,\n        currentCoordinates: coordinates,\n      });\n\n      if (newCoordinates) {\n        const scrollDelta = {\n          x: 0,\n          y: 0,\n        };\n        const {scrollableAncestors} = context.current;\n\n        for (const scrollContainer of scrollableAncestors) {\n          const direction = event.code;\n          const coordinatesDelta = getCoordinatesDelta(\n            newCoordinates,\n            coordinates\n          );\n          const {\n            isTop,\n            isRight,\n            isLeft,\n            isBottom,\n            maxScroll,\n            minScroll,\n          } = getScrollPosition(scrollContainer);\n          const scrollElementRect = getScrollElementRect(scrollContainer);\n\n          const clampedCoordinates = {\n            x: Math.min(\n              direction === KeyboardCode.Right\n                ? scrollElementRect.right - scrollElementRect.width / 2\n                : scrollElementRect.right,\n              Math.max(\n                direction === KeyboardCode.Right\n                  ? scrollElementRect.left\n                  : scrollElementRect.left + scrollElementRect.width / 2,\n                newCoordinates.x\n              )\n            ),\n            y: Math.min(\n              direction === KeyboardCode.Down\n                ? scrollElementRect.bottom - scrollElementRect.height / 2\n                : scrollElementRect.bottom,\n              Math.max(\n                direction === KeyboardCode.Down\n                  ? scrollElementRect.top\n                  : scrollElementRect.top + scrollElementRect.height / 2,\n                newCoordinates.y\n              )\n            ),\n          };\n\n          const canScrollX =\n            (direction === KeyboardCode.Right && !isRight) ||\n            (direction === KeyboardCode.Left && !isLeft);\n          const canScrollY =\n            (direction === KeyboardCode.Down && !isBottom) ||\n            (direction === KeyboardCode.Up && !isTop);\n\n          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Right &&\n                scrollContainer.scrollLeft + coordinatesDelta.x <=\n                  maxScroll.x) ||\n              (direction === KeyboardCode.Left &&\n                scrollContainer.scrollLeft + coordinatesDelta.x >= minScroll.x);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                left: coordinatesDelta.x,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.x =\n              direction === KeyboardCode.Right\n                ? scrollContainer.scrollLeft - maxScroll.x\n                : scrollContainer.scrollLeft - minScroll.x;\n\n            scrollContainer.scrollBy({\n              left: -scrollDelta.x,\n              behavior: scrollBehavior,\n            });\n            break;\n          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n            const canFullyScrollToNewCoordinates =\n              (direction === KeyboardCode.Down &&\n                scrollContainer.scrollTop + coordinatesDelta.y <=\n                  maxScroll.y) ||\n              (direction === KeyboardCode.Up &&\n                scrollContainer.scrollTop + coordinatesDelta.y >= minScroll.y);\n\n            if (canFullyScrollToNewCoordinates) {\n              // We don't need to update coordinates, the scroll adjustment alone will trigger\n              // logic to auto-detect the new container we are over\n              scrollContainer.scrollBy({\n                top: coordinatesDelta.y,\n                behavior: scrollBehavior,\n              });\n              return;\n            }\n\n            scrollDelta.y =\n              direction === KeyboardCode.Down\n                ? scrollContainer.scrollTop - maxScroll.y\n                : scrollContainer.scrollTop - minScroll.y;\n\n            scrollContainer.scrollBy({\n              top: -scrollDelta.y,\n              behavior: scrollBehavior,\n            });\n\n            break;\n          }\n        }\n\n        this.handleMove(\n          event,\n          getAdjustedCoordinates(newCoordinates, scrollDelta)\n        );\n      }\n    }\n  }\n\n  private handleMove(event: Event, coordinates: Coordinates) {\n    const {onMove} = this.props;\n\n    event.preventDefault();\n    onMove(coordinates);\n    this.coordinates = coordinates;\n  }\n\n  private handleEnd(event: Event) {\n    const {onEnd} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel(event: Event) {\n    const {onCancel} = this.props;\n\n    event.preventDefault();\n    this.detach();\n    onCancel();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n  }\n\n  static activators = [\n    {\n      eventName: 'onKeyDown' as const,\n      handler: (\n        event: React.KeyboardEvent,\n        {\n          keyboardCodes = defaultKeyboardCodes,\n          onActivation,\n        }: KeyboardSensorOptions\n      ) => {\n        const {code} = event.nativeEvent;\n\n        if (keyboardCodes.start.includes(code)) {\n          event.preventDefault();\n\n          onActivation?.({event: event.nativeEvent});\n\n          return true;\n        }\n\n        return false;\n      },\n    },\n  ];\n}\n","import {\n  subtract as getCoordinatesDelta,\n  getEventCoordinates,\n  getOwnerDocument,\n  getWindow,\n} from '@dnd-kit/utilities';\n\nimport {defaultCoordinates} from '../../utilities';\nimport {\n  getEventListenerTarget,\n  hasExceededDistance,\n  Listeners,\n} from '../utilities';\nimport {EventName, preventDefault, stopPropagation} from '../events';\nimport {KeyboardCode} from '../keyboard';\nimport type {SensorInstance, SensorProps, SensorOptions} from '../types';\nimport type {Coordinates, DistanceMeasurement} from '../../types';\n\ninterface DistanceConstraint {\n  distance: DistanceMeasurement;\n  tolerance?: DistanceMeasurement;\n}\n\ninterface DelayConstraint {\n  delay: number;\n  tolerance: DistanceMeasurement;\n}\n\ninterface EventDescriptor {\n  name: keyof DocumentEventMap;\n  passive?: boolean;\n}\n\nexport interface PointerEventHandlers {\n  move: EventDescriptor;\n  end: EventDescriptor;\n}\n\nexport type PointerActivationConstraint = DistanceConstraint | DelayConstraint;\n\nfunction isDistanceConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DistanceConstraint {\n  return Boolean(constraint && 'distance' in constraint);\n}\n\nfunction isDelayConstraint(\n  constraint: PointerActivationConstraint\n): constraint is DelayConstraint {\n  return Boolean(constraint && 'delay' in constraint);\n}\n\nexport interface AbstractPointerSensorOptions extends SensorOptions {\n  activationConstraint?: PointerActivationConstraint;\n  onActivation?({event}: {event: Event}): void;\n}\n\nexport type AbstractPointerSensorProps = SensorProps<AbstractPointerSensorOptions>;\n\nexport class AbstractPointerSensor implements SensorInstance {\n  public autoScrollEnabled = true;\n  private document: Document;\n  private activated: boolean = false;\n  private initialCoordinates: Coordinates;\n  private timeoutId: NodeJS.Timeout | null = null;\n  private listeners: Listeners;\n  private documentListeners: Listeners;\n  private windowListeners: Listeners;\n\n  constructor(\n    private props: AbstractPointerSensorProps,\n    private events: PointerEventHandlers,\n    listenerTarget = getEventListenerTarget(props.event.target)\n  ) {\n    const {event} = props;\n    const {target} = event;\n\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n\n    this.attach();\n  }\n\n  private attach() {\n    const {\n      events,\n      props: {\n        options: {activationConstraint},\n      },\n    } = this;\n\n    this.listeners.add(events.move.name, this.handleMove, {passive: false});\n    this.listeners.add(events.end.name, this.handleEnd);\n    this.windowListeners.add(EventName.Resize, this.handleCancel);\n    this.windowListeners.add(EventName.DragStart, preventDefault);\n    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n    this.windowListeners.add(EventName.ContextMenu, preventDefault);\n    this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n\n    if (activationConstraint) {\n      if (isDistanceConstraint(activationConstraint)) {\n        return;\n      }\n\n      if (isDelayConstraint(activationConstraint)) {\n        this.timeoutId = setTimeout(\n          this.handleStart,\n          activationConstraint.delay\n        );\n        return;\n      }\n    }\n\n    this.handleStart();\n  }\n\n  private detach() {\n    this.listeners.removeAll();\n    this.windowListeners.removeAll();\n\n    // Wait until the next event loop before removing document listeners\n    // This is necessary because we listen for `click` and `selection` events on the document\n    setTimeout(this.documentListeners.removeAll, 50);\n\n    if (this.timeoutId !== null) {\n      clearTimeout(this.timeoutId);\n      this.timeoutId = null;\n    }\n  }\n\n  private handleStart() {\n    const {initialCoordinates} = this;\n    const {onStart} = this.props;\n\n    if (initialCoordinates) {\n      this.activated = true;\n\n      // Stop propagation of click events once activation constraints are met\n      this.documentListeners.add(EventName.Click, stopPropagation, {\n        capture: true,\n      });\n\n      // Remove any text selection from the document\n      this.removeTextSelection();\n\n      // Prevent further text selection while dragging\n      this.documentListeners.add(\n        EventName.SelectionChange,\n        this.removeTextSelection\n      );\n\n      onStart(initialCoordinates);\n    }\n  }\n\n  private handleMove(event: Event) {\n    const {activated, initialCoordinates, props} = this;\n    const {\n      onMove,\n      options: {activationConstraint},\n    } = props;\n\n    if (!initialCoordinates) {\n      return;\n    }\n\n    const coordinates = getEventCoordinates(event) ?? defaultCoordinates;\n    const delta = getCoordinatesDelta(initialCoordinates, coordinates);\n\n    if (!activated && activationConstraint) {\n      // Constraint validation\n      if (isDelayConstraint(activationConstraint)) {\n        if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n          return this.handleCancel();\n        }\n\n        return;\n      }\n\n      if (isDistanceConstraint(activationConstraint)) {\n        if (\n          activationConstraint.tolerance != null &&\n          hasExceededDistance(delta, activationConstraint.tolerance)\n        ) {\n          return this.handleCancel();\n        }\n        if (hasExceededDistance(delta, activationConstraint.distance)) {\n          return this.handleStart();\n        }\n\n        return;\n      }\n    }\n\n    if (event.cancelable) {\n      event.preventDefault();\n    }\n\n    onMove(coordinates);\n  }\n\n  private handleEnd() {\n    const {onEnd} = this.props;\n\n    this.detach();\n    onEnd();\n  }\n\n  private handleCancel() {\n    const {onCancel} = this.props;\n\n    this.detach();\n    onCancel();\n  }\n\n  private handleKeydown(event: KeyboardEvent) {\n    if (event.code === KeyboardCode.Esc) {\n      this.handleCancel();\n    }\n  }\n\n  private removeTextSelection() {\n    this.document.getSelection()?.removeAllRanges();\n  }\n}\n","import {getOwnerDocument, getWindow} from '@dnd-kit/utilities';\n\nexport function getEventListenerTarget(\n  target: EventTarget | null\n): EventTarget | Document {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n\n  const {EventTarget} = getWindow(target);\n\n  return target instanceof EventTarget ? target : getOwnerDocument(target);\n}\n","import type {PointerEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  AbstractPointerSensorOptions,\n  PointerEventHandlers,\n} from './AbstractPointerSensor';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'pointermove'},\n  end: {name: 'pointerup'},\n};\n\nexport interface PointerSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type PointerSensorProps = SensorProps<PointerSensorOptions>;\n\nexport class PointerSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    const {event} = props;\n    // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    const listenerTarget = getOwnerDocument(event.target);\n\n    super(props, events, listenerTarget);\n  }\n\n  static activators = [\n    {\n      eventName: 'onPointerDown' as const,\n      handler: (\n        {nativeEvent: event}: PointerEvent,\n        {onActivation}: PointerSensorOptions\n      ) => {\n        if (!event.isPrimary || event.button !== 0) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {MouseEvent} from 'react';\nimport {getOwnerDocument} from '@dnd-kit/utilities';\n\nimport type {SensorProps} from '../types';\nimport {\n  AbstractPointerSensor,\n  PointerEventHandlers,\n  AbstractPointerSensorOptions,\n} from '../pointer';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'mousemove'},\n  end: {name: 'mouseup'},\n};\n\nenum MouseButton {\n  RightClick = 2,\n}\n\nexport interface MouseSensorOptions extends AbstractPointerSensorOptions {}\n\nexport type MouseSensorProps = SensorProps<MouseSensorOptions>;\n\nexport class MouseSensor extends AbstractPointerSensor {\n  constructor(props: MouseSensorProps) {\n    super(props, events, getOwnerDocument(props.event.target));\n  }\n\n  static activators = [\n    {\n      eventName: 'onMouseDown' as const,\n      handler: (\n        {nativeEvent: event}: MouseEvent,\n        {onActivation}: MouseSensorOptions\n      ) => {\n        if (event.button === MouseButton.RightClick) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n}\n","import type {TouchEvent} from 'react';\n\nimport {\n  AbstractPointerSensor,\n  PointerSensorProps,\n  PointerEventHandlers,\n  PointerSensorOptions,\n} from '../pointer';\nimport type {SensorProps} from '../types';\n\nconst events: PointerEventHandlers = {\n  move: {name: 'touchmove'},\n  end: {name: 'touchend'},\n};\n\nexport interface TouchSensorOptions extends PointerSensorOptions {}\n\nexport type TouchSensorProps = SensorProps<TouchSensorOptions>;\n\nexport class TouchSensor extends AbstractPointerSensor {\n  constructor(props: PointerSensorProps) {\n    super(props, events);\n  }\n\n  static activators = [\n    {\n      eventName: 'onTouchStart' as const,\n      handler: (\n        {nativeEvent: event}: TouchEvent,\n        {onActivation}: TouchSensorOptions\n      ) => {\n        const {touches} = event;\n\n        if (touches.length > 1) {\n          return false;\n        }\n\n        onActivation?.({event});\n\n        return true;\n      },\n    },\n  ];\n\n  static setup() {\n    // Adding a non-capture and non-passive `touchmove` listener in order\n    // to force `event.preventDefault()` calls to work in dynamically added\n    // touchmove event handlers. This is required for iOS Safari.\n    window.addEventListener(events.move.name, noop, {\n      capture: false,\n      passive: false,\n    });\n\n    return function teardown() {\n      window.removeEventListener(events.move.name, noop);\n    };\n\n    // We create a new handler because the teardown function of another sensor\n    // could remove our event listener if we use a referentially equal listener.\n    function noop() {}\n  }\n}\n","import type {FirstArgument, Transform} from '@dnd-kit/utilities';\n\nimport type {Modifiers, Modifier} from './types';\n\nexport function applyModifiers(\n  modifiers: Modifiers | undefined,\n  {transform, ...args}: FirstArgument<Modifier>\n): Transform {\n  return modifiers?.length\n    ? modifiers.reduce<Transform>((accumulator, modifier) => {\n        return modifier({\n          transform: accumulator,\n          ...args,\n        });\n      }, transform)\n    : transform;\n}\n","import React, {\n  memo,\n  createContext,\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react';\nimport {unstable_batchedUpdates} from 'react-dom';\nimport {\n  add,\n  getEventCoordinates,\n  Transform,\n  useLatestValue,\n  useIsomorphicLayoutEffect,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {\n  Action,\n  PublicContext,\n  InternalContext,\n  PublicContextDescriptor,\n  InternalContextDescriptor,\n  getInitialState,\n  reducer,\n} from '../../store';\nimport {DndMonitorContext, DndMonitorState} from '../../hooks/monitor';\nimport {\n  useAutoScroller,\n  useCachedNode,\n  useCombineActivators,\n  useDragOverlayMeasuring,\n  useDroppableMeasuring,\n  useScrollableAncestors,\n  useSensorSetup,\n  useClientRect,\n  useClientRects,\n  useWindowRect,\n  useRect,\n  useScrollOffsets,\n} from '../../hooks/utilities';\nimport type {\n  AutoScrollOptions,\n  DroppableMeasuring,\n  SyntheticListener,\n} from '../../hooks/utilities';\nimport {\n  KeyboardSensor,\n  PointerSensor,\n  Sensor,\n  SensorContext,\n  SensorDescriptor,\n  SensorHandler,\n  SensorInstance,\n} from '../../sensors';\nimport {\n  adjustScale,\n  CollisionDetection,\n  defaultCoordinates,\n  getAdjustedRect,\n  getRectDelta,\n  getFirstCollision,\n  rectIntersection,\n} from '../../utilities';\nimport {getTransformAgnosticClientRect} from '../../utilities/rect';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport type {Active, DataRef, Over} from '../../store/types';\nimport type {\n  ClientRect,\n  DragStartEvent,\n  DragCancelEvent,\n  DragEndEvent,\n  DragMoveEvent,\n  DragOverEvent,\n  UniqueIdentifier,\n} from '../../types';\nimport {\n  Accessibility,\n  Announcements,\n  screenReaderInstructions as defaultScreenReaderInstructions,\n  ScreenReaderInstructions,\n} from '../Accessibility';\n\nexport interface Props {\n  id?: string;\n  autoScroll?: boolean | AutoScrollOptions;\n  announcements?: Announcements;\n  cancelDrop?: CancelDrop;\n  children?: React.ReactNode;\n  collisionDetection?: CollisionDetection;\n  measuring?: MeasuringConfiguration;\n  modifiers?: Modifiers;\n  screenReaderInstructions?: ScreenReaderInstructions;\n  sensors?: SensorDescriptor<any>[];\n  onDragStart?(event: DragStartEvent): void;\n  onDragMove?(event: DragMoveEvent): void;\n  onDragOver?(event: DragOverEvent): void;\n  onDragEnd?(event: DragEndEvent): void;\n  onDragCancel?(event: DragCancelEvent): void;\n}\n\ninterface Measuring {\n  measure(node: HTMLElement): ClientRect;\n}\n\nexport interface DraggableMeasuring extends Measuring {}\n\nexport interface DragOverlayMeasuring extends Measuring {}\n\nexport interface MeasuringConfiguration {\n  draggable?: Partial<DraggableMeasuring>;\n  droppable?: Partial<DroppableMeasuring>;\n  dragOverlay?: Partial<DragOverlayMeasuring>;\n}\n\nexport interface CancelDropArguments extends DragEndEvent {}\n\nexport type CancelDrop = (\n  args: CancelDropArguments\n) => boolean | Promise<boolean>;\n\ninterface DndEvent extends Event {\n  dndKit?: {\n    capturedBy: Sensor<any>;\n  };\n}\n\nconst defaultSensors = [\n  {sensor: PointerSensor, options: {}},\n  {sensor: KeyboardSensor, options: {}},\n];\n\nconst defaultData: DataRef = {current: {}};\n\nexport const ActiveDraggableContext = createContext<Transform>({\n  ...defaultCoordinates,\n  scaleX: 1,\n  scaleY: 1,\n});\n\nexport const DndContext = memo(function DndContext({\n  id,\n  autoScroll = true,\n  announcements,\n  children,\n  sensors = defaultSensors,\n  collisionDetection = rectIntersection,\n  measuring,\n  modifiers,\n  screenReaderInstructions = defaultScreenReaderInstructions,\n  ...props\n}: Props) {\n  const store = useReducer(reducer, undefined, getInitialState);\n  const [state, dispatch] = store;\n  const [monitorState, setMonitorState] = useState<DndMonitorState>(() => ({\n    type: null,\n    event: null,\n  }));\n  const [isDragging, setIsDragging] = useState(false);\n  const {\n    draggable: {active: activeId, nodes: draggableNodes, translate},\n    droppable: {containers: droppableContainers},\n  } = state;\n  const node = activeId ? draggableNodes[activeId] : null;\n  const activeRects = useRef<Active['rect']['current']>({\n    initial: null,\n    translated: null,\n  });\n  const active = useMemo<Active | null>(\n    () =>\n      activeId != null\n        ? {\n            id: activeId,\n            // It's possible for the active node to unmount while dragging\n            data: node?.data ?? defaultData,\n            rect: activeRects,\n          }\n        : null,\n    [activeId, node]\n  );\n  const activeRef = useRef<UniqueIdentifier | null>(null);\n  const [activeSensor, setActiveSensor] = useState<SensorInstance | null>(null);\n  const [activatorEvent, setActivatorEvent] = useState<Event | null>(null);\n  const latestProps = useLatestValue(props, Object.values(props));\n  const draggableDescribedById = useUniqueId(`DndDescribedBy`, id);\n  const enabledDroppableContainers = useMemo(\n    () => droppableContainers.getEnabled(),\n    [droppableContainers]\n  );\n  const {\n    droppableRects,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDroppableMeasuring(enabledDroppableContainers, {\n    dragging: isDragging,\n    dependencies: [translate.x, translate.y],\n    config: measuring?.droppable,\n  });\n  const activeNode = useCachedNode(draggableNodes, activeId);\n  const activationCoordinates = activatorEvent\n    ? getEventCoordinates(activatorEvent)\n    : null;\n  const activeNodeRect = useRect(\n    activeNode,\n    measuring?.draggable?.measure ?? getTransformAgnosticClientRect\n  );\n  const containerNodeRect = useClientRect(\n    activeNode ? activeNode.parentElement : null\n  );\n  const sensorContext = useRef<SensorContext>({\n    active: null,\n    activeNode,\n    collisionRect: null,\n    collisions: null,\n    droppableRects,\n    draggableNodes,\n    draggingNode: null,\n    draggingNodeRect: null,\n    droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null,\n  });\n  const overNode = droppableContainers.getNodeFor(\n    sensorContext.current.over?.id\n  );\n  const dragOverlay = useDragOverlayMeasuring({\n    measure: measuring?.dragOverlay?.measure,\n  });\n\n  // Use the rect of the drag overlay if it is mounted\n  const draggingNode = dragOverlay.nodeRef.current ?? activeNode;\n  const draggingNodeRect = dragOverlay.rect ?? activeNodeRect;\n  const initialActiveNodeRectRef = useRef<ClientRect | null>(null);\n  const initialActiveNodeRect = initialActiveNodeRectRef.current;\n\n  // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n  const nodeRectDelta =\n    draggingNodeRect === activeNodeRect\n      ? getRectDelta(activeNodeRect, initialActiveNodeRect)\n      : defaultCoordinates;\n\n  // Get the window rect of the dragging node\n  const windowRect = useWindowRect(\n    draggingNode ? draggingNode.ownerDocument.defaultView : null\n  );\n\n  // Get scrollable ancestors of the dragging node\n  const scrollableAncestors = useScrollableAncestors(\n    activeId ? overNode ?? draggingNode : null\n  );\n  const scrollableAncestorRects = useClientRects(scrollableAncestors as any);\n\n  // Apply modifiers\n  const modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1,\n    },\n    activatorEvent,\n    active,\n    activeNodeRect,\n    containerNodeRect,\n    draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    windowRect,\n  });\n\n  const pointerCoordinates = activationCoordinates\n    ? add(activationCoordinates, translate)\n    : null;\n\n  const scrollAdjustment = useScrollOffsets(scrollableAncestors);\n\n  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n\n  const collisionRect = draggingNodeRect\n    ? getAdjustedRect(draggingNodeRect, modifiedTranslate)\n    : null;\n\n  const collisions =\n    active && collisionRect\n      ? collisionDetection({\n          active,\n          collisionRect,\n          droppableContainers: enabledDroppableContainers,\n          pointerCoordinates,\n        })\n      : null;\n  const overId = getFirstCollision(collisions, 'id');\n  const [over, setOver] = useState<Over | null>(null);\n\n  const transform = adjustScale(\n    modifiedTranslate,\n    over?.rect ?? null,\n    activeNodeRect\n  );\n\n  const instantiateSensor = useCallback(\n    (\n      event: React.SyntheticEvent,\n      {sensor: Sensor, options}: SensorDescriptor<any>\n    ) => {\n      if (!activeRef.current) {\n        return;\n      }\n\n      const activeNode = draggableNodes[activeRef.current];\n\n      if (!activeNode) {\n        return;\n      }\n\n      const sensorInstance = new Sensor({\n        active: activeRef.current,\n        activeNode,\n        event: event.nativeEvent,\n        options,\n        // Sensors need to be instantiated with refs for arguments that change over time\n        // otherwise they are frozen in time with the stale arguments\n        context: sensorContext,\n        onStart(initialCoordinates) {\n          const id = activeRef.current;\n\n          if (!id) {\n            return;\n          }\n\n          const node = draggableNodes[id];\n\n          if (!node) {\n            return;\n          }\n\n          const {onDragStart} = latestProps.current;\n          const event: DragStartEvent = {\n            active: {id, data: node.data, rect: activeRects},\n          };\n\n          unstable_batchedUpdates(() => {\n            dispatch({\n              type: Action.DragStart,\n              initialCoordinates,\n              active: id,\n            });\n            setMonitorState({type: Action.DragStart, event});\n          });\n\n          onDragStart?.(event);\n        },\n        onMove(coordinates) {\n          dispatch({\n            type: Action.DragMove,\n            coordinates,\n          });\n        },\n        onEnd: createHandler(Action.DragEnd),\n        onCancel: createHandler(Action.DragCancel),\n      });\n\n      unstable_batchedUpdates(() => {\n        setActiveSensor(sensorInstance);\n        setActivatorEvent(event.nativeEvent);\n      });\n\n      function createHandler(type: Action.DragEnd | Action.DragCancel) {\n        return async function handler() {\n          const {\n            active,\n            collisions,\n            over,\n            scrollAdjustedTranslate,\n          } = sensorContext.current;\n          let event: DragEndEvent | null = null;\n\n          if (active && scrollAdjustedTranslate) {\n            const {cancelDrop} = latestProps.current;\n\n            event = {\n              active: active,\n              collisions,\n              delta: scrollAdjustedTranslate,\n              over,\n            };\n\n            if (type === Action.DragEnd && typeof cancelDrop === 'function') {\n              const shouldCancel = await Promise.resolve(cancelDrop(event));\n\n              if (shouldCancel) {\n                type = Action.DragCancel;\n              }\n            }\n          }\n\n          activeRef.current = null;\n\n          unstable_batchedUpdates(() => {\n            dispatch({type});\n            setOver(null);\n            setIsDragging(false);\n            setActiveSensor(null);\n            setActivatorEvent(null);\n\n            if (event) {\n              setMonitorState({type, event});\n            }\n\n            if (event) {\n              const {onDragCancel, onDragEnd} = latestProps.current;\n              const handler =\n                type === Action.DragEnd ? onDragEnd : onDragCancel;\n\n              handler?.(event);\n            }\n          });\n        };\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes]\n  );\n\n  const bindActivatorToSensorInstantiator = useCallback(\n    (\n      handler: SensorHandler,\n      sensor: SensorDescriptor<any>\n    ): SyntheticListener['handler'] => {\n      return (event, active) => {\n        const nativeEvent = event.nativeEvent as DndEvent;\n\n        if (\n          // No active draggable\n          activeRef.current !== null ||\n          // Event has already been captured\n          nativeEvent.dndKit ||\n          nativeEvent.defaultPrevented\n        ) {\n          return;\n        }\n\n        if (handler(event, sensor.options) === true) {\n          nativeEvent.dndKit = {\n            capturedBy: sensor.sensor,\n          };\n\n          activeRef.current = active;\n          instantiateSensor(event, sensor);\n        }\n      };\n    },\n    [instantiateSensor]\n  );\n\n  const activators = useCombineActivators(\n    sensors,\n    bindActivatorToSensorInstantiator\n  );\n\n  useSensorSetup(sensors);\n\n  useEffect(() => {\n    if (activeId != null) {\n      setIsDragging(true);\n    }\n  }, [activeId]);\n\n  useEffect(() => {\n    if (!active) {\n      initialActiveNodeRectRef.current = null;\n    }\n\n    if (active && activeNodeRect && !initialActiveNodeRectRef.current) {\n      initialActiveNodeRectRef.current = activeNodeRect;\n    }\n  }, [activeNodeRect, active]);\n\n  useEffect(\n    () => {\n      const {onDragMove} = latestProps.current;\n      const {active, collisions, over} = sensorContext.current;\n\n      if (!active) {\n        return;\n      }\n\n      const event: DragMoveEvent = {\n        active,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      setMonitorState({type: Action.DragMove, event});\n      onDragMove?.(event);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]\n  );\n\n  useEffect(\n    () => {\n      const {\n        active,\n        collisions,\n        droppableContainers,\n        scrollAdjustedTranslate,\n      } = sensorContext.current;\n\n      if (!active || !activeRef.current || !scrollAdjustedTranslate) {\n        return;\n      }\n\n      const {onDragOver} = latestProps.current;\n      const overContainer = droppableContainers.get(overId);\n      const over =\n        overContainer && overContainer.rect.current\n          ? {\n              id: overContainer.id,\n              rect: overContainer.rect.current,\n              data: overContainer.data,\n              disabled: overContainer.disabled,\n            }\n          : null;\n      const event: DragOverEvent = {\n        active,\n        collisions,\n        delta: {\n          x: scrollAdjustedTranslate.x,\n          y: scrollAdjustedTranslate.y,\n        },\n        over,\n      };\n\n      unstable_batchedUpdates(() => {\n        setOver(over);\n        setMonitorState({type: Action.DragOver, event});\n        onDragOver?.(event);\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [overId]\n  );\n\n  useIsomorphicLayoutEffect(() => {\n    sensorContext.current = {\n      active,\n      activeNode,\n      collisionRect,\n      collisions,\n      droppableRects,\n      draggableNodes,\n      draggingNode,\n      draggingNodeRect,\n      droppableContainers,\n      over,\n      scrollableAncestors,\n      scrollAdjustedTranslate: scrollAdjustedTranslate,\n    };\n\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: collisionRect,\n    };\n  }, [\n    active,\n    activeNode,\n    collisions,\n    collisionRect,\n    draggableNodes,\n    draggingNode,\n    draggingNodeRect,\n    droppableRects,\n    droppableContainers,\n    over,\n    scrollableAncestors,\n    scrollAdjustedTranslate,\n  ]);\n\n  useAutoScroller({\n    ...getAutoScrollerOptions(),\n    draggingRect: collisionRect,\n    pointerCoordinates,\n    scrollableAncestors,\n    scrollableAncestorRects,\n  });\n\n  const publicContext = useMemo(() => {\n    const context: PublicContextDescriptor = {\n      active,\n      activeNode,\n      activeNodeRect,\n      activatorEvent,\n      collisions,\n      containerNodeRect,\n      dragOverlay,\n      draggableNodes,\n      droppableContainers,\n      droppableRects,\n      over,\n      measureDroppableContainers,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      measuringScheduled,\n      windowRect,\n    };\n\n    return context;\n  }, [\n    active,\n    activeNode,\n    activeNodeRect,\n    activatorEvent,\n    collisions,\n    containerNodeRect,\n    dragOverlay,\n    draggableNodes,\n    droppableContainers,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    scrollableAncestors,\n    scrollableAncestorRects,\n    measuringScheduled,\n    windowRect,\n  ]);\n\n  const internalContext = useMemo(() => {\n    const context: InternalContextDescriptor = {\n      activatorEvent,\n      activators,\n      active,\n      activeNodeRect,\n      ariaDescribedById: {\n        draggable: draggableDescribedById,\n      },\n      dispatch,\n      draggableNodes,\n      over,\n      measureDroppableContainers,\n    };\n\n    return context;\n  }, [\n    activatorEvent,\n    activators,\n    active,\n    activeNodeRect,\n    dispatch,\n    draggableDescribedById,\n    draggableNodes,\n    over,\n    measureDroppableContainers,\n  ]);\n\n  return (\n    <DndMonitorContext.Provider value={monitorState}>\n      <InternalContext.Provider value={internalContext}>\n        <PublicContext.Provider value={publicContext}>\n          <ActiveDraggableContext.Provider value={transform}>\n            {children}\n          </ActiveDraggableContext.Provider>\n        </PublicContext.Provider>\n      </InternalContext.Provider>\n      <Accessibility\n        announcements={announcements}\n        hiddenTextDescribedById={draggableDescribedById}\n        screenReaderInstructions={screenReaderInstructions}\n      />\n    </DndMonitorContext.Provider>\n  );\n\n  function getAutoScrollerOptions() {\n    const activeSensorDisablesAutoscroll =\n      activeSensor?.autoScrollEnabled === false;\n    const autoScrollGloballyDisabled =\n      typeof autoScroll === 'object'\n        ? autoScroll.enabled === false\n        : autoScroll === false;\n    const enabled =\n      !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n\n    if (typeof autoScroll === 'object') {\n      return {\n        ...autoScroll,\n        enabled,\n      };\n    }\n\n    return {enabled};\n  }\n});\n","import {useLazyMemo} from '@dnd-kit/utilities';\n\nimport type {DraggableNode, DraggableNodes} from '../../store';\nimport type {UniqueIdentifier} from '../../types';\n\nexport function useCachedNode(\n  draggableNodes: DraggableNodes,\n  id: UniqueIdentifier | null\n): DraggableNode['node']['current'] {\n  const draggableNode = id !== null ? draggableNodes[id] : undefined;\n  const node = draggableNode ? draggableNode.node.current : null;\n\n  return useLazyMemo(\n    (cachedNode) => {\n      if (id === null) {\n        return null;\n      }\n\n      // In some cases, the draggable node can unmount while dragging\n      // This is the case for virtualized lists. In those situations,\n      // we fall back to the last known value for that node.\n      return node ?? cachedNode ?? null;\n    },\n    [node, id]\n  );\n}\n","import {useMemo, useCallback, useState} from 'react';\nimport {isHTMLElement, useNodeRef} from '@dnd-kit/utilities';\n\nimport {useResizeObserver} from './useResizeObserver';\nimport {getMeasurableNode} from '../../utilities/nodes';\nimport {getClientRect} from '../../utilities/rect';\nimport type {PublicContextDescriptor} from '../../store';\nimport type {ClientRect} from '../../types';\n\ninterface Arguments {\n  measure?(element: HTMLElement): ClientRect;\n}\n\nexport function useDragOverlayMeasuring({\n  measure = getClientRect,\n}: Arguments): PublicContextDescriptor['dragOverlay'] {\n  const [rect, setRect] = useState<ClientRect | null>(null);\n  const handleResize = useCallback(\n    (entries: ResizeObserverEntry[]) => {\n      for (const {target} of entries) {\n        if (isHTMLElement(target)) {\n          setRect((rect) => {\n            const newRect = measure(target);\n\n            return rect\n              ? {...rect, width: newRect.width, height: newRect.height}\n              : newRect;\n          });\n          break;\n        }\n      }\n    },\n    [measure]\n  );\n  const resizeObserver = useResizeObserver({onResize: handleResize});\n  const handleNodeChange = useCallback(\n    (element) => {\n      const node = getMeasurableNode(element);\n\n      resizeObserver?.disconnect();\n\n      if (node) {\n        resizeObserver?.observe(node);\n      }\n\n      setRect(node ? measure(node) : null);\n    },\n    [measure, resizeObserver]\n  );\n  const [nodeRef, setRef] = useNodeRef(handleNodeChange);\n\n  return useMemo(\n    () => ({\n      nodeRef,\n      rect,\n      setRef,\n    }),\n    [rect, nodeRef, setRef]\n  );\n}\n","import type {Coordinates, ClientRect} from '../../types';\nimport {defaultCoordinates} from '../coordinates';\n\nexport function getRectDelta(\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Coordinates {\n  return rect1 && rect2\n    ? {\n        x: rect1.left - rect2.left,\n        y: rect1.top - rect2.top,\n      }\n    : defaultCoordinates;\n}\n","import type {ClientRect} from '../../types';\n\nexport function getWindowClientRect(element: typeof window): ClientRect {\n  const width = element.innerWidth;\n  const height = element.innerHeight;\n\n  return {\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width,\n    height,\n  };\n}\n","import {useState, useCallback, useMemo, useRef, useEffect} from 'react';\nimport {add} from '@dnd-kit/utilities';\n\nimport {\n  defaultCoordinates,\n  getScrollableElement,\n  getScrollCoordinates,\n  getScrollOffsets,\n} from '../../utilities';\nimport type {Coordinates} from '../../types';\n\ntype ScrollCoordinates = Map<HTMLElement | Window, Coordinates>;\n\nexport function useScrollOffsets(elements: Element[]): Coordinates {\n  const [\n    scrollCoordinates,\n    setScrollCoordinates,\n  ] = useState<ScrollCoordinates | null>(null);\n  const prevElements = useRef(elements);\n\n  // To-do: Throttle the handleScroll callback\n  const handleScroll = useCallback((event: Event) => {\n    const scrollingElement = getScrollableElement(event.target);\n\n    if (!scrollingElement) {\n      return;\n    }\n\n    setScrollCoordinates((scrollCoordinates) => {\n      if (!scrollCoordinates) {\n        return null;\n      }\n\n      scrollCoordinates.set(\n        scrollingElement,\n        getScrollCoordinates(scrollingElement)\n      );\n\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n\n  useEffect(() => {\n    const previousElements = prevElements.current;\n\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n\n      const entries = elements\n        .map((element) => {\n          const scrollableElement = getScrollableElement(element);\n\n          if (scrollableElement) {\n            scrollableElement.addEventListener('scroll', handleScroll, {\n              passive: true,\n            });\n\n            return [\n              scrollableElement,\n              getScrollCoordinates(scrollableElement),\n            ] as const;\n          }\n\n          return null;\n        })\n        .filter(\n          (\n            entry\n          ): entry is [\n            HTMLElement | (Window & typeof globalThis),\n            Coordinates\n          ] => entry != null\n        );\n\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n\n      prevElements.current = elements;\n    }\n\n    return () => {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n\n    function cleanup(elements: Element[]) {\n      elements.forEach((element) => {\n        const scrollableElement = getScrollableElement(element);\n\n        scrollableElement?.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n\n  return useMemo(() => {\n    if (elements.length) {\n      return scrollCoordinates\n        ? Array.from(scrollCoordinates.values()).reduce(\n            (acc, coordinates) => add(acc, coordinates),\n            defaultCoordinates\n          )\n        : getScrollOffsets(elements);\n    }\n\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\n","import type {Transform} from '@dnd-kit/utilities';\nimport type {ClientRect} from '../../types';\n\nexport function adjustScale(\n  transform: Transform,\n  rect1: ClientRect | null,\n  rect2: ClientRect | null\n): Transform {\n  return {\n    ...transform,\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1,\n  };\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorHandler} from '../../sensors';\nimport type {\n  SyntheticListener,\n  SyntheticListeners,\n} from './useSyntheticListeners';\n\nexport function useCombineActivators(\n  sensors: SensorDescriptor<any>[],\n  getSyntheticHandler: (\n    handler: SensorHandler,\n    sensor: SensorDescriptor<any>\n  ) => SyntheticListener['handler']\n): SyntheticListeners {\n  return useMemo(\n    () =>\n      sensors.reduce<SyntheticListeners>((accumulator, sensor) => {\n        const {sensor: Sensor} = sensor;\n\n        const sensorActivators = Sensor.activators.map((activator) => ({\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor),\n        }));\n\n        return [...accumulator, ...sensorActivators];\n      }, []),\n    [sensors, getSyntheticHandler]\n  );\n}\n","import {useEffect} from 'react';\nimport {canUseDOM} from '@dnd-kit/utilities';\n\nimport type {SensorDescriptor} from '../../sensors';\n\nexport function useSensorSetup(sensors: SensorDescriptor<any>[]) {\n  useEffect(\n    () => {\n      if (!canUseDOM) {\n        return;\n      }\n\n      const teardownFns = sensors.map(({sensor}) => sensor.setup?.());\n\n      return () => {\n        for (const teardown of teardownFns) {\n          teardown?.();\n        }\n      };\n    },\n    // TO-DO: Sensors length could theoretically change which would not be a valid dependency\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    sensors.map(({sensor}) => sensor)\n  );\n}\n","import {createContext, useContext, useMemo} from 'react';\nimport {\n  Transform,\n  useNodeRef,\n  useIsomorphicLayoutEffect,\n  useLatestValue,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext, Data} from '../store';\nimport {ActiveDraggableContext} from '../components/DndContext';\nimport {useSyntheticListeners, SyntheticListenerMap} from './utilities';\n\nexport interface UseDraggableArguments {\n  id: string;\n  data?: Data;\n  disabled?: boolean;\n  attributes?: {\n    role?: string;\n    roleDescription?: string;\n    tabIndex?: number;\n  };\n}\n\nexport type DraggableSyntheticListeners = SyntheticListenerMap | undefined;\n\nconst NullContext = createContext<any>(null);\n\nconst defaultRole = 'button';\n\nconst ID_PREFIX = 'Droppable';\n\nexport function useDraggable({\n  id,\n  data,\n  disabled = false,\n  attributes,\n}: UseDraggableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {\n    activators,\n    activatorEvent,\n    active,\n    activeNodeRect,\n    ariaDescribedById,\n    draggableNodes,\n    over,\n  } = useContext(InternalContext);\n  const {role = defaultRole, roleDescription = 'draggable', tabIndex = 0} =\n    attributes ?? {};\n  const isDragging = active?.id === id;\n  const transform: Transform | null = useContext(\n    isDragging ? ActiveDraggableContext : NullContext\n  );\n  const [node, setNodeRef] = useNodeRef();\n  const listeners = useSyntheticListeners(activators, id);\n  const dataRef = useLatestValue(data);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      draggableNodes[id] = {id, key, node, data: dataRef};\n\n      return () => {\n        const node = draggableNodes[id];\n\n        if (node && node.key === key) {\n          delete draggableNodes[id];\n        }\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [draggableNodes, id]\n  );\n\n  const memoizedAttributes = useMemo(\n    () => ({\n      role,\n      tabIndex,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable,\n    }),\n    [role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]\n  );\n\n  return {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes: memoizedAttributes,\n    isDragging,\n    listeners: disabled ? undefined : listeners,\n    node,\n    over,\n    setNodeRef,\n    transform,\n  };\n}\n","import {ContextType, useContext} from 'react';\nimport {PublicContext} from '../store';\n\nexport function useDndContext() {\n  return useContext(PublicContext);\n}\n\nexport type UseDndContextReturnValue = ContextType<typeof PublicContext>;\n","import {useCallback, useContext, useEffect, useRef} from 'react';\nimport {\n  useIsomorphicLayoutEffect,\n  useLatestValue,\n  useNodeRef,\n  useUniqueId,\n} from '@dnd-kit/utilities';\n\nimport {InternalContext, Action, Data} from '../store';\nimport type {ClientRect, UniqueIdentifier} from '../types';\n\nimport {useResizeObserver} from './utilities';\n\ninterface ResizeObserverConfig {\n  /** Whether the ResizeObserver should be disabled entirely */\n  disabled?: boolean;\n  /** Resize events may affect the layout and position of other droppable containers.\n   * Specify an array of `UniqueIdentifier` of droppable containers that should also be re-measured\n   * when this droppable container resizes. Specifying an empty array re-measures all droppable containers.\n   */\n  updateMeasurementsFor?: UniqueIdentifier[];\n  /** Represents the debounce timeout between when resize events are observed and when elements are re-measured */\n  timeout?: number;\n}\n\nexport interface UseDroppableArguments {\n  id: UniqueIdentifier;\n  disabled?: boolean;\n  data?: Data;\n  resizeObserverConfig?: ResizeObserverConfig;\n}\n\nconst ID_PREFIX = 'Droppable';\n\nconst defaultResizeObserverConfig = {\n  timeout: 25,\n};\n\nexport function useDroppable({\n  data,\n  disabled = false,\n  id,\n  resizeObserverConfig,\n}: UseDroppableArguments) {\n  const key = useUniqueId(ID_PREFIX);\n  const {active, dispatch, over, measureDroppableContainers} = useContext(\n    InternalContext\n  );\n  const resizeObserverConnected = useRef(false);\n  const rect = useRef<ClientRect | null>(null);\n  const callbackId = useRef<NodeJS.Timeout | null>(null);\n  const {\n    disabled: resizeObserverDisabled,\n    updateMeasurementsFor,\n    timeout: resizeObserverTimeout,\n  } = {\n    ...defaultResizeObserverConfig,\n    ...resizeObserverConfig,\n  };\n  const ids = useLatestValue(updateMeasurementsFor ?? id);\n  const handleResize = useCallback(\n    () => {\n      if (!resizeObserverConnected.current) {\n        // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n        // assuming the element is rendered and displayed.\n        resizeObserverConnected.current = true;\n        return;\n      }\n\n      if (callbackId.current != null) {\n        clearTimeout(callbackId.current);\n      }\n\n      callbackId.current = setTimeout(() => {\n        measureDroppableContainers(\n          typeof ids.current === 'string' ? [ids.current] : ids.current\n        );\n        callbackId.current = null;\n      }, resizeObserverTimeout);\n    },\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [resizeObserverTimeout]\n  );\n  const resizeObserver = useResizeObserver({\n    onResize: handleResize,\n    disabled: resizeObserverDisabled || !active,\n  });\n  const handleNodeChange = useCallback(\n    (newElement: HTMLElement | null, previousElement: HTMLElement | null) => {\n      if (!resizeObserver) {\n        return;\n      }\n\n      if (previousElement) {\n        resizeObserver.unobserve(previousElement);\n        resizeObserverConnected.current = false;\n      }\n\n      if (newElement) {\n        resizeObserver.observe(newElement);\n      }\n    },\n    [resizeObserver]\n  );\n  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);\n  const dataRef = useLatestValue(data);\n\n  useEffect(() => {\n    if (!resizeObserver || !nodeRef.current) {\n      return;\n    }\n\n    resizeObserver.disconnect();\n    resizeObserverConnected.current = false;\n    resizeObserver.observe(nodeRef.current);\n  }, [nodeRef, resizeObserver]);\n\n  useIsomorphicLayoutEffect(\n    () => {\n      dispatch({\n        type: Action.RegisterDroppable,\n        element: {\n          id,\n          key,\n          disabled,\n          node: nodeRef,\n          rect,\n          data: dataRef,\n        },\n      });\n\n      return () =>\n        dispatch({\n          type: Action.UnregisterDroppable,\n          key,\n          id,\n        });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [id]\n  );\n\n  useEffect(\n    () => {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id,\n        key,\n        disabled,\n      });\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disabled]\n  );\n\n  return {\n    active,\n    rect,\n    isOver: over?.id === id,\n    node: nodeRef,\n    over,\n    setNodeRef,\n  };\n}\n","import {useState} from 'react';\nimport {CSS, Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\nimport type {UniqueIdentifier} from '../../../types';\nimport type {DraggableNodes} from '../../../store';\nimport {getMeasurableNode} from '../../../utilities/nodes';\nimport {getTransformAgnosticClientRect} from '../../../utilities/rect';\n\nexport interface DropAnimation {\n  duration: number;\n  easing: string;\n  dragSourceOpacity?: number;\n}\n\ninterface Arguments {\n  activeId: UniqueIdentifier | null;\n  animate: boolean;\n  adjustScale: boolean;\n  draggableNodes: DraggableNodes;\n  duration: DropAnimation['duration'] | undefined;\n  easing: DropAnimation['easing'] | undefined;\n  dragSourceOpacity: DropAnimation['dragSourceOpacity'] | undefined;\n  node: HTMLElement | null;\n  transform: Transform | undefined;\n}\n\nexport const defaultDropAnimation: DropAnimation = {\n  duration: 250,\n  easing: 'ease',\n  dragSourceOpacity: 0,\n};\n\nexport function useDropAnimation({\n  animate,\n  adjustScale,\n  activeId,\n  draggableNodes,\n  duration,\n  dragSourceOpacity,\n  easing,\n  node,\n  transform,\n}: Arguments) {\n  const [dropAnimationComplete, setDropAnimationComplete] = useState(false);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!animate || !activeId || !easing || !duration) {\n      if (animate) {\n        setDropAnimationComplete(true);\n      }\n\n      return;\n    }\n\n    const finalNode = draggableNodes[activeId]?.node.current;\n\n    if (transform && node && finalNode && finalNode.parentNode !== null) {\n      const fromNode = getMeasurableNode(node);\n\n      if (fromNode) {\n        const from = fromNode.getBoundingClientRect();\n        const to = getTransformAgnosticClientRect(finalNode);\n\n        const delta = {\n          x: from.left - to.left,\n          y: from.top - to.top,\n        };\n\n        if (Math.abs(delta.x) || Math.abs(delta.y)) {\n          const scaleDelta = {\n            scaleX: adjustScale\n              ? (to.width * transform.scaleX) / from.width\n              : 1,\n            scaleY: adjustScale\n              ? (to.height * transform.scaleY) / from.height\n              : 1,\n          };\n          const finalTransform = CSS.Transform.toString({\n            x: transform.x - delta.x,\n            y: transform.y - delta.y,\n            ...scaleDelta,\n          });\n          const originalOpacity = finalNode.style.opacity;\n\n          if (dragSourceOpacity != null) {\n            finalNode.style.opacity = `${dragSourceOpacity}`;\n          }\n\n          const nodeAnimation = node.animate(\n            [\n              {\n                transform: CSS.Transform.toString(transform),\n              },\n              {\n                transform: finalTransform,\n              },\n            ],\n            {\n              easing,\n              duration,\n            }\n          );\n\n          nodeAnimation.onfinish = () => {\n            node.style.display = 'none';\n\n            setDropAnimationComplete(true);\n\n            if (finalNode && dragSourceOpacity != null) {\n              finalNode.style.opacity = originalOpacity;\n            }\n          };\n          return;\n        }\n      }\n    }\n\n    setDropAnimationComplete(true);\n  }, [\n    animate,\n    activeId,\n    adjustScale,\n    draggableNodes,\n    duration,\n    easing,\n    dragSourceOpacity,\n    node,\n    transform,\n  ]);\n\n  useIsomorphicLayoutEffect(() => {\n    if (dropAnimationComplete) {\n      setDropAnimationComplete(false);\n    }\n  }, [dropAnimationComplete]);\n\n  return dropAnimationComplete;\n}\n","import React, {useContext, useEffect, useRef} from 'react';\nimport {CSS, isKeyboardEvent, Transform, useLazyMemo} from '@dnd-kit/utilities';\n\nimport {InternalContext, defaultInternalContext} from '../../store';\nimport {getRelativeTransformOrigin} from '../../utilities';\nimport {applyModifiers, Modifiers} from '../../modifiers';\nimport {ActiveDraggableContext} from '../DndContext';\nimport {useDndContext} from '../../hooks';\nimport type {ClientRect} from '../../types';\nimport {useDropAnimation, defaultDropAnimation, DropAnimation} from './hooks';\n\ntype TransitionGetter = (\n  activatorEvent: Event | null\n) => React.CSSProperties['transition'] | undefined;\n\nexport interface Props {\n  adjustScale?: boolean;\n  children?: React.ReactNode;\n  className?: string;\n  dropAnimation?: DropAnimation | null | undefined;\n  style?: React.CSSProperties;\n  transition?: string | TransitionGetter;\n  modifiers?: Modifiers;\n  wrapperElement?: keyof JSX.IntrinsicElements;\n  zIndex?: number;\n}\n\nconst defaultTransform: Transform = {\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1,\n};\n\nconst defaultTransition: TransitionGetter = (activatorEvent) => {\n  const isKeyboardActivator = isKeyboardEvent(activatorEvent);\n\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\n\nexport const DragOverlay = React.memo(\n  ({\n    adjustScale = false,\n    children,\n    dropAnimation = defaultDropAnimation,\n    style: styleProp,\n    transition = defaultTransition,\n    modifiers,\n    wrapperElement = 'div',\n    className,\n    zIndex = 999,\n  }: Props) => {\n    const {\n      active,\n      activeNodeRect,\n      containerNodeRect,\n      draggableNodes,\n      activatorEvent,\n      over,\n      dragOverlay,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      windowRect,\n    } = useDndContext();\n    const transform = useContext(ActiveDraggableContext);\n    const modifiedTransform = applyModifiers(modifiers, {\n      activatorEvent,\n      active,\n      activeNodeRect,\n      containerNodeRect,\n      draggingNodeRect: dragOverlay.rect,\n      over,\n      overlayNodeRect: dragOverlay.rect,\n      scrollableAncestors,\n      scrollableAncestorRects,\n      transform,\n      windowRect,\n    });\n    const isDragging = active !== null;\n    const finalTransform = adjustScale\n      ? modifiedTransform\n      : {\n          ...modifiedTransform,\n          scaleX: 1,\n          scaleY: 1,\n        };\n\n    const initialRect = useLazyMemo<ClientRect | null>(\n      (previousValue) => {\n        if (isDragging) {\n          if (previousValue) {\n            return previousValue;\n          }\n\n          if (!activeNodeRect) {\n            return null;\n          }\n\n          return {\n            ...activeNodeRect,\n          };\n        }\n\n        return null;\n      },\n      [isDragging, activeNodeRect]\n    );\n    const style: React.CSSProperties | undefined = initialRect\n      ? {\n          position: 'fixed',\n          width: initialRect.width,\n          height: initialRect.height,\n          top: initialRect.top,\n          left: initialRect.left,\n          zIndex,\n          transform: CSS.Transform.toString(finalTransform),\n          touchAction: 'none',\n          transformOrigin:\n            adjustScale && activatorEvent\n              ? getRelativeTransformOrigin(\n                  activatorEvent as MouseEvent | KeyboardEvent | TouchEvent,\n                  initialRect\n                )\n              : undefined,\n          transition:\n            typeof transition === 'function'\n              ? transition(activatorEvent)\n              : transition,\n          ...styleProp,\n        }\n      : undefined;\n    const attributes = isDragging\n      ? {\n          style,\n          children,\n          className,\n          transform: finalTransform,\n        }\n      : undefined;\n    const attributesSnapshot = useRef(attributes);\n    const derivedAttributes = attributes ?? attributesSnapshot.current;\n    const {children: finalChildren, transform: _, ...otherAttributes} =\n      derivedAttributes ?? {};\n    const prevActiveId = useRef(active?.id ?? null);\n    const dropAnimationComplete = useDropAnimation({\n      animate: Boolean(dropAnimation && prevActiveId.current && !active),\n      adjustScale,\n      activeId: prevActiveId.current,\n      draggableNodes,\n      duration: dropAnimation?.duration,\n      easing: dropAnimation?.easing,\n      dragSourceOpacity: dropAnimation?.dragSourceOpacity,\n      node: dragOverlay.nodeRef.current,\n      transform: attributesSnapshot.current?.transform,\n    });\n    const shouldRender = Boolean(\n      finalChildren && (children || (dropAnimation && !dropAnimationComplete))\n    );\n\n    useEffect(() => {\n      if (active?.id !== prevActiveId.current) {\n        prevActiveId.current = active?.id ?? null;\n      }\n\n      if (active && attributesSnapshot.current !== attributes) {\n        attributesSnapshot.current = attributes;\n      }\n    }, [active, attributes]);\n\n    useEffect(() => {\n      if (dropAnimationComplete) {\n        attributesSnapshot.current = undefined;\n      }\n    }, [dropAnimationComplete]);\n\n    if (!shouldRender) {\n      return null;\n    }\n\n    return (\n      <InternalContext.Provider value={defaultInternalContext}>\n        <ActiveDraggableContext.Provider value={defaultTransform}>\n          {React.createElement(\n            wrapperElement,\n            {\n              ...otherAttributes,\n              ref: dragOverlay.setRef,\n            },\n            finalChildren\n          )}\n        </ActiveDraggableContext.Provider>\n      </InternalContext.Provider>\n    );\n  }\n);\n","import {distanceBetween} from '../coordinates';\n\nimport type {CollisionDescriptor, CollisionDetection} from './types';\nimport {cornersOfRectangle, sortCollisionsAsc} from './helpers';\n\n/**\n * Returns the closest rectangles from an array of rectangles to the corners of\n * another rectangle.\n */\nexport const closestCorners: CollisionDetection = ({\n  collisionRect,\n  droppableContainers,\n}) => {\n  const corners = cornersOfRectangle(collisionRect);\n  const collisions: CollisionDescriptor[] = [];\n\n  for (const droppableContainer of droppableContainers) {\n    const {\n      id,\n      rect: {current: rect},\n    } = droppableContainer;\n\n    if (rect) {\n      const rectCorners = cornersOfRectangle(rect);\n      const distances = corners.reduce((accumulator, corner, index) => {\n        return accumulator + distanceBetween(rectCorners[index], corner);\n      }, 0);\n      const effectiveDistance = Number((distances / 4).toFixed(4));\n\n      collisions.push({\n        id,\n        data: {droppableContainer, value: effectiveDistance},\n      });\n    }\n  }\n\n  return collisions.sort(sortCollisionsAsc);\n};\n","import {useMemo} from 'react';\n\nimport type {SyntheticEventName, UniqueIdentifier} from '../../types';\n\nexport type SyntheticListener = {\n  eventName: SyntheticEventName;\n  handler: (event: React.SyntheticEvent, id: UniqueIdentifier) => void;\n};\n\nexport type SyntheticListeners = SyntheticListener[];\n\nexport type SyntheticListenerMap = Record<string, Function>;\n\nexport function useSyntheticListeners(\n  listeners: SyntheticListeners,\n  id: string\n): SyntheticListenerMap {\n  return useMemo(() => {\n    return listeners.reduce<SyntheticListenerMap>(\n      (acc, {eventName, handler}) => {\n        acc[eventName] = (event: React.SyntheticEvent) => {\n          handler(event, id);\n        };\n\n        return acc;\n      },\n      {} as SyntheticListenerMap\n    );\n  }, [listeners, id]);\n}\n","import {useMemo} from 'react';\n\nimport type {Sensor, SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensor<T extends SensorOptions>(\n  sensor: Sensor<T>,\n  options?: T\n): SensorDescriptor<T> {\n  return useMemo(\n    () => ({\n      sensor,\n      options: options ?? ({} as T),\n    }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sensor, options]\n  );\n}\n","import {useMemo} from 'react';\n\nimport type {SensorDescriptor, SensorOptions} from './types';\n\nexport function useSensors(\n  ...sensors: (SensorDescriptor<any> | undefined | null)[]\n): SensorDescriptor<SensorOptions>[] {\n  return useMemo(\n    () =>\n      [...sensors].filter(\n        (sensor): sensor is SensorDescriptor<any> => sensor != null\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [...sensors]\n  );\n}\n"],"names":["screenReaderInstructions","draggable","defaultAnnouncements","onDragStart","id","onDragOver","overId","onDragEnd","onDragCancel","Action","noop","_args","DroppableContainersMap","Map","get","super","undefined","toArray","Array","from","this","values","getEnabled","filter","disabled","getNodeFor","_this$get","node","current","defaultPublicContext","activatorEvent","active","activeNode","activeNodeRect","collisions","containerNodeRect","draggableNodes","droppableRects","droppableContainers","over","dragOverlay","nodeRef","rect","setRef","scrollableAncestors","scrollableAncestorRects","measureDroppableContainers","windowRect","measuringScheduled","defaultInternalContext","activators","ariaDescribedById","dispatch","InternalContext","createContext","PublicContext","getInitialState","initialCoordinates","x","y","nodes","translate","droppable","containers","reducer","state","action","type","DragStart","DragMove","coordinates","DragEnd","DragCancel","RegisterDroppable","element","set","SetDroppableDisabled","key","UnregisterDroppable","delete","DndMonitorContext","event","useDndMonitor","onDragMove","monitorState","useContext","previousMonitorState","useRef","useEffect","DragOver","Accessibility","announcements","hiddenTextDescribedById","announce","announcement","useAnnouncement","liveRegionId","useUniqueId","mounted","setMounted","useState","useMemo","createPortal","React","HiddenText","value","LiveRegion","document","body","defaultCoordinates","Object","freeze","distanceBetween","p1","p2","Math","sqrt","pow","getRelativeTransformOrigin","eventCoordinates","getEventCoordinates","left","width","top","height","sortCollisionsAsc","data","a","b","sortCollisionsDesc","cornersOfRectangle","getFirstCollision","property","length","firstCollision","centerOfRectangle","getIntersectionRatio","entry","target","max","right","min","bottom","intersectionArea","Number","toFixed","rectIntersection","collisionRect","droppableContainer","intersectionRatio","push","sort","isPointWithinRect","point","createRectAdjustmentFn","modifier","adjustments","reduce","acc","adjustment","getAdjustedRect","defaultOptions","ignoreTransform","getClientRect","options","getBoundingClientRect","getComputedStyle","getWindow","transform","transformOrigin","ta","sx","sy","dx","dy","startsWith","slice","split","parseFloat","indexOf","w","h","inverseTransform","getTransformAgnosticClientRect","getScrollableAncestors","scrollParents","findScrollableAncestors","isDocument","scrollingElement","includes","isHTMLElement","isSVGElement","computedStyle","overflowRegex","find","test","isScrollable","position","isFixed","parentNode","getScrollableElement","canUseDOM","isWindow","isNode","getOwnerDocument","window","getScrollXCoordinate","scrollX","scrollLeft","getScrollYCoordinate","scrollY","scrollTop","getScrollCoordinates","Direction","getScrollPosition","scrollingContainer","minScroll","maxScroll","scrollWidth","clientWidth","scrollHeight","clientHeight","isTop","isLeft","isBottom","isRight","defaultThreshold","getScrollDirectionAndSpeed","scrollContainer","scrollContainerRect","acceleration","thresholdPercentage","finalScrollContainerRect","direction","speed","threshold","Backward","abs","Forward","getScrollElementRect","innerWidth","innerHeight","getScrollOffsets","add","properties","Rect","constructor","scrollOffsets","axis","keys","getScrollOffset","defineProperty","currentOffsets","enumerable","AutoScrollActivator","TraversalOrder","MeasuringStrategy","MeasuringFrequency","defaultValue","defaultConfig","measure","strategy","WhileDragging","frequency","Optimized","useResizeObserver","onResize","ResizeObserver","useClientRect","createUseRectFn","useClientRects","createUseRectsFn","useRect","getRect","forceRecompute","previousElement","useLazyMemo","previousValue","elements","previousElements","map","getMeasurableNode","children","firstChild","Listeners","listeners","removeAll","forEach","listener","_this$target","removeEventListener","eventName","handler","addEventListener","hasExceededDistance","delta","measurement","EventName","KeyboardCode","preventDefault","stopPropagation","defaultKeyboardCodes","start","Space","Enter","cancel","Esc","end","defaultKeyboardCoordinateGetter","currentCoordinates","code","Right","Left","Down","Up","KeyboardSensor","props","autoScrollEnabled","windowListeners","handleKeyDown","bind","handleCancel","attach","handleStart","Resize","VisibilityChange","setTimeout","Keydown","onStart","Error","isKeyboardEvent","context","keyboardCodes","coordinateGetter","scrollBehavior","handleEnd","newCoordinates","scrollDelta","coordinatesDelta","getCoordinatesDelta","scrollElementRect","clampedCoordinates","canScrollX","canScrollY","scrollBy","behavior","handleMove","getAdjustedCoordinates","onMove","onEnd","detach","onCancel","isDistanceConstraint","constraint","Boolean","isDelayConstraint","onActivation","nativeEvent","AbstractPointerSensor","events","listenerTarget","EventTarget","getEventListenerTarget","activated","timeoutId","documentListeners","handleKeydown","removeTextSelection","activationConstraint","move","name","passive","ContextMenu","delay","clearTimeout","Click","capture","SelectionChange","tolerance","distance","cancelable","getSelection","removeAllRanges","PointerSensor","isPrimary","button","MouseButton","MouseSensor","RightClick","TouchSensor","applyModifiers","modifiers","args","accumulator","touches","defaultSensors","sensor","defaultData","ActiveDraggableContext","scaleX","scaleY","DndContext","memo","autoScroll","sensors","collisionDetection","measuring","defaultScreenReaderInstructions","store","useReducer","setMonitorState","isDragging","setIsDragging","activeId","activeRects","initial","translated","activeRef","activeSensor","setActiveSensor","setActivatorEvent","latestProps","useLatestValue","draggableDescribedById","enabledDroppableContainers","dragging","dependencies","config","containerIdsScheduledForMeasurement","setContainerIdsScheduledForMeasurement","containersRef","useCallback","ids","concat","Always","BeforeDragging","isDisabled","container","requestAnimationFrame","useDroppableMeasuring","draggableNode","cachedNode","useCachedNode","activationCoordinates","_measuring$draggable","parentElement","sensorContext","draggingNode","draggingNodeRect","scrollAdjustedTranslate","overNode","_sensorContext$curren","setRect","resizeObserver","entries","newRect","handleNodeChange","disconnect","observe","useNodeRef","useDragOverlayMeasuring","_measuring$dragOverla","initialActiveNodeRectRef","nodeRectDelta","rect2","rect1","getWindowClientRect","ownerDocument","defaultView","previousNode","ancestors","useScrollableAncestors","modifiedTranslate","overlayNodeRect","pointerCoordinates","scrollAdjustment","scrollCoordinates","setScrollCoordinates","prevElements","handleScroll","cleanup","scrollableElement","useScrollOffsets","setOver","adjustScale","instantiateSensor","Sensor","sensorInstance","unstable_batchedUpdates","createHandler","async","cancelDrop","Promise","resolve","getSyntheticHandler","activator","useCombineActivators","dndKit","defaultPrevented","capturedBy","teardownFns","setup","teardown","useSensorSetup","overContainer","useIsomorphicLayoutEffect","Pointer","canScroll","draggingRect","enabled","interval","order","TreeOrder","setAutoScrollInterval","clearAutoScrollInterval","useInterval","scrollSpeed","DraggableRect","scrollDirection","scrollContainerRef","sortedScrollableAncestors","reverse","index","JSON","stringify","useAutoScroller","getAutoScrollerOptions","publicContext","internalContext","Provider","NullContext","defaultRole","useDndContext","defaultResizeObserverConfig","timeout","defaultDropAnimation","duration","easing","dragSourceOpacity","defaultTransform","defaultTransition","DragOverlay","dropAnimation","style","styleProp","transition","wrapperElement","className","zIndex","modifiedTransform","finalTransform","initialRect","CSS","Transform","toString","touchAction","attributes","attributesSnapshot","derivedAttributes","finalChildren","otherAttributes","prevActiveId","dropAnimationComplete","animate","setDropAnimationComplete","finalNode","_draggableNodes$activ","fromNode","to","originalOpacity","opacity","onfinish","display","useDropAnimation","_attributesSnapshot$c","shouldRender","createElement","ref","centerRect","distBetween","corners","rectCorners","distances","corner","effectiveDistance","role","roleDescription","tabIndex","setNodeRef","useSyntheticListeners","dataRef","resizeObserverConfig","resizeObserverConnected","callbackId","resizeObserverDisabled","updateMeasurementsFor","resizeObserverTimeout","newElement","unobserve","isOver"],"mappings":"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"}