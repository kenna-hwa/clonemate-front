[{"C:\\Users\\soomin\\clonemate-front\\src\\index.js":"1","C:\\Users\\soomin\\clonemate-front\\src\\components\\App.js":"2","C:\\Users\\soomin\\clonemate-front\\src\\atoms\\todoData.js":"3","C:\\Users\\soomin\\clonemate-front\\src\\components\\nav\\BasicNavBar.js":"4","C:\\Users\\soomin\\clonemate-front\\src\\components\\goal\\GoalForm.js":"5","C:\\Users\\soomin\\clonemate-front\\src\\components\\goal\\GoalEditForm.js":"6","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Explore.js":"7","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Main.js":"8","C:\\Users\\soomin\\clonemate-front\\src\\components\\order\\OrderItem.js":"9","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\ExploreSearch.js":"10","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\Routines.js":"11","C:\\Users\\soomin\\clonemate-front\\src\\components\\usercontrol\\Signin.js":"12","C:\\Users\\soomin\\clonemate-front\\src\\components\\usercontrol\\Join.js":"13","C:\\Users\\soomin\\clonemate-front\\src\\components\\goal\\Goals.js":"14","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Content.js":"15","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\CalendarBox.js":"16","C:\\Users\\soomin\\clonemate-front\\src\\components\\nav\\MainNavBar.js":"17","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\CreateRoutinesForm.js":"18","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\EditRoutinesForm.js":"19","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Feed.js":"20","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\Search.js":"21","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\Follower.js":"22","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\Following.js":"23","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\CreateTodoForm.js":"24","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\FeedTodoGoal.js":"25","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\TodoModal.js":"26","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\FeedTodoData.js":"27","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\RoutinesTodos.js":"28","C:\\Users\\soomin\\clonemate-front\\src\\api\\apiCommunicate.js":"29","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\RoutineDateModal.js":"30","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\RoutineDayModal.js":"31","C:\\Users\\soomin\\clonemate-front\\src\\api\\API.js":"32","C:\\Users\\soomin\\clonemate-front\\src\\components\\nav\\Setting.js":"33","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\LikeListModal.js":"34","C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\TermUse.js":"35","C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\Policy.js":"36","C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\Announce.js":"37","C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\Text.js":"38"},{"size":375,"mtime":1653742346760,"results":"39","hashOfConfig":"40"},{"size":4526,"mtime":1653729347854,"results":"41","hashOfConfig":"40"},{"size":16413,"mtime":1653729347839,"results":"42","hashOfConfig":"40"},{"size":2402,"mtime":1653729348244,"results":"43","hashOfConfig":"40"},{"size":8111,"mtime":1653729348104,"results":"44","hashOfConfig":"40"},{"size":9170,"mtime":1653729348091,"results":"45","hashOfConfig":"40"},{"size":1279,"mtime":1653729348164,"results":"46","hashOfConfig":"40"},{"size":465,"mtime":1653738319690,"results":"47","hashOfConfig":"40"},{"size":7766,"mtime":1653729348278,"results":"48","hashOfConfig":"40"},{"size":2748,"mtime":1653729348062,"results":"49","hashOfConfig":"40"},{"size":3320,"mtime":1653729348347,"results":"50","hashOfConfig":"40"},{"size":1853,"mtime":1653740621407,"results":"51","hashOfConfig":"40"},{"size":4165,"mtime":1653746706850,"results":"52","hashOfConfig":"40"},{"size":2360,"mtime":1653740621380,"results":"53","hashOfConfig":"40"},{"size":366,"mtime":1653729348148,"results":"54","hashOfConfig":"40"},{"size":8480,"mtime":1653738319678,"results":"55","hashOfConfig":"40"},{"size":8815,"mtime":1653746706832,"results":"56","hashOfConfig":"40"},{"size":5934,"mtime":1653729348290,"results":"57","hashOfConfig":"40"},{"size":4250,"mtime":1653729348303,"results":"58","hashOfConfig":"40"},{"size":10407,"mtime":1653740621389,"results":"59","hashOfConfig":"40"},{"size":3586,"mtime":1653729348073,"results":"60","hashOfConfig":"40"},{"size":7818,"mtime":1653746706821,"results":"61","hashOfConfig":"40"},{"size":7377,"mtime":1653746706824,"results":"62","hashOfConfig":"40"},{"size":3446,"mtime":1653740621385,"results":"63","hashOfConfig":"40"},{"size":1515,"mtime":1653738319687,"results":"64","hashOfConfig":"40"},{"size":8699,"mtime":1653729348230,"results":"65","hashOfConfig":"40"},{"size":7069,"mtime":1653729348183,"results":"66","hashOfConfig":"40"},{"size":2892,"mtime":1653729348374,"results":"67","hashOfConfig":"40"},{"size":5722,"mtime":1653740621367,"results":"68","hashOfConfig":"40"},{"size":3103,"mtime":1653729348318,"results":"69","hashOfConfig":"40"},{"size":7854,"mtime":1653729348332,"results":"70","hashOfConfig":"40"},{"size":30,"mtime":1653738319665,"results":"71","hashOfConfig":"40"},{"size":3602,"mtime":1653729348263,"results":"72","hashOfConfig":"40"},{"size":1911,"mtime":1653729348212,"results":"73","hashOfConfig":"40"},{"size":4262,"mtime":1653729348411,"results":"74","hashOfConfig":"40"},{"size":7255,"mtime":1653729348396,"results":"75","hashOfConfig":"40"},{"size":3051,"mtime":1653740621402,"results":"76","hashOfConfig":"40"},{"size":2190,"mtime":1653729348423,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"10c1m4d",{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"80"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"80"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"80"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"80"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"80"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"80"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"80"},"C:\\Users\\soomin\\clonemate-front\\src\\index.js",[],["179","180"],"C:\\Users\\soomin\\clonemate-front\\src\\components\\App.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\atoms\\todoData.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\nav\\BasicNavBar.js",["181"],"import React from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport '../../stylesheets/Nav.css';\r\n\r\n\r\nexport default function BasicNavBar () {\r\n\r\n  //useHistory 훅 사용\r\n  let history = useHistory();\r\n\r\n\r\n  /* 버튼 onClick 함수 */\r\n\r\n  //목표 생성 페이지 이동\r\n  function moveGoalForm(){\r\n    window.location.replace(\"/goals/goalForm\")\r\n  }\r\n\r\n  //url pathname 변수화\r\n  let urlPath = window.location.pathname;\r\n  let { id } = useParams();\r\n\r\n  return (\r\n    <Box className=\"basic_nav_box\">\r\n      <AppBar className=\"basic_nav_appbar\" >\r\n        <Toolbar>\r\n        <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"back\"\r\n            sx={{ mr: 2 }}\r\n            onClick={history.goBack} \r\n          >\r\n         <NavigateBeforeIcon />\r\n          </IconButton>\r\n          <Typography className=\"navbar_title\" variant=\"h6\" component=\"div\">\r\n\r\n          {/* 삼항연산자로 navbar 제목 붙이기 */}\r\n          {\r\n             urlPath.includes(`signin`)? `로그인` : urlPath.includes(`join`)?  `가입하기` \r\n             : urlPath.includes(`goals`)? `목표` : urlPath.includes(`exploreSearch`)? `팔로우` \r\n             : urlPath.includes(`termUse`)? `이용약관` : urlPath.includes(`policy`)? `개인정보 정책` \r\n             : urlPath.includes(`setting`)? `설정` : urlPath.includes(`text`)? `정보` \r\n             : urlPath.includes(`announcements`)? `공지사항` : urlPath.includes(`routines`) ? `기한이 있는 할 일 설정` : \r\n             urlPath.includes(`orderitem`) ? `순서 수정` : null\r\n           }\r\n          </Typography>\r\n          \r\n          <IconButton\r\n            size=\"large\"\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"back\"\r\n            sx={{ mr: 2 }}\r\n          >\r\n           {\r\n             urlPath ===`/goals`? <AddIcon onClick={moveGoalForm} /> : null\r\n           }\r\n        </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Box>\r\n  );\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\goal\\GoalForm.js",["182"],"import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Button, Grid, Box, TextField, RadioGroup, FormLabel, FormControlLabel, Radio } from \"@mui/material\";\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport '../../stylesheets/GoalForm.css';\r\n\r\nimport { goalsData } from \"../../atoms/todoData\";\r\n\r\n\r\nexport default function GoalForm(){\r\n\r\n    /* Hook 선언 시작 */\r\n\r\n    /* atom 시작 */\r\n    \r\n    let [goal, setGoal] = useRecoilState(goalsData);// 목표goals 아이템\r\n\r\n    let [createGoalState, setCreactGoalState] = useState(\r\n        {\r\n            \"id\": goal.length+1,\r\n            \"orderNo\" : goal.length+1,\r\n            \"title\" : ``,\r\n            \"privacy\" : `PUBLIC`,\r\n            \"titleColor\" : `#000000`\r\n        }\r\n\r\n    );\r\n    const copy_createGoalState = {...createGoalState};\r\n\r\n    let [privacyDialogActive, setPrivacyDialogActive] = useState(false);\r\n    let [colorDialogActive, setColorDialogActive] = useState(false);\r\n\r\n    let colorList = [\r\n        \"#000000\",\r\n        \"#272727\",\r\n        \"#565656\",\r\n        \"#868686\",//black\r\n        \"#a70000\",\r\n        \"#ff0000\",\r\n        \"#ff5252\",\r\n        \"#ff7b7b\",//red\r\n        \"#d73d00\",\r\n        \"#ff7b00\",\r\n        \"#ff873d\",\r\n        \"#f7ae48\",//orange    \r\n        \"#000b5e\",\r\n        \"#021496\",\r\n        \"#0119cb\",\r\n        \"#001be7\",//blue\r\n        \"#8d0a9d\",\r\n        \"#9c0fbf\",\r\n        \"#9e36d2\",\r\n        \"#ca69e3\",//purple\r\n        \"#234d20\",\r\n        \"#36802d\",\r\n        \"#77ab59\",\r\n        \"#c9df8a\",//green\r\n        ];\r\n\r\n    const privacyObj = {\r\n        'HIDDEN' : '숨기기 🙄' ,\r\n        'PRIVACY' : '나만보기 😎' ,\r\n        'FOLLOWING' : '일부공개 🤫' ,\r\n        'PUBLIC' : '전체공개 🤗' ,\r\n    }\r\n\r\n\r\n    /* Hook 선언 끝 */\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    //목표 타이틀 수정 함수\r\n    const changeGoalTitle = (e) => {\r\n        copy_createGoalState.title = e.target.value;\r\n        setCreactGoalState(copy_createGoalState)\r\n    }\r\n\r\n    const handlePrivacyDialogClose = (event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n            setPrivacyDialogActive(false);\r\n        }\r\n    };\r\n\r\n    const handleColorDialogClose = (event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n            setColorDialogActive(false);\r\n        }\r\n    };\r\n\r\n\r\n    //privacy dialog onChange 이벤트\r\n    const handlePrivacyChange = (e) => {\r\n        copy_createGoalState.privacy = e.target.value;\r\n        setCreactGoalState(copy_createGoalState);\r\n    };\r\n    const handleColorChange = (e) => {\r\n        copy_createGoalState.titleColor = e.target.value;\r\n        setCreactGoalState(copy_createGoalState);\r\n    };\r\n\r\n    // 확인 클릭 함수 실행 함수\r\n    const clickOkbtn = (data) => { //react-form-hook submit 함수\r\n        setGoal(createGoalState);\r\n        window.location.replace(\"/goals\")\r\n    }\r\n\r\n\r\n    /* 함수 선언 끝 */\r\n\r\n\r\n    return(\r\n        <Box className=\"goals-form-dialog-box\">\r\n            <div className=\"goals-form\">\r\n                <Grid container spacing={1} className=\"goals-form-grid-wrap\">\r\n                <Grid item xs={12} className=\"goals-form-text-wrap\">\r\n                    <TextField id=\"goalform_textfield\" variant=\"standard\" placeholder={'목표 입력'} onChange={changeGoalTitle} /> \r\n                </Grid>\r\n                <Grid item xs={12} className=\"goals-form-privacy-wrap\" > \r\n                   <Button className=\"goals-form-privacy\" onClick={()=>{setPrivacyDialogActive(true)}}><p>공개 설정 </p><span> \r\n                       { privacyObj[createGoalState.privacy] } ▾ </span></Button>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"goals-form-color-wrap\" > \r\n                   <Button className=\"goals-form-color\" onClick={()=>{setColorDialogActive(true)}}><p>색상 </p><span> <i style={{ position: 'absolute', display: 'inline-block', width: '20px', height: '20px', border: '1px solid #000', borderRadius: '50%', top: '20px', right: '30px', background: `${createGoalState.titleColor}`}}></i>▾ </span></Button>\r\n                </Grid>\r\n                {/* 확인은 임시 css */}\r\n                <Grid item xs={12} className=\"goals-form-submit\">\r\n                    <Button color=\"secondary\" className=\"goals-form-submit-btn\" \r\n                    onClick={clickOkbtn} >\r\n                        확인\r\n                    </Button>    \r\n                </Grid>\r\n                </Grid>\r\n            </div>\r\n\r\n            {/* Dialog for privacy */}\r\n            <Dialog disableEscapeKeyDown open={privacyDialogActive} onClose={handlePrivacyDialogClose} className=\"group-dialog-wrap\" >\r\n                <DialogTitle className=\"group-dialog-title\" >공개 설정</DialogTitle>\r\n                <DialogContent className=\"group-dialog\">\r\n                <Box component=\"form\" className=\"group-dialog-box\">\r\n                    <FormControl className=\"group-dialog-form-box\">\r\n                    <FormLabel id=\"radio-buttons-group-dialog-label\" sx={{display:'none' }}>공개 설정 Privacy</FormLabel>\r\n                        <RadioGroup\r\n                            className=\"group-privacy-wrap\"\r\n                            aria-labelledby=\"radio-buttons-group-privacy-label\"\r\n                            name=\"radio-buttons-group-privacy\"\r\n                            onChange={handlePrivacyChange}\r\n                        >\r\n                            <FormControlLabel value=\"HIDDEN\" control={<Radio  />} label={privacyObj['HIDDEN']} />\r\n                            <FormControlLabel value=\"PRIVACY\" control={<Radio />}  label={privacyObj['PRIVACY']}  />\r\n                            <FormControlLabel value=\"FOLLOWING\" control={<Radio />}  label={privacyObj['FOLLOWING']}  />\r\n                            <FormControlLabel value=\"PUBLIC\" control={<Radio />}  label={privacyObj['PUBLIC']}  />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                <Button className=\"group-dialog-button\" onClick={handlePrivacyDialogClose}>Ok</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Dialog for color */}\r\n               <Dialog disableEscapeKeyDown open={colorDialogActive} onClose={handleColorDialogClose} className=\"group-dialog-wrap\" >\r\n                <DialogTitle className=\"group-dialog-title\" >색상</DialogTitle>\r\n                <DialogContent className=\"group-dialog\">\r\n                <Box component=\"form\" className=\"group-dialog-box\">\r\n                    <FormControl className=\"group-dialog-form-box\">\r\n                    <FormLabel id=\"radio-buttons-group-color-label\" sx={{display:'none'}}>목표 텍스트 색상 Color</FormLabel>\r\n                        <RadioGroup\r\n                            className=\"group-color-wrap\"\r\n                            aria-labelledby=\"radio-buttons-group-color-label\"\r\n                            defaultValue={\"#1C1C1C\"}\r\n                            name=\"radio-buttons-group-color\"\r\n                            onChange={handleColorChange}\r\n                        >\r\n                            {colorList.map((color)=>{return (<FormControlLabel value={color} key={color}\r\n                            control={<Radio style={{ backgroundColor: `${color}`, width: '50px', height: '50px', marginRight: '10px', marginBottom: '6px' }} />} label=\"\" />)\r\n                            })}\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button className=\"group-dialog-button\"  onClick={handleColorDialogClose}>Ok</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    )\r\n\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\goal\\GoalEditForm.js",["183","184","185","186","187","188"],"import React, { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { Button, Grid, Box, TextField, RadioGroup, FormLabel, FormControlLabel, Radio } from \"@mui/material\";\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport FormControl from '@mui/material/FormControl';\r\n\r\nimport '../../stylesheets/GoalForm.css';\r\n\r\nimport { goalsData } from \"../../atoms/todoData\";\r\nimport { id } from \"date-fns/locale\";\r\n\r\nexport default function GoalEditForm(){\r\n\r\n\r\n     /* atom 선언 시작 */\r\n    \r\n     let [goal, setGoal] = useRecoilState(goalsData);// 목표goals 아이템\r\n\r\n    /* atom 선언 종료 */\r\n\r\n     /* state 선언 시작 */\r\n     let { originID } = useParams();//url Params 따오기\r\n     const [editGoalState, setEditGoalState] = useState('');\r\n     const copy_editGoalState = {...editGoalState}\r\n \r\n     useEffect(()=>{\r\n         let originGoalArr = [...goal]; //원본 goal 가지고 옴\r\n         originGoalArr.filter((data)=>{\r\n             if (data.id === parseInt(originID)) return setEditGoalState(data) \r\n          })\r\n     },[])\r\n \r\n     let [privacyDialogActive, setPrivacyDialogActive] = useState(false);\r\n     let [colorDialogActive, setColorDialogActive] = useState(false);\r\n \r\n     let colorList = [\r\n         \"#000000\",\r\n         \"#272727\",\r\n         \"#565656\",\r\n         \"#868686\",//black\r\n         \"#a70000\",\r\n         \"#ff0000\",\r\n         \"#ff5252\",\r\n         \"#ff7b7b\",//red\r\n         \"#d73d00\",\r\n         \"#ff7b00\",\r\n         \"#ff873d\",\r\n         \"#f7ae48\",//orange    \r\n         \"#000b5e\",\r\n         \"#021496\",\r\n         \"#0119cb\",\r\n         \"#001be7\",//blue\r\n         \"#8d0a9d\",\r\n         \"#9c0fbf\",\r\n         \"#9e36d2\",\r\n         \"#ca69e3\",//purple\r\n         \"#234d20\",\r\n         \"#36802d\",\r\n         \"#77ab59\",\r\n         \"#c9df8a\",//green\r\n         ];\r\n \r\n         const privacyObj = {\r\n             'HIDDEN' : '숨기기 🙄' ,\r\n             'PRIVACY' : '나만보기 😎' ,\r\n             'FOLLOWING' : '일부공개 🤫' ,\r\n             'PUBLIC' : '전체공개 🤗' ,\r\n         }\r\n     \r\n    /* state 선언 종료 */\r\n\r\n    /* Hook 선언 시작 */\r\n\r\n    let history = useHistory();\r\n\r\n    /* Hook 선언 끝 */\r\n\r\n   \r\n\r\n    /* 함수 선언 시작 */\r\n    \r\n    //목표 타이틀 수정 함수\r\n    const changeEditGoalTitle = (e) => {\r\n        copy_editGoalState.title = e.target.value;\r\n        setEditGoalState(copy_editGoalState)\r\n    }\r\n    \r\n    //목표 수정 함수\r\n    function editGoal(item){\r\n        const copy_goal = [...goal]\r\n        copy_goal.splice(originID-1, 1, copy_editGoalState)\r\n        console.log(\"copy_goal\", copy_goal)\r\n        setGoal(copy_goal); //setGoal를 이용해 state 변경\r\n        window.location.replace(`/goals/`);//목표로 돌아가기\r\n    }\r\n\r\n    //목표 삭제 함수\r\n    function deleteGoal(e){\r\n        const copy_goal = [...goal]\r\n        let newGoalArr = copy_goal.filter(goal =>  goal.id != originID\r\n        )\r\n        setGoal(newGoalArr) ;//setGoal를 이용해 state 변경\r\n        window.location.replace(`/goals/`);//목표로 돌아가기\r\n    }\r\n\r\n    const handlePrivacyDialogClose = (event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n            setPrivacyDialogActive(false);\r\n        }\r\n    };\r\n\r\n    const handleColorDialogClose = (event, reason) => {\r\n        if (reason !== 'backdropClick') {\r\n            setColorDialogActive(false);\r\n        }\r\n    };\r\n    const handlePrivacyChange = (e) => {\r\n        copy_editGoalState.privacy = e.target.value;\r\n        setEditGoalState(copy_editGoalState);\r\n    };\r\n    const handleColorChange = (e) => {\r\n        copy_editGoalState.titleColor = e.target.value;\r\n        setEditGoalState(copy_editGoalState);\r\n    };\r\n\r\n\r\n    /* 함수 선언 끝 */\r\n\r\n    return(\r\n        <Box className=\"goals-form-dialog-box\">\r\n            <div className=\"goals-form\">\r\n            <Grid container spacing={1} className=\"goals-form-grid-wrap\">\r\n            <Grid item xs={12} className=\"goals-form-text-wrap\">\r\n                <TextField id=\"goalform_textfield\" variant=\"standard\" value={editGoalState.title || ''} onChange={changeEditGoalTitle} /> \r\n                </Grid>\r\n                <Grid item xs={12} className=\"goals-form-privacy-wrap\" > \r\n                   <Button className=\"goals-form-privacy\" onClick={()=>{setPrivacyDialogActive(true)}}><p>공개 설정 </p><span> \r\n                       { privacyObj[editGoalState.privacy] } ▾ </span></Button>\r\n                </Grid>\r\n                <Grid item xs={12} className=\"goals-form-color-wrap\" > \r\n                   <Button className=\"goals-form-color\" onClick={()=>{setColorDialogActive(true)}}><p>색상 </p><span> <i style={{ position: 'absolute', display: 'inline-block', width: '20px', height: '20px', border: '1px solid #000', borderRadius: '50%', top: '20px', right: '30px', background: `${editGoalState.titleColor}`}}></i>▾ </span></Button>\r\n                </Grid>\r\n                {/* 확인은 임시 css */}\r\n                <Grid item xs={12} className=\"goals-form-submit\">\r\n                    <Button color=\"secondary\"\r\n                    className=\"goals-form-submit-btn\" onClick={editGoal} >\r\n                        확인\r\n                    </Button>    \r\n                </Grid>\r\n                <Button className=\"goals-listItem-delete-btn\" aria-label=\"Delete Todo\" id={editGoalState.goal_id} onClick={deleteGoal} >\r\n                       삭제\r\n                </Button>\r\n                </Grid>\r\n            </div>\r\n\r\n            {/* Dialog for privacy */}\r\n            <Dialog disableEscapeKeyDown open={privacyDialogActive} onClose={handlePrivacyDialogClose} className=\"group-dialog-wrap\" >\r\n                <DialogTitle className=\"group-dialog-title\" >공개 설정</DialogTitle>\r\n                <DialogContent className=\"group-dialog\">\r\n                <Box component=\"form\" className=\"group-dialog-box\">\r\n                    <FormControl className=\"group-dialog-form-box\">\r\n                    <FormLabel id=\"radio-buttons-group-dialog-label\" sx={{display:'none' }}>공개 설정 Privacy</FormLabel>\r\n                        <RadioGroup\r\n                            className=\"group-privacy-wrap\"\r\n                            aria-labelledby=\"radio-buttons-group-privacy-label\"\r\n                            name=\"radio-buttons-group-privacy\"\r\n                            onChange={handlePrivacyChange}\r\n                        >\r\n                            <FormControlLabel value=\"HIDDEN\" control={<Radio  />} label={privacyObj['HIDDEN']} />\r\n                            <FormControlLabel value=\"PRIVACY\" control={<Radio />}  label={privacyObj['PRIVACY']}  />\r\n                            <FormControlLabel value=\"FOLLOWING\" control={<Radio />}  label={privacyObj['FOLLOWING']}  />\r\n                            <FormControlLabel value=\"PUBLIC\" control={<Radio />}  label={privacyObj['PUBLIC']}  />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n\r\n                <Button className=\"group-dialog-button\" onClick={handlePrivacyDialogClose}>Ok</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Dialog for privacy */}\r\n               <Dialog disableEscapeKeyDown open={colorDialogActive} onClose={handleColorDialogClose} className=\"group-dialog-wrap\" >\r\n                <DialogTitle className=\"group-dialog-title\" >색상</DialogTitle>\r\n                <DialogContent className=\"group-dialog\">\r\n                <Box component=\"form\" className=\"group-dialog-box\">\r\n                    <FormControl className=\"group-dialog-form-box\">\r\n                    <FormLabel id=\"radio-buttons-group-color-label\" sx={{display:'none'}}>목표 텍스트 색상 Color</FormLabel>\r\n                        <RadioGroup\r\n                            className=\"group-color-wrap\"\r\n                            aria-labelledby=\"radio-buttons-group-color-label\"\r\n                            defaultValue={\"#1C1C1C\"}\r\n                            name=\"radio-buttons-group-color\"\r\n                            onChange={handleColorChange}\r\n                        >\r\n                            {colorList.map((color)=>{return (<FormControlLabel value={color} key={color}\r\n                            control={<Radio style={{ backgroundColor: `${color}`, width: '50px', height: '50px', marginRight: '10px', marginBottom: '6px' }} />} label=\"\" />)\r\n                            })}\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                <Button className=\"group-dialog-button\"  onClick={handleColorDialogClose}>Ok</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </Box>\r\n    )\r\n\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Explore.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Main.js",["189","190"],"import React, { useEffect } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport Box from '@mui/material/Box';\r\nimport MainNavBar from '../nav/MainNavBar';\r\nimport Content from './Content';\r\n\r\n\r\nexport default function Main() {\r\n\r\n    /* props 선언 시작 */\r\n\r\n\r\n    /* props 선언 끝 */\r\n    \r\n  \r\n    return (\r\n        <Box className='main-wrap' sx={{ position: 'relative'}}>\r\n        <MainNavBar />\r\n        <Content />\r\n        </Box>\r\n    );\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\order\\OrderItem.js",["191","192","193","194","195","196","197","198","199","200","201","202"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Box, Button, List, ListItem, ListItemText } from \"@mui/material\";\r\nimport {\r\n  DragDropContext,\r\n  Droppable,\r\n  Draggable,\r\n  resetServerContext,\r\n} from \"react-beautiful-dnd\";\r\n\r\nimport ReceiptIcon from \"@material-ui/icons/Receipt\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\n\r\nimport {\r\n  objTodosDataResult,\r\n  goalsData,\r\n  todoData,\r\n  objDatesData,\r\n} from \"../../atoms/todoData\";\r\n\r\nimport \"../../stylesheets/OrderItem.css\";\r\n\r\nexport default function OrderItem() {\r\n  /* Hook 선언 시작 */\r\n\r\n  /* Hook 선언 종료 */\r\n\r\n  /* state 선언 시작 */\r\n\r\n  /* state 선언 종료 */\r\n\r\n  /* atom 시작 */\r\n  let dateData = useRecoilValue(objDatesData);\r\n  // atom에서 goal+todo 데이터 가져오기\r\n  let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n  const todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n  /* atom 종료 */\r\n\r\n  /* 함수 선언 시작 */\r\n    // a little function to help us with reordering the result\r\n    const Reorder = (list, startIndex, endIndex) => {\r\n      const result = Array.from(list);\r\n      const [removed] = result.splice(startIndex, 1);\r\n      result.splice(endIndex, 0, removed);\r\n\r\n      return result;\r\n    };\r\n\r\n\r\n// 기존 방식\r\n  // const onDragEnd = (res) => {\r\n  //   if (!res.destination) return;\r\n  //   //드래그 하는 sourced의 index\r\n  //   const sourceGoalOrderNo = res.source.index;\r\n  //   //드래그 해서 내려놓은 destination의 index\r\n  //   const destinationGoalOrderNo = res.destination.index;\r\n  //   console.log(\"sourceGoalOrderNo\", sourceGoalOrderNo)\r\n  //   todoDataArray.map((goal)=>{\r\n  //       if(goal.goalOrderNo === sourceGoalOrderNo){\r\n  //         goal.goalOrderNo = destinationGoalOrderNo;\r\n  //       }\r\n  //     })\r\n  //     setDtTodos(todoDataArray)\r\n\r\n  // };\r\n\r\n\r\n\r\n  const onDragEndGoal = (result) => {\r\n    if (!result.destination) return;\r\n    //드래그 하는 sourced의 index\r\n    const sourceGoalOrderNo = result.source.index;\r\n    //드래그 해서 내려놓은 destination의 index\r\n    const destinationGoalOrderNo = result.destination.index;\r\n    //미리 만들어둔 Reorder 함수 사용\r\n    const reorderArray = Reorder(dtTodos, sourceGoalOrderNo, destinationGoalOrderNo)\r\n    setDtTodos(reorderArray);\r\n\r\n  }\r\n\r\n  /* 함수 선언 종료 */\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEndGoal}>\r\n      <Droppable droppableId=\"Goal\">\r\n      {provided =>  (\r\n        <div className=\"goals-list-wrap\" {...provided.droppableProps} ref={provided.innerRef}>\r\n          {todoDataArray.map((data, index) => {\r\n            return (\r\n              <Draggable draggableId={String(data.goalOrderNo)} index={index} key={index}>\r\n               {provided => (\r\n                  <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    <OrderTodoGoal data={data} index={index}  id={data.id} todoDataArray={todoDataArray} setDtTodos={setDtTodos} Reorder={Reorder} />\r\n                  </div>\r\n                )}  \r\n              </Draggable>\r\n            )\r\n          })}\r\n          {provided.placeholder}\r\n        </div>\r\n      )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  )\r\n\r\n}\r\n\r\nexport const OrderTodoGoal = (props) => {\r\n\r\n  const data = props.data;\r\n  const index = props.index;\r\n  const goal_id = props.id;\r\n  const todoDataArray = props.todoDataArray;\r\n  const setDtTodos = props.setDtTodos;\r\n  const Reorder = props.Reorder;\r\n\r\n  /* 함수 선언 시작 */\r\n\r\n  const onDragEndTodo = (res) => {\r\n    if (!res.destination) return;\r\n    //드래그 하는 sourced의 index\r\n    const sourceTodoOrderNo = res.source.index;\r\n    //드래그 해서 내려놓은 destination의 index\r\n    const destinationTodoOrderNo = res.destination.index;\r\n\r\n    todoDataArray.map(goal => {\r\n        if(goal.id === goal_id){\r\n          const reorderArray = Reorder(goal.todos, sourceTodoOrderNo, destinationTodoOrderNo)\r\n          goal.todos = reorderArray;         \r\n        }\r\n    })\r\n    setDtTodos(todoDataArray);\r\n\r\n  }\r\n\r\n//테스트\r\n  // const onDragEnd = (result) => {\r\n  //   if (!result.destination) return;\r\n\r\n    \r\n  //   const draggingItemIndex = result.source.index-1;\r\n  //   const afterDragItemIndex = result.destination.index-1;\r\n  //   const removeTag = todoDataArray.splice(draggingItemIndex, 1);\r\n  //   console.log(\"removeTag\", removeTag)\r\n  //   // todoDataArray.todos.splice(afterDragItemIndex, 0, removeTag[0]);\r\n\r\n  //   setDtTodos(todoDataArray);\r\n  // }\r\n\r\n  /* 함수 선언 종료 */\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEndTodo}>\r\n      <Droppable droppableId=\"Todo\">\r\n      {provided =>  (\r\n        <div className=\"goals-list-box\" key={data.goalOrderNo} ref={provided.innerRef} {...provided.droppableProps}>\r\n          {/* Goal 컴포넌트 시작 */}\r\n          <Button className=\"goals-list-button\" data-index={index} data={data}>\r\n            <ReceiptIcon className=\"goals-list-icon\" />\r\n            <div className=\"goals-list-text\" id={data.goalOrderNo} name={data.goalOrderNo} style={{ color: data.titleColor }}>\r\n              <p>{data.title}</p>\r\n            </div>\r\n            <p className=\"goals-list-plus-icon-wrap\">\r\n              <AddCircleIcon className=\"goals-list-plus-icon\" />\r\n            </p>\r\n          </Button>\r\n          {/* Goal 컴포넌트 종료 */}\r\n          {/* Todo 컴포넌트 map 시작 */}\r\n          <div className=\"todos-list-cont\">\r\n            {data.todos.map((data, index) => {\r\n              return (\r\n                <Draggable draggableId={\"todo\" + index} index={index} key={data.todoId}>\r\n                  {provided => (\r\n                    <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps} >\r\n                      <FeedTodoData todos={data} index={index}/> \r\n                    </div>\r\n                 )}\r\n                </Draggable>\r\n              );\r\n            })}\r\n          </div>\r\n          {/* Todo 컴포넌트 map 종료 */}\r\n          {provided.placeholder} \r\n        </div>\r\n      )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport const FeedTodoData = (props) => {\r\n  const todos = props.todos;\r\n  const index = props.todos.todoId;\r\n\r\n  return (\r\n    <div className=\"todos-list-box\" data-todos={todos}>\r\n      <div\r\n        className=\"goals-listItem-text-wrap\"\r\n        id={todos.todoId}\r\n        data-index={todos.orderNo}\r\n      >\r\n        {todos.checkYn === \"Y\" ? (\r\n          <CheckBoxIcon\r\n            data-goalid={todos.goalId}\r\n            data-todoid={todos.todoId}\r\n            className=\"todos-list-check-icon\"\r\n            data-check={todos.checkYn}\r\n          />\r\n        ) : (\r\n          <CheckBoxOutlineBlankIcon\r\n            data-goalid={todos.goalId}\r\n            data-todoid={todos.todoId}\r\n            className=\"todos-list-check-icon\"\r\n            data-check={todos.checkYn}\r\n          />\r\n        )}\r\n        <TodoList todos={todos} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst TodoList = React.forwardRef((props, ref) => {\r\n  const inputRef = useRef(null);\r\n\r\n  const todos = props.todos;\r\n\r\n  return (\r\n    <input\r\n      className=\"todos-list-input\"\r\n      key={todos.todoId}\r\n      id=\"todo-input\"\r\n      type=\"text\"\r\n      maxLength=\"50\"\r\n      size={inputRef.current?.value.length}\r\n      ref={inputRef}\r\n      name={todos.title}\r\n      data-orderno={todos.orderNo}\r\n      data-goalid={todos.goalId}\r\n      data-todoid={todos.todoId}\r\n      value={todos.title}\r\n      readOnly\r\n    />\r\n  );\r\n});\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\ExploreSearch.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\Routines.js",["203","204","205","206"],"import React, {  useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {  Button } from \"@mui/material\";\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nimport { objTodosDataResult, objDatesData, } from \"../../atoms/todoData\";\r\nimport '../../stylesheets/Routines.css';\r\n\r\nimport RoutinesTodos from \"./RoutinesTodos\";\r\nimport CreateRoutinesForm from \"./CreateRoutinesForm\";\r\n\r\n\r\nexport default function Routines () {\r\n\r\n/* Hook 선언 시작 */\r\n\r\nlet history = useHistory();\r\n\r\n/* Hook 선언 종료 */\r\n\r\n/* atom 시작 */\r\n\r\nlet [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\nlet todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\nlet dtDate = useRecoilValue(objDatesData);\r\n\r\n/* atom 종료 */\r\n\r\n/* state 선언 시작 */\r\n\r\nlet [isGoalSelected, setIsGoalSelected] = useState(Array(todoDataArray.length).fill(false) );\r\nlet [isTodoSelected, setIsTodoSelected] = useState(Array(todoDataArray.length).fill(false) );\r\n\r\n\r\n\r\n/* state 선언 종료 */\r\n\r\n/* 함수 선언 시작 */\r\n\r\nconst goalSelectedHandler = (e) => {\r\n    const idx = e.currentTarget.dataset.id;\r\n    const newArr = Array(todoDataArray.length).fill(false);\r\n    newArr[idx] = true;\r\n    setIsGoalSelected(newArr);\r\n}\r\n\r\n/* 함수 선언 끝 */\r\n\r\nreturn (\r\n<>\r\n    <div className=\"routines-wrap\">\r\n        {\r\n            todoDataArray.map((data, index) => {\r\n                console.log(\"routines data\",data)\r\n                return ( \r\n                    <div className=\"goals-list-box\" key={data.orderNo}> \r\n                        <Button className=\"goals-list-button\" id={data.orderNo} data-id={index} \r\n                        onClick={goalSelectedHandler}\r\n                        >\r\n                            <ReceiptIcon className=\"goals-list-icon\" />\r\n                                <div className=\"goals-list-text\" id={data.orderNo} name={data.orderNo} style={{ color:data.titleColor }}><p>{data.title}</p>\r\n                                </div>\r\n                                <p className=\"goals-list-plus-icon-wrap\">\r\n                                <AddCircleIcon className=\"goals-list-plus-icon\"/>\r\n                                </p>\r\n                        </Button>\r\n                        \r\n                    <div className=\"todos-list-cont\">\r\n                    {data.todos.map((data,index)=>{\r\n                        return(\r\n                            <React.Fragment key={data.id}>\r\n                                <RoutinesTodos todos={data} \r\n                                isTodoSelected={isTodoSelected}\r\n                                />\r\n                            </React.Fragment>\r\n                            \r\n                        )\r\n                    })}\r\n                    {isGoalSelected[index]? <CreateRoutinesForm \r\n                    goalId={data.id} \r\n                    todoId={data.todos.length+1} \r\n                    orderNo={data.todos.length+1} \r\n                    setIsGoalSelected={setIsGoalSelected} \r\n                    todoDataArray={todoDataArray} />: null}\r\n                    </div>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n        \r\n    </div>\r\n\r\n</>\r\n);\r\n}\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\usercontrol\\Signin.js",["207","208","209","210"],"import React ,  { useEffect, useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Button, TextField } from '@mui/material';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { postUserLogin } from '../../api/apiCommunicate';\r\nimport '../../stylesheets/Signin.css';\r\n\r\n\r\nfunction Signin(){\r\n\r\n    const { register, handleSubmit, formState: { errors }, watch } = useForm();\r\n    const [result, setResult] = useState(\"\");\r\n    console.log(\"watch\",watch())\r\n\r\n    const onSubmit = (data) => {\r\n      postUserLogin(data)\r\n    };\r\n\r\n    const onError = (error) => {\r\n      console.log(error)\r\n    };\r\n\r\n\r\n    return (\r\n\r\n    <form onSubmit={\r\n      handleSubmit(onSubmit)\r\n      }>\r\n    <TextField\r\n    {...register(\"account\", {required: true})} \r\n        id=\"standard-user-id-input\"\r\n        className='user-control-input'\r\n        label=\"로그인 아이디\"\r\n        type=\"text\"\r\n        autoComplete=\"current-user-id\"\r\n        variant=\"standard\"\r\n        helperText=\"Please enter Account\"\r\n        margin=\"dense\"\r\n        fullWidth \r\n      />\r\n      {errors.account?.type === \"required\" &&  <span className='error_message'>아이디를 입력해주세요.</span>}\r\n      <TextField\r\n       {...register(\"password\", {required: true})} \r\n        id=\"standard-password-input\"\r\n        label=\"비밀번호\"\r\n        type=\"password\"\r\n        autoComplete=\"current-password\"\r\n        variant=\"standard\"\r\n        helperText=\"Please enter Password\"\r\n        margin=\"dense\"\r\n        fullWidth \r\n      />\r\n      {errors.password?.type === \"required\" &&  <span className='error_message'>비밀번호를 입력해주세요.</span>}\r\n      <Button type=\"submit\" id=\"submit_btn\">확인</Button>\r\n\r\n      <Link to=\"/\"><p className='forgotPwd'>비밀번호를 잊었다면?</p></Link>\r\n      </form>\r\n      )\r\n\r\n}\r\n\r\nexport default Signin;\r\n\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\usercontrol\\Join.js",["211"],"C:\\Users\\soomin\\clonemate-front\\src\\components\\goal\\Goals.js",["212","213","214","215","216"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {  Button, List  } from \"@mui/material\";\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';import '../../stylesheets/Goal.css';\r\n\r\nimport { getGoalsData } from \"../../api/apiCommunicate\";\r\nimport { objTodosDataResult } from \"../../atoms/todoData\";\r\n\r\n\r\nexport default function Goals() {\r\n\r\n  \r\n  /* Hook 선언 시작 */\r\n\r\n   /* atom 시작 */\r\n  \r\n  let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);// 목표goals 아이템\r\n  let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n\r\n  console.log(\"todoDataArray\", todoDataArray)\r\n\r\n  /* Dummy State 끝 */\r\n  \r\n  useEffect(()=>{\r\n    // recoil 에서 정보 갱신이 되었으면 하는데..?\r\n    const goalItems = getGoalsData();\r\n    setDtTodos(goalItems)\r\n    // goalItems = useRecoilState(goalsData)\r\n  },[dtTodos])\r\n\r\n\r\n\r\n  /* Hook 선언 끝 */\r\n \r\n\r\n\r\n\r\n  /* 함수 시작 */\r\n\r\n\r\n  //목표수정 컴포넌트로 이동 함수 (파라미터 추가)\r\n  const moveEditGoalForm = (e) => {\r\n    window.location.replace(`/goals/goalEditForm/`+e.target.id)\r\n  }\r\n\r\n  \r\n  // //목표 수정 이벤트핸들러 함수\r\n  // async function clickGoaltoEdit(e){\r\n  //   const { id } = e.target;\r\n  //   await moveEditGoalForm(id)\r\n  // }\r\n\r\n\r\n/* 함수 끝 */\r\n\r\n\r\n  return (\r\n      <div className=\"goal-goals-list-wrap\" >\r\n            {\r\n            todoDataArray.map((data, idx) => {\r\n              return (\r\n                <React.Fragment key={data.id}>\r\n                  <div className=\"goals-list-box\" key={data.goalOrderNo}>\r\n                    <Button className=\"goals-list-button\" id={data.id} name={data.id} data={data} onClick={moveEditGoalForm} >\r\n                        <ReceiptIcon className=\"goals-list-icon\" />\r\n                        <div className=\"goals-list-text\" id={data.goalOrderNo} name={data.goalOrderNo} style={{ color:data.titleColor }}  ><p>{data.title}</p>\r\n                        </div>\r\n                    </Button>\r\n                    <NavigateNextIcon className=\"goal-list-arrow\" />\r\n                  </div>\r\n\r\n                </React.Fragment>\r\n              )\r\n            })\r\n          }\r\n      </div>\r\n  );\r\n}\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Content.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\CalendarBox.js",["217","218","219","220","221","222","223"],"import React, { useEffect, useState } from 'react';\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport {Paper, Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { ko } from \"date-fns/locale\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\nimport '../../stylesheets/CalendarBox.css';\r\nimport { objFeedCalendarOverview , objDatesData, objTodosDataResult} from \"../../atoms/todoData\";\r\nimport { getTodosOverviewData, getTodosData } from \"../../api/apiCommunicate\";\r\n\r\n\r\n\r\nexport const styles = makeStyles(() => ({ //define CSS for different date types\r\n    notInThisMonthDayPaper: {\r\n        visibility: \"hidden\",\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#00000000\",\r\n        fontSize: \"0.825em\",\r\n        textAlign: \"center\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n    },\r\n    normalDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },  \r\n    normalDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    selectedDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    selectedDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"700\",\r\n        textAlign: \"center\",\r\n        textDecoration: \"underline\",\r\n        color: \"#000\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    hasTodoDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707080\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    hasTodoDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    CheckedTodoDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#21bdbd\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    CheckedTodoDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"700\",\r\n        textAlign: \"center\",\r\n        color: \"#21bdbd90\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    todayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    todayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"600\",\r\n        color: \"#222\",\r\n        textAlign: \"center\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n\r\n\r\n}));\r\n\r\nexport default function CalendarBox(props) {\r\n\r\n/* state 선언 시작 */\r\n\r\n//환경변수\r\nconst USER_NUM_ID = process.env.REACT_APP_USER_NUM_ID;\r\n\r\nconst [objDate, setObjDate] = useRecoilState(objDatesData);\r\nconst copy_objDate = {...objDate};\r\nlet [dtFeedCalendarOverview, setDtFeedCalendarOverview] = useRecoilState(objFeedCalendarOverview);\r\nlet [dtObjTodosDataResult, setDtObjTodosDataResult] = useRecoilState(objTodosDataResult);\r\n\r\nconst today = new Date(); // 오늘 날짜 객체\r\nconst classes = styles(); // import those CSS\r\nconst [selectedDate, setselectedDate] = useState(new Date(objDate.dtFeedCalendarDate)); //현재 선택된 날짜 state -> Feed 불러낼 때 사용\r\n\r\nlet todoObj = {};\r\n\r\n/* state 선언 종료 */\r\n\r\n/* hook 선언 시작 */\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n\r\n    //selectedDate 변경시 Tododata의 dtFeedCalendarDate\r\n    copy_objDate.dtFeedCalendarDate = selectedDate;\r\n    setObjDate(copy_objDate);\r\n    const localeSelectedDate = selectedDate.toJSON().substring(0, 10);\r\n    const localeSelectedDateYm = selectedDate.toJSON().substring(0, 7);\r\n\r\n\r\n    //컴포넌트 실행 시 서버에서 값 받아서 Atom에 업데이트\r\n\r\n    //한 달 todo 조회 -> 아톰에 캘린더 표시 TODO 값 업데이트\r\n    //objDate.dtFeedCalendarDate로 feed 에서 쓰는 objTodosDataResult 받아와주기\r\n    const newTodoOverviewData = getTodosOverviewData(USER_NUM_ID, localeSelectedDateYm)\r\n    //setDtFeedCalendarOverview(newTodoOverviewData);\r\n    //만약 값이 바뀌면 업데이트 해야하나?\r\n\r\n    //당일 todo 조회하기 -> 아톰에 Feed 표시 TODO 값 업데이트\r\n    const newTodoData = getTodosData(USER_NUM_ID, localeSelectedDate)\r\n    //setDtObjTodosDataResult(newTodoData)\r\n\r\n},[selectedDate])\r\n    \r\n    \r\n/* hook 선언 종료 */\r\n\r\n/* 함수 선언 시작 */\r\n\r\n\r\n\r\n\r\n\r\n// 데이터가 있는 날\r\n// 데이터가 있는 날 : todo 갯수 / 데이터가 모두 완료된 날 \r\n\r\nconst theDayhasTodoArr = dtFeedCalendarOverview.map((data,i) => data.arrTodoInfo[0].numTodoDay);\r\n    \r\n//ajax 통신을 통해 받아온 값 (numCountTodo, numTodoCount, completeYn)\r\n    dtFeedCalendarOverview.map((item, i) =>  todoObj[item.arrTodoInfo[0].numTodoDay] = item.arrTodoInfo[0].ynComplete!=='Y'? item.arrTodoInfo[0].numTodoCount : '✓');\r\n\r\n    //날짜 타일 변경 함수\r\n    function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\r\n\r\n\r\n        //boolean 으로 바꿔주는 작업\r\n        //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) -> true\r\n        const isHasTodoData = theDayhasTodoArr.includes(day.getDate()); \r\n        //클릭된 날짜 \r\n        const isSelected = day.getDate() === selectedDate.getDate();\r\n        //오늘 날짜\r\n        const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth();\r\n\r\n        //dateTile 생성\r\n        let dateTile\r\n\r\n        if (isInCurrentMonth) { //데이터 타일 반환\r\n            if (isHasTodoData) { //HasTodoData가 있을 때 = todo가 있는 날 -> 갯수 표시 todoChecked가 y 면 색상변환 \r\n\r\n                let d = day.getDate();\r\n                // console.log(todoObj, d)\r\n                // console.log('todoObj[d]', todoObj[d])\r\n\r\n                dateTile = (\r\n                    <Paper className={isNaN(todoObj[d])? classes.CheckedTodoDayPaper : isHasTodoData? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper } ref={isNaN(todoObj[d])? classes.CheckedTodoDayPaper : isHasTodoData? classes.hasTodoDayPaper : isSelected? classes.selectedDayPaper : isToday? classes.todayPaper : classes.normalDayPaper}>\r\n                        <Grid className={isNaN(todoObj[d])? classes.CheckedTodoDayNum : isHasTodoData? classes.hasTodoDayNum : isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                            {day.getDate()}\r\n                        </Grid>\r\n                       {isHasTodoData? <span className='todoDataNum'>{todoObj[d]}</span> : null}\r\n                    </Paper>\r\n                    )\r\n            } else {\r\n                dateTile = (\r\n                <Paper className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}>   \r\n                    <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}> {day.getDate()}</Grid>\r\n                </Paper>)\r\n            }\r\n        } \r\n        else {\r\n            dateTile = (<Paper className={classes.notInThisMonthDayPaper}>\r\n                <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                    {day.getDate()}\r\n                </Grid>\r\n            </Paper>)\r\n\r\n        }\r\n        return dateTile;\r\n    }\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return(\r\n          <MuiPickersUtilsProvider locale={ko} utils={DateFnsUtils} >\r\n                <DatePicker\r\n                    value={selectedDate}\r\n                    onChange={setselectedDate} //클릭하면 selectedDate (선택한 날짜로 보냄)\r\n                    variant=\"static\"\r\n                    inputFormat={\"yyyy-MM-dd\"}\r\n                    mask={\"____-__-__\"}\r\n                    //renderDay props로 getDayElement 전달\r\n                    renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)}\r\n\r\n                />\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n}\r\n\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\nav\\MainNavBar.js",["224","225","226","227","228"],"C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\CreateRoutinesForm.js",["229","230","231","232","233"],"import React, { useEffect, useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Button } from \"@mui/material\";\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nimport RoutineDayModal from './RoutineDayModal';\r\nimport RoutineDateModal from './RoutineDateModal';\r\n\r\nimport { objDatesData, objTodosDataResult } from \"../../atoms/todoData\";\r\n\r\nexport default function CreateRoutinesForm (props) {\r\n\r\n    /* atom 선언 시작 */\r\n    const [dtDate, setDtDate] = useRecoilState(objDatesData);\r\n    const [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n\r\n    /* atom 선언 끝 */\r\n\r\n    /* state 선언 시작 */\r\n\r\n    const goal_Id = props.goalId;\r\n    const todo_Id = props.todoId;\r\n    const orderNo = props.orderNo;\r\n    const setIsGoalSelected = props.setIsGoalSelected;\r\n    const todoDataArray = props.todoDataArray;\r\n\r\n    console.log(\"create goal_Id\", goal_Id, \"todo_Id\", todo_Id, \"orderNo\", orderNo)\r\n\r\n    let [dayActiveBoolean, setDayActiveBoolean] = useState(false);\r\n    let [dateActiveBoolean, setDateActiveBoolean] = useState(false);\r\n    let [location, setLocation] = useState(null)\r\n    //위의 location 처럼 create에서 작업한다는 신호\r\n    let position = 'create'\r\n\r\n    let [createRoutinesState, setCreatRoutinesState] = useState({\r\n        \"goalId\": goal_Id, //묶여있는 goal id\r\n        \"id\": todo_Id,\r\n        \"orderNo\": orderNo,\r\n        \"title\": \"\",\r\n        \"date\": dtDate.dtToday,\r\n        \"startRepeatDate\": dtDate.dtToday,\r\n        \"endRepeatDate\": dtDate.dtToday, //반복 종료 일자. 반복 없으면 date 와 값이 같거나 없음\r\n        \"repeatMonYn\":\"n\",\r\n        \"repeatTueYn\":\"n\",\r\n        \"repeatWenYn\":\"n\",\r\n        \"repeatThuYn\":\"n\",\r\n        \"repeatFriYn\":\"n\",\r\n        \"repeatSatYn\":\"n\",\r\n        \"repeatSunYn\":\"n\",\r\n        \"checkYn\": \"n\"\r\n      });\r\n      const dayArr = [\r\n        { dayEng : 'SUN', dayKor : '일', checkYn: createRoutinesState.repeatSunYn},\r\n        { dayEng : 'MON', dayKor : '월', checkYn: createRoutinesState.repeatMonYn},\r\n        { dayEng : 'TUE', dayKor : '화', checkYn: createRoutinesState.repeatTueYn},\r\n        { dayEng : 'WEN', dayKor : '수', checkYn: createRoutinesState.repeatWenYn},\r\n        { dayEng : 'THU', dayKor : '목', checkYn: createRoutinesState.repeatThuYn},\r\n        { dayEng : 'FRI', dayKor : '금', checkYn: createRoutinesState.repeatFriYn},\r\n        { dayEng : 'SAT', dayKor : '토', checkYn: createRoutinesState.repeatSatYn},\r\n      ];\r\n\r\n    /* state 선언 종료 */\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    const checkDate = dayArr.filter(data=>{\r\n        if(data['checkYn'] === \"y\") return data\r\n    })\r\n    \r\n\r\n\r\n    const routinesSubmit = (e) => {\r\n        const copy_todo_state = JSON.parse(JSON.stringify(dtTodos)); // dtTodos State 원본 카피        \r\n        copy_todo_state.map((data)=>{\r\n            if(data.id === goal_Id){\r\n                console.log(data.todos)\r\n                data.todos.push(createRoutinesState)\r\n            }\r\n        })\r\n        setDtTodos(copy_todo_state)\r\n        const newArr = Array(todoDataArray.length).fill(false);\r\n        setIsGoalSelected(newArr)\r\n    }\r\n    \r\n    /* 함수 선언 종료 */\r\n\r\n    return (\r\n        <div className=\"create-routines-input-Box\">\r\n        <RoutineDayModal \r\n        dayActiveBoolean={dayActiveBoolean} \r\n        setDayActiveBoolean={setDayActiveBoolean} \r\n        dayArr={dayArr}\r\n        createRoutinesState={createRoutinesState}\r\n        setCreatRoutinesState={setCreatRoutinesState}\r\n        position={position}\r\n\r\n        />\r\n        <RoutineDateModal \r\n        dateActiveBoolean={dateActiveBoolean}\r\n        setDateActiveBoolean={setDateActiveBoolean}\r\n        createRoutinesState={createRoutinesState}\r\n        setCreatRoutinesState={setCreatRoutinesState}\r\n        location={location}\r\n        />\r\n        <div className=\"routines-input-title-field\">\r\n                    <CheckBoxOutlineBlankIcon className=\"routines-input-check-icon\"/>\r\n                    <input id=\"todo-input\" className=\"routines-input-field\"  placeholder=\"할 일을 입력해주세요.\" type=\"text\" maxLength={\"50\"} \r\n                    onChange={(e)=>{\r\n                        setCreatRoutinesState({\r\n                            ...createRoutinesState, title: e.target.value\r\n                        })\r\n                    }}\r\n                    /> \r\n                </div>\r\n                <div className=\"routines-input-startdate-field\" onClick={()=>{\r\n                    setDateActiveBoolean(true)\r\n                    setLocation(`date`)\r\n                    }}>\r\n                    <span>시작 날짜</span>\r\n                    <input id=\"start-date-input\" className=\"routines-startdate-input\"  type=\"text\" value={createRoutinesState.date} readOnly /> \r\n                </div>\r\n                <div className=\"routines-input-enddate-field\"\r\n                onClick={()=>{\r\n                    setDateActiveBoolean(true)\r\n                    setLocation(`endRepeatDate`)\r\n                    }} >\r\n                    <span>종료 날짜</span>\r\n                    <input id=\"end-date-input\" className=\"routines-enddate-input\" type=\"text\" value={createRoutinesState.endRepeatDate} readOnly /> \r\n                </div>\r\n                <div className=\"routines-input-day-field\" onClick={()=>{setDayActiveBoolean(true)}} >\r\n                    <span className=\"routines-input-day-field-title\">반복 요일</span>\r\n                    <div className=\"routines-day-text-wrap\">\r\n                        {checkDate.map((data)=>{\r\n                            return <span className=\"routines-day-text\" key={data.dayEng}>{data['dayKor']}</span>\r\n                        })}\r\n                    </div>\r\n                </div>\r\n                <Button type=\"submit\" className=\"routines-input-btn\" onClick={routinesSubmit}>등록</Button>\r\n        </div>\r\n    )\r\n\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\EditRoutinesForm.js",["234","235","236","237","238","239","240","241"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nimport { objDatesData, objTodosDataResult } from \"../../atoms/todoData\";\r\n\r\nimport RoutineDayModal from './RoutineDayModal';\r\nimport RoutineDateModal from './RoutineDateModal';\r\n\r\n\r\n// 할 일 클릭 - 수정 모달 - input 생성\r\nexport default function EditRoutinesForm(props) {\r\n\r\n        /* atom 선언 시작 */\r\n        const [dtDate, setDtDate] = useRecoilState(objDatesData);\r\n        const [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    \r\n        /* atom 선언 종료 */\r\n\r\n        /* state 선언 시작 */\r\n\r\n        const todos = props.todos;\r\n\r\n        let [dayActiveBoolean, setDayActiveBoolean] = useState(false);\r\n        let [dateActiveBoolean, setDateActiveBoolean] = useState(false);\r\n        //날짜 선택 캘린더 모달 등장 시 입력할 날짜 정보가 어디인지 (date, endRepeatDate)\r\n        let [location, setLocation] = useState(null)\r\n        //위의 location 처럼 edit에서 작업한다는 신호\r\n        let position = 'edit'\r\n\r\n        let [editRoutinesState, setEditRoutinesState] = useState(todos);\r\n        console.log(\"editRoutinesState\",editRoutinesState)\r\n\r\n        const dayArr = [\r\n        { dayEng : 'SUN', dayKor : '일', checkYn: editRoutinesState.repeatDays['SUN']},\r\n        { dayEng : 'MON', dayKor : '월', checkYn: editRoutinesState.repeatDays['MON']},\r\n        { dayEng : 'TUE', dayKor : '화', checkYn: editRoutinesState.repeatDays['TUE']},\r\n        { dayEng : 'WEN', dayKor : '수', checkYn: editRoutinesState.repeatDays['WEN']},\r\n        { dayEng : 'THU', dayKor : '목', checkYn: editRoutinesState.repeatDays['THU']},\r\n        { dayEng : 'FRI', dayKor : '금', checkYn: editRoutinesState.repeatDays['FRI']},\r\n        { dayEng : 'SAT', dayKor : '토', checkYn: editRoutinesState.repeatDays['SAT']},\r\n        ];\r\n\r\n        /* state 선언 종료 */\r\n\r\n        /* 함수 선언 시작 */\r\n\r\n        const checkDate = dayArr.filter(data=>{\r\n            if(data['checkYn'] === \"Y\") return data\r\n        })\r\n\r\n        /* 함수 선언 종료 */\r\n\r\n    return(\r\n        <div className=\"edit-routines-input-Box\">\r\n        <RoutineDayModal \r\n        dayActiveBoolean={dayActiveBoolean} \r\n        setDayActiveBoolean={setDayActiveBoolean} \r\n        dayArr={dayArr}\r\n        editRoutinesState={editRoutinesState}\r\n        setEditRoutinesState={setEditRoutinesState}\r\n        position={position}\r\n        />\r\n        <RoutineDateModal \r\n        dateActiveBoolean={dateActiveBoolean}\r\n        setDateActiveBoolean={setDateActiveBoolean}\r\n        editRoutinesState={editRoutinesState}\r\n        setEditRoutinesState={setEditRoutinesState}\r\n        location={location}\r\n        />\r\n        <div className=\"routines-input-title-field\">\r\n            <div className=\"routines-input-startdate-field\" onClick={()=>{\r\n                setDateActiveBoolean(true)\r\n                setLocation(`date`)\r\n                }}>\r\n                <span>시작 날짜</span>\r\n                <input id=\"start-date-input\" className=\"routines-startdate-input\"  type=\"text\" value={editRoutinesState.date} readOnly /> \r\n            </div>\r\n            <div className=\"routines-input-enddate-field\"\r\n            onClick={()=>{\r\n                setDateActiveBoolean(true)\r\n                setLocation(`endRepeatDate`)\r\n                }} >\r\n                <span>종료 날짜</span>\r\n                <input id=\"end-date-input\" className=\"routines-enddate-input\" type=\"text\" value={editRoutinesState.endRepeatDate} readOnly /> \r\n            </div>\r\n            <div className=\"routines-input-day-field\" onClick={()=>{setDayActiveBoolean(true)}} >\r\n                <span className=\"routines-input-day-field-title\">반복 요일</span>\r\n                <div className=\"routines-day-text-wrap\">\r\n                    {checkDate.map((data)=>{\r\n                        return <span className=\"routines-day-text\" key={data.dayEng}>{data['dayKor']}</span>\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Button type=\"submit\" className=\"routines-input-btn\" >등록</Button>\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\Feed.js",["242","243","244","245","246","247"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CalendarPicker from '@mui/lab/CalendarPicker';\r\nimport { ko } from \"date-fns/locale\";\r\nimport FeedTodoGoal from './FeedTodoGoal';\r\nimport {  Modal } from \"@mui/material\";\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport EventAvailableIcon from '@material-ui/icons/EventAvailable';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport EventBusyIcon from '@material-ui/icons/EventBusy';\r\nimport BackspaceIcon from '@material-ui/icons/Backspace';\r\n\r\nimport { objTodosDataResult, objDatesData } from \"../../atoms/todoData\";\r\nimport CreateTodoForm from \"./CreateTodoForm\";\r\nimport '../../stylesheets/Feed.css'\r\n\r\nexport default function Feed() {\r\n\r\n/* hook 선언 시작 */\r\n\r\nlet history = useHistory();\r\n\r\n/* hook 선언 종료 */\r\n\r\n/* state 선언 시작 */\r\n\r\n    //all todos 수정 모달 onoff\r\n    const [allTodoModalActive, setAllTodoModalActive] = useState(false);\r\n\r\n    //수정 모달에서 캘린더 onoff\r\n    const [allTodoCalendarActive, setAllTodoCalendarActive] = useState(false);\r\n\r\n    //캘린더로 선택한 날짜\r\n    const [selectedDate, setSelectedDate] = useState(new Date())\r\n\r\n\r\n/* atom 시작 */\r\n\r\n    // atom에서 goal+todo 데이터 가져오기\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n    let dtDate = useRecoilValue(objDatesData);\r\n    console.log(\"todoData\", dtTodos)\r\n/* atom 종료 */\r\n\r\n//날짜 정보값 dtToday 오늘 dtTomorrow 내일 dtFeedCalendarDate 캘린더에서 선택한 날짜\r\n\r\n//목표 클릭 여부 확인 배열 생성\r\nlet [isGoalSelected, setIsGoalSelected] = useState(Array(todoDataArray.length).fill(false) );\r\n\r\n\r\n/* state 선언 종료 */\r\n\r\n/* 함수 선언 시작 */\r\n\r\n//Goal 클릭 핸들러 \r\nconst onClickGoalHandler = (e) => {\r\n    const index = e.currentTarget.dataset.index;\r\n    const clicked_arr = Array(todoDataArray.length).fill(false) ;\r\n    clicked_arr[index] = true;\r\n    setIsGoalSelected(clicked_arr)\r\n}\r\n\r\n//createTodoForm에 값 없을 때 사라지게\r\nconst createTodoFieldReset = (e) => {\r\n    const clicked_arr = Array(todoDataArray.length).fill(false) ;\r\n    setIsGoalSelected(clicked_arr);\r\n}\r\n\r\n//모달 내부 함수 시작\r\n\r\n//미완료 할 일 오늘 하기\r\n//만약 checkYn이 Y가 아니면 Y로 바꾸고 dtTodos 업데이트\r\nconst checkNdoitToday = () => {\r\n    todoDataArray.map(data=>\r\n        data.todos.map((todo)=>{\r\n            return todo.checkYn !== 'Y' ? todo.checkYn = 'Y' : null\r\n        })\r\n    )\r\n    setDtTodos(todoDataArray);\r\n    setAllTodoModalActive(false);\r\n}\r\n\r\n\r\n//할 일 다른 날 하기 캘린더 on\r\nconst checkNdoitCalendarOn = () => {\r\n    todoDataArray.map(data=>\r\n        //N이 없으면 나타나지 않아야 한다!!!\r\n        data.todos.map((todo)=>{\r\n            if(todo.checkYn !== 'N') return false\r\n            else setAllTodoCalendarActive(true);\r\n        })\r\n    )\r\n    \r\n}\r\n\r\n//미완료 할 일 다른 날 하기 확인 클릭\r\n//캘린더에서 선택한 selectedDate를 YYYY-MM-DD 방식으로 바꿔서\r\n//checkYn 이 N인 것들에 적용해준다.\r\nconst submitDoitOtherDay = (selectedDate) => {\r\n    const newDate = selectedDate.toJSON().substring(0, 10);\r\n\r\n    todoDataArray.map(data=>\r\n        data.todos.map((todo)=>{\r\n            return todo.checkYn !== 'Y' ? todo.date = newDate : null;\r\n           //endRepeatDate 가 같은 날일 경우도 처리해야 하나?\r\n           //todo.endRepeatDate = newDate\r\n        })\r\n    )\r\n    setDtTodos(todoDataArray);\r\n    setAllTodoCalendarActive(false);\r\n    setAllTodoModalActive(false);\r\n}\r\n\r\n//미완료 할 일 삭제\r\n//checkYn이 N이 아닌 것들만 모아서 (filter) todos를 바꿔준다\r\nconst checkNdelete = () => {\r\n    todoDataArray.map(data=> {\r\n            const checkedArr = data.todos.filter(todo=> todo.checkYn !== 'N')\r\n            data.todos = checkedArr;\r\n        }\r\n    )\r\n    setDtTodos(todoDataArray);\r\n    setAllTodoModalActive(false);\r\n}\r\n\r\n//모든 할 일 삭제\r\n//todos를 빈 배열로 변경해서 todos 를 비워버림\r\nconst allTodoDelete = () => {\r\n    todoDataArray.map(data=> {\r\n        const cleanArr = [];\r\n        data.todos = cleanArr;\r\n        }\r\n    )\r\n    setDtTodos(todoDataArray);\r\n    setAllTodoModalActive(false);\r\n}\r\n\r\n\r\n/* 함수 선언 끝 */\r\n\r\n    return (\r\n        <div className='feed-wrap'>\r\n            <AllTodoCalendar \r\n            selectedDate={selectedDate} setSelectedDate={setSelectedDate}\r\n            allTodoCalendarActive={allTodoCalendarActive} \r\n            setAllTodoCalendarActive={setAllTodoCalendarActive} \r\n            submitDoitOtherDay={submitDoitOtherDay} />\r\n\r\n            <AllTodoEditModal \r\n            allTodoModalActive={allTodoModalActive} \r\n            setAllTodoModalActive={setAllTodoModalActive}\r\n            checkNdoitToday={checkNdoitToday}\r\n            checkNdoitCalendarOn={checkNdoitCalendarOn}\r\n            checkNdelete={checkNdelete}\r\n            allTodoDelete={allTodoDelete}\r\n            dtDate={dtDate} />\r\n            <h2 className=\"feed-title\">Feed</h2>\r\n            <div className=\"goals-list-wrap\" >\r\n                {\r\n                    todoDataArray.map((data, idx) => {\r\n\r\n                        return (<React.Fragment key={'feed'+idx}>\r\n                        <FeedTodoGoal \r\n                        data={data} idx={idx}\r\n                        onClickGoalHandler={onClickGoalHandler}\r\n                        />\r\n                        {isGoalSelected[idx] ? <CreateTodoForm \r\n                        dtDate={dtDate} goalId={data.id} \r\n                        todoLength={data.todos.length}\r\n                        createTodoFieldReset={createTodoFieldReset}\r\n                        /> :null}\r\n                        </React.Fragment>\r\n                        )\r\n                    })\r\n                    \r\n                }\r\n            </div>\r\n            <button className=\"feed-day-all-todo-edit\" title=\"현재 날짜의 모든 할 일 수정\" onClick={()=>{setAllTodoModalActive(true)}}><MoreHorizIcon /></button>\r\n            <button className=\"feed-move-to-routines\" title=\"기간이 있는 할 일 작성하기\" onClick={()=>{history.push(\"/routines\")}}><BorderColorIcon /></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport function AllTodoEditModal (props) {\r\n\r\n    const allTodoModalActive = props.allTodoModalActive;\r\n    const setAllTodoModalActive = props.setAllTodoModalActive;\r\n    const checkNdoitToday = props.checkNdoitToday;\r\n    const checkNdoitCalendarOn = props.checkNdoitCalendarOn;\r\n    const checkNdelete = props.checkNdelete;\r\n    const allTodoDelete = props.allTodoDelete;\r\n\r\n    return (\r\n        <Modal open={allTodoModalActive}\r\n        onClose={()=>{setAllTodoModalActive(false)}}\r\n        aria-labelledby=\"all-todo-modal-title\"\r\n        aria-describedby=\"all-modal-description\"\r\n        className=\"all-todo-modal-box\"\r\n         >\r\n        \r\n            <div className=\"all-todo-modal-wrap\" >\r\n                <p className=\"all-todo-modal-head\">현재 날짜의 모든 할 일 수정</p>\r\n                <div className=\"all-todo-modal-icon-wrap\">\r\n                    <button className=\"all-todo-modal-icon\" onClick={checkNdoitToday}>\r\n                       <EventAvailableIcon className=\"feed-modal-icon\" /><span>미완료 할 일<br/>전부 완료 하기</span>\r\n                    </button>\r\n                    <button className=\"all-todo-modal-icon\" onClick={()=>{checkNdoitCalendarOn()}}>\r\n                       <EventNoteIcon className=\"feed-modal-icon\" /><span>미완료 할 일<br/>다른 날 하기</span>\r\n                    </button>\r\n                    <button className=\"all-todo-modal-icon\" onClick={checkNdelete}>\r\n                       <EventBusyIcon className=\"feed-modal-icon\" /><span>미완료 할 일<br/>삭제</span>\r\n                    </button>\r\n                    <button className=\"all-todo-modal-icon\" onClick={allTodoDelete}>\r\n                       <BackspaceIcon className=\"feed-modal-icon\" /><span>모든 할 일<br/>삭제</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </Modal>  \r\n    )\r\n}\r\n\r\nexport function AllTodoCalendar (props) {\r\n\r\n    const selectedDate = props.selectedDate;\r\n    const setSelectedDate = props.setSelectedDate;\r\n    const allTodoCalendarActive = props.allTodoCalendarActive;\r\n    const setAllTodoCalendarActive = props.setAllTodoCalendarActive; \r\n    const submitDoitOtherDay = props.submitDoitOtherDay;\r\n\r\n    const week = new Array('일', '월', '화', '수', '목', '금', '토');\r\n\r\n    let selectedYear = selectedDate.getFullYear();\r\n    let selectedMonth = selectedDate.getMonth()+1;\r\n    let selectedDay = selectedDate.getDate();\r\n    let selectedLabel = selectedDate.getDay();\r\n    let todayLabel = week[selectedLabel];\r\n\r\n    return (\r\n        <Modal open={allTodoCalendarActive}\r\n        onClose={()=>{setAllTodoCalendarActive(false)}} \r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n        className=\"todo-modal-datePicker-wrap\"\r\n         >\r\n        <div className=\"todo-modal-datePicker-box\">\r\n            <LocalizationProvider locale={ko} dateAdapter={AdapterDateFns}>\r\n                <div className=\"todo-modal-datePicker-box-title-wrap\">\r\n                    <p>선택한 날짜</p>\r\n                    <span>{selectedYear +`년 `+ selectedMonth +`월 `+ selectedDay+ `일 ` + todayLabel + `요일`}</span>\r\n                </div>\r\n                <CalendarPicker className=\"todo-modal-datePicker\" date={selectedDate} onChange={(date) => setSelectedDate(date)} />\r\n                <div className=\"todo-modal-datePicker-btn-wrap\">\r\n                <button className=\"todo-modal-datePicker-btn\" data-day={selectedDate} onClick={()=>{submitDoitOtherDay(selectedDate)}}>확인</button> <button className=\"todo-modal-datePicker-btn\" onClick={()=>{setAllTodoCalendarActive(false)}}>취소</button>\r\n                </div>\r\n            </LocalizationProvider>\r\n        </div>\r\n        </Modal>  \r\n    )\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\Search.js",["248"],"import React, { useState } from 'react'\r\n\r\nimport { Button, TextField } from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport '../../stylesheets/Search.css';\r\n\r\n//  ** 할일 **\r\n// ✔ filter 함수 : 입력받는 string에 매치되는 아이디 불러와 보여주기\r\n// *** 검색어 입력 -> 엔터 뒤에 한번에 검색하기 로 로직 변경하기 \r\n\r\n// 유저 리스트-> 유저 클릭 -> 유저 feed 이동 -> 팔로우 버튼 -> event: isfollowing: true 생성 또는 변경 \r\n\r\n// 받아와야 하는 값 \r\n// -user id 입력-> filter -> 출력 user nickname \r\n\r\n// < style 수정사항 >\r\n// ✔ search 검색 input 높이 조절\r\n// 항목 선택시 default 색 변경 \r\n\r\nconst Data = [\r\n  { \"strUserName\": \"주영\", \"todo_id\": \"0\", \"title\": \"🥛우유마시기\" },\r\n  { \"strUserName\": \"🍈메로나\", \"todo_id\": \"1\", \"title\": \"공부하기\" },\r\n  { \"strUserName\": \"두두\", \"todo_id\": \"5\", \"title\": \"스터디카페가기\" },\r\n  { \"strUserName\": \"나야\", \"todo_id\": \"7\", \"title\": \"8시간 자기\" }\r\n]\r\n//console.log(Data);\r\n\r\nexport default function Search() {\r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n  \r\n    return (\r\n      <div className=\"search-search-list-wrap\" >\r\n            {/* textfield underline 색상 변경 */}\r\n            <TextField \r\n                className=\"search-blank\"\r\n                fullWidth  \r\n                hiddenLabel\r\n                id=\"filled-basic\"\r\n                size=\"small\"\r\n                variant=\"filled\"\r\n                placeholder=\"email ,ID 검색\"\r\n                sx={{ boxShadow: 'none',\r\n                '& .MuiFilledInput-root': {\r\n                  backgroundColor:'#f5f5f5',\r\n                  borderRadius: 2,\r\n                  fontSize: 14,\r\n                  color: '#080808',}\r\n                }}    \r\n                onChange={(event) => {\r\n                  setSearchTerm(event.target.value);\r\n                }}\r\n        \r\n                InputProps={{\r\n                  disableUnderline: true,\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon fontSize=\"small\" className=\"search-list-icon\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            >\r\n            </TextField>\r\n\r\n            {Data.filter((data)=> {\r\n              if (searchTerm === \"\") {\r\n                return data\r\n              } else if (data.strUserName.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n                return data\r\n              } else if (data.title.toLowerCase().includes(searchTerm.toLowerCase())) {\r\n                return data\r\n              }\r\n            }).map(data=>{\r\n              return(\r\n                <React.Fragment key={data.todo_id}>\r\n                  <div className=\"search-list-box\" key={data.todo_id}>\r\n                    <Button className=\"search-list-button\" id={data.todo_id} name={data.todo_id}>\r\n                        <div className=\"search-list-name\" id={data.strUserName} name={data.strUserName}>\r\n                          <p>{data.strUserName}</p>\r\n                        </div>\r\n                        <div className=\"search-list-text\" id={data.title} name={data.title}>\r\n                          <p>{data.title}</p>\r\n                        </div>\r\n                    </Button>\r\n                  </div>\r\n\r\n                </React.Fragment>\r\n               \r\n               );\r\n\r\n              })}\r\n                \r\n    \r\n      </div>\r\n    \r\n    )}","C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\Follower.js",["249","250","251","252","253","254","255","256","257"],"C:\\Users\\soomin\\clonemate-front\\src\\components\\exploresearch\\Following.js",["258","259","260","261","262"],"C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\CreateTodoForm.js",["263","264","265","266","267","268","269","270","271"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\nimport { objTodosDataResult } from \"../../atoms/todoData\";\r\nimport { postTodoCreateData } from \"../../api/apiCommunicate\";\r\n\r\n\r\nexport default function CreateTodoForm (props) {\r\n\r\n    /* hook 선언 시작 */\r\n\r\n    let createInput = useRef();\r\n\r\n    const { register, handleSubmit, errors, watch } = useForm({ mode: \"onChange\" });\r\n    useEffect(() => {\r\n        const inputElement = createInput.current;\r\n        inputElement.focus();\r\n      }, []);\r\n\r\n    /* hook 선언 종료 */\r\n\r\n    /* atom 시작 */\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n\r\n    /* atom 종료 */\r\n\r\n    /* state 선언 시작 */\r\n\r\n    const dtDate = props.dtDate;\r\n    const goal_id = props.goalId;\r\n    const new_todo_id = props.todoLength+1;\r\n    const new_order_no = props.todoLength+1;\r\n    const createTodoFieldReset = props.createTodoFieldReset;\r\n\r\n    let createTodoState = {\r\n        \"goalId\": goal_id,\r\n        \"todoId\": new_todo_id,\r\n        \"orderNo\": new_order_no,\r\n        \"contents\": \"\",\r\n        \"date\": dtDate.dtToday,\r\n        \"startRepeatDate\": dtDate.dtToday,\r\n        \"endRepeatDate\": dtDate.dtToday,\r\n        \"isRepeatMon\":false,\r\n        \"isRepeatTue\":false,\r\n        \"isRepeatWen\":false,\r\n        \"isRepeatThu\":false,\r\n        \"isRepeatFri\":false,\r\n        \"isRepeatSat\":false,\r\n        \"isRepeatSun\":false,\r\n    };\r\n\r\n    console.log(\"createTodoState\", createTodoState)\r\n\r\n    /* state 선언 종료 */\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    //createTodoForm에 값 없을 때 사라지게\r\n    const inputValueCheckHandler =  (e) => { \r\n        if(e.currentTarget.value === \"\") {\r\n            createTodoFieldReset()\r\n        } else {\r\n            createTodoStateSubmit(e)\r\n        }\r\n    }\r\n    //엔터 클릭 시 inputValueCheckHandler 실행\r\n    const onKeyPressHandler = (e) => {\r\n        if(e.key === 'Enter' || e.code === 'NumpadEnter') inputValueCheckHandler(e)\r\n    }\r\n\r\n    //field에 글자 입력 시 createTodoState 객체 contents 값 변경\r\n    const onChangeCreateTodofield = (e) => {\r\n        createTodoState.contents = e.currentTarget.value;\r\n    }\r\n\r\n    //새로운 todo 넣기 / goal객체 찾아서 todos에 push\r\n    const createTodoStateSubmit = (e) => {\r\n        todoDataArray.map(data=>{\r\n                if(data.goalId === goal_id){\r\n                    data.todos.push(createTodoState)\r\n                }\r\n            }\r\n        )\r\n        setDtTodos(todoDataArray)\r\n        postTodoCreateData(todoDataArray)\r\n        createTodoFieldReset()\r\n    }\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return (\r\n        <div className=\"create-todo-form\">\r\n            <CheckBoxOutlineBlankIcon className=\"create-todo-check-icon\"/>\r\n            <input ref={createInput} id=\"todo-input\" className=\"create-todo-field\"  placeholder=\"할 일을 입력해주세요.\" type=\"text\" maxLength=\"50\" \r\n            onChange={onChangeCreateTodofield}\r\n            onBlur={inputValueCheckHandler}\r\n            onKeyPress={onKeyPressHandler} \r\n            /> \r\n        </div>\r\n    )\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\FeedTodoGoal.js",["272","273","274"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nimport FeedTodoData  from \"./FeedTodoData\";\r\n\r\n\r\n export default function FeedTodoGoal(props) {\r\n\r\n    const data = props.data; \r\n    const idx = props.idx;\r\n    const modalOpen = props.modalOpen;\r\n    const onClickGoalHandler = props.onClickGoalHandler;\r\n\r\n\r\n    return (\r\n        <div className=\"goals-list-box\" key={data.goalOrderNo}>\r\n            <Button className=\"goals-list-button\" id={idx} data-index={idx} data={data} onClick={onClickGoalHandler}>\r\n                <ReceiptIcon className=\"goals-list-icon\" />\r\n                <div className=\"goals-list-text\" id={data.goalOrderNo} name={data.goalOrderNo} style={{ color:data.titleColor }}  ><p>{data.title}</p>\r\n                </div>\r\n                <p className=\"goals-list-plus-icon-wrap\">\r\n                <AddCircleIcon className=\"goals-list-plus-icon\"/>\r\n                </p>\r\n            </Button>\r\n            <div className=\"todos-list-cont\">\r\n                {data.todos.map((data, idx)=>{\r\n                    return (\r\n                    <React.Fragment >\r\n                    <FeedTodoData todos={data} modalOpen={modalOpen} key={'key'+data.todoId}\r\n                    />\r\n                    </React.Fragment>\r\n                    )\r\n                }) \r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n} ","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\TodoModal.js",["275","276","277","278","279","280","281"],"import { Modal } from \"@mui/material\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CalendarPicker from '@mui/lab/CalendarPicker';\r\nimport { ko } from \"date-fns/locale\";\r\n\r\n\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\r\nimport WrapTextIcon from '@material-ui/icons/WrapText';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nimport { objTodosDataResult, objDatesData } from \"../../atoms/todoData\";\r\n\r\n\r\nexport function TodoModal (props) {\r\n\r\n    /* hook 선언 시작 */\r\n\r\n    const history = useHistory();\r\n\r\n    /* hook 선언 종료 */\r\n\r\n    /* state 선언 시작 */\r\n\r\n    /* atom 선언 시작 */\r\n\r\n    let dtDate = useRecoilValue(objDatesData);\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n\r\n    /* atom 선언 종료 */\r\n\r\n    const index = props.index;\r\n    const todos = props.todos;\r\n    const [calendarActiveIndex, setCalendarActiveIndex] = useState(null);\r\n\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    //모달 onoff 핸들러\r\n    const modalActive = props.modalActive;\r\n\r\n    //캘린더 onoff 핸들러\r\n    const setModalActiveIndex = props.setModalActiveIndex;\r\n\r\n    //모달 수정 클릭 핸들러\r\n    const todoModalEditHandler = props.todoModalEditHandler;\r\n\r\n\r\n    //모달 내일하기 클릭 핸들러 \r\n    const todoModalDelayHandler = (e) => {\r\n    const goal_id = parseInt(e.currentTarget.dataset.goalid);\r\n    const todo_id = parseInt(e.currentTarget.dataset.todoid);\r\n        todoDataArray.map(data=>\r\n            data.todos.map(todo=>{\r\n                if(todo.goalId === goal_id && todo.todoId === todo_id && todo.date === todo.endRepeatDate){\r\n                todo.date = dtDate.dtTomorrow;\r\n                todo.endRepeatDate = dtDate.dtTomorrow;\r\n                }\r\n            })\r\n        )\r\n        setModalActiveIndex(null)\r\n    }\r\n    \r\n    //모달 순서 변경 클릭 핸들러\r\n    const todoModalOrderHandler = (e) => {\r\n        console.log(e.currentTarget)\r\n        history.push('/orderitem');\r\n    }\r\n\r\n    //모달 삭제 클릭 핸들러\r\n    const todoModalDeleteHandler = (e) => {\r\n        const goal_id = parseInt(e.currentTarget.dataset.goalid);\r\n        const todo_id = parseInt(e.currentTarget.dataset.todoid);\r\n\r\n        todoDataArray.map(data=>\r\n            data.todos.map((todo, index)=>{\r\n                if(todo.goalId === goal_id && todo.todoId === todo_id)  data.todos.splice(index, 1)\r\n            })\r\n        )\r\n        setDtTodos(todoDataArray) ;//setDtTodos 이용해 state 변경\r\n        setModalActiveIndex();\r\n    }\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return(\r\n        <>\r\n        {/* {console.log(\"todos.date\", todos.date)} */}\r\n        <DatePickerCalender \r\n        calendarActiveIndex={calendarActiveIndex} \r\n        setCalendarActiveIndex={setCalendarActiveIndex}\r\n        setModalActiveIndex={setModalActiveIndex}\r\n        todos={todos}\r\n        calendarActive={index === calendarActiveIndex? true : false}\r\n        /> \r\n\r\n        <Modal open={modalActive}\r\n        onClose={()=>{setModalActiveIndex(null)}}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n        className=\"feed-todo-modal-box\"\r\n         >\r\n        \r\n            <div className=\"feed-todo-modal-wrap\" >\r\n                <p className=\"feed-todo-modal-head\">{todos.title}</p>\r\n                <div className=\"feed-todo-modal-icon-wrap\">\r\n                    <button className=\"feed-todo-modal-icon feed-todo-edit-icon\" \r\n                    data-goalid={todos.goalId} data-todoid={todos.id} \r\n                    onClick={todoModalEditHandler}\r\n                     >\r\n                        <EditIcon className=\"feed-modal-icon\" /><span>수정</span>\r\n                    </button>\r\n                    <button className=\"feed-todo-modal-icon feed-todo-delay-icon\" \r\n                    data-goalid={todos.goalId} data-todoid={todos.id} \r\n                    onClick={todoModalDelayHandler}\r\n                    >\r\n                        <SkipNextIcon className=\"feed-modal-icon\" /><span>내일 하기</span>\r\n                    </button>\r\n                    <button className=\"feed-todo-modal-icon feed-todo-date-change-icon\" \r\n                    data-goalid={todos.goalId} data-todoid={todos.id} \r\n                    onClick={()=>{\r\n                        setCalendarActiveIndex(todos.id)\r\n                        //  console.log(todos.todoId, calendarActiveIndex)\r\n                        }}\r\n                    >\r\n                        <SyncAltIcon className=\"feed-modal-icon\" /><span>날짜 바꾸기</span>\r\n                    </button>\r\n                    <button className=\"feed-todo-modal-icon feed-todo-order-change-icon\" \r\n                    onClick={todoModalOrderHandler}\r\n                    >\r\n                        <WrapTextIcon className=\"feed-modal-icon\" /><span>순서 변경</span>\r\n                    </button>\r\n                    <button className=\"feed-todo-modal-icon feed-todo-delete-icon\" \r\n                    data-goalid={todos.goalId} data-todoid={todos.id} \r\n                    onClick={todoModalDeleteHandler}\r\n                    >\r\n                        <DeleteOutlineIcon className=\"feed-modal-icon\" /><span>삭제</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n        </Modal>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport function DatePickerCalender(props) {\r\n\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n    const todos = props.todos;\r\n    const new_date = new Date(todos.date);\r\n    let [newDate, setNewDate] = useState(new_date);\r\n\r\n    const week = new Array('일', '월', '화', '수', '목', '금', '토');\r\n\r\n    const calendarActive = props.calendarActive;\r\n    const setCalendarActiveIndex = props.setCalendarActiveIndex;\r\n\r\n\r\n    //모달 내 선택한 날짜 상단 표시\r\n    const selectedDate = newDate.toJSON().substring(0,10);\r\n\r\n    let selectedYear = newDate.getFullYear();\r\n    let selectedMonth = newDate.getMonth()+1;\r\n    let selectedDay = newDate.getDate();\r\n    let selectedLabel = newDate.getDay();\r\n    let todayLabel = week[selectedLabel];\r\n\r\n\r\n        //모달 날짜 바꾸기 캘린더 확인 핸들러\r\n        const todoModalDateChangeHandler = (e) => {\r\n            const goal_id = parseInt(e.currentTarget.dataset.goalid);\r\n            const todo_id = parseInt(e.currentTarget.dataset.todoid);\r\n            todoDataArray.map((data)=>\r\n                data.todos.map((todo)=> {\r\n                    if(todo.goalId === goal_id && todo.id === todo_id && todo.date === todo.endRepeatDate){\r\n                    todo.date = selectedDate;\r\n                    todo.endRepeatDate = selectedDate;\r\n                    }\r\n                })\r\n            )\r\n            setCalendarActiveIndex(null)\r\n        }\r\n\r\n\r\n    return (\r\n        <Modal open={calendarActive}\r\n        onClose={()=>{setCalendarActiveIndex(null)}}\r\n        aria-labelledby=\"calendar-title\"\r\n        aria-describedby=\"calendar-description\"\r\n        className=\"calendar-wrap\"\r\n         >\r\n        <div className=\"calendar-box\">\r\n            <LocalizationProvider locale={ko} dateAdapter={AdapterDateFns}>\r\n                <div className=\"calendar-title-wrap\">\r\n                    <p>선택한 날짜</p>\r\n                    <span>{selectedYear +`년 `+ selectedMonth +`월 `+ selectedDay+ `일 ` + todayLabel + `요일`}</span>\r\n                </div>\r\n                <CalendarPicker className=\"calendar-picker\" date={newDate} onChange={(newDate) => setNewDate(newDate)} />\r\n                <div className=\"calendar-btn-box\">\r\n                    <button className=\"calendar-ok-btn\" \r\n                    data-goalid={todos.goalId}\r\n                    data-todoid={todos.id}\r\n                    data-selecteddate={selectedDate} \r\n                    onClick={todoModalDateChangeHandler}>\r\n                        확인\r\n                    </button> \r\n                    <button className=\"calendar-cancel-btn\" \r\n                    onClick={()=>{setCalendarActiveIndex(null)}}>\r\n                        취소\r\n                </button>\r\n                </div>\r\n            </LocalizationProvider>\r\n        </div>\r\n        </Modal>  \r\n    )\r\n\r\n\r\n}","C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\FeedTodoData.js",["282","283","284","285","286","287"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\n\r\nimport { objTodosDataResult, objDatesData  } from \"../../atoms/todoData\";\r\n\r\nimport { TodoModal } from \"./TodoModal\";\r\nimport { LikeListModal } from \"./LikeListModal\";\r\nimport { Button } from \"@mui/material\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n export default function FeedTodoData(props) {\r\n\r\n\r\n    /* hook 선언 시작 */\r\n    // let todo_input = useRef([]);\r\n    let history = useHistory();\r\n\r\n    // useEffect(() => {\r\n    // const inputElement = todo_input.current;\r\n    //   },[]);\r\n    /* hook 선언 종료 */\r\n    \r\n\r\n    /* atom 선언 시작 */\r\n\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n\r\n    /* atom 선언 종료 */\r\n\r\n    /* state 선언 시작 */\r\n  \r\n    const todos = props.todos; \r\n    const index = props.todos.todoId;\r\n\r\n    const [readOnly, setReadOnly] = useState(true);\r\n    const [modalActiveIndex, setModalActiveIndex] = useState(false);\r\n    const [likeModalActiveIndex, setLikeModalActiveIndex] = useState(false)\r\n\r\n    /* state 선언 종료 */\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    const activeHandler = (index) => {\r\n        setModalActiveIndex(true)\r\n    }\r\n\r\n    const likeActiveHandler = (index) => {\r\n        setLikeModalActiveIndex(true)\r\n        // if (index === likeModalActiveIndex) {\r\n        //     setLikeModalActiveIndex(null);\r\n        // } else {\r\n        //     setLikeModalActiveIndex(index);\r\n        // }\r\n      }\r\n\r\n    const readOnlyHandler = (index) => {\r\n        if (index === modalActiveIndex) {\r\n          setModalActiveIndex(null);\r\n        } else {\r\n          setModalActiveIndex(index);\r\n        }\r\n      }\r\n\r\n      //Todo checkbox 핸들러\r\n    const onClickTodoCheckYn = (e) => {\r\n      e.stopPropagation(); \r\n      const goal_id = parseInt(e.currentTarget.dataset.goalid);\r\n      const todo_id = parseInt(e.currentTarget.dataset.todoid);\r\n\r\n      todoDataArray.map(data=>\r\n          data.todos.map(todo=>{\r\n              if(todo.goalId === goal_id && todo.id === todo_id){\r\n                  todo.checkYn === 'Y' ? todo.checkYn = 'N' : todo.checkYn = 'Y'\r\n                  console.log(\"todo.checkYn \" , todo.checkYn)\r\n              }\r\n          })\r\n      )\r\n      setDtTodos(todoDataArray) ;//setDtTodos 이용해 state 변경\r\n    }\r\n\r\n    //모달 수정 클릭 핸들러들\r\n\r\n\r\n    //엔터키 인식 readonly 변경\r\n    const enterKeyEventHandler = (e) => {\r\n        if(e.key === 'Enter' || e.code === 'NumpadEnter'){ \r\n            setReadOnly(true)\r\n        }\r\n    }\r\n\r\n    //외부 클릭 readonly 변경\r\n    const inputLostFocusEventHandler = (e) => {\r\n        setReadOnly(true)\r\n    }\r\n\r\n    //투두 수정 버튼 클릭 이벤트 핸들러\r\n    const todoModalEditHandler = (e) => {\r\n        readOnly === false ? setReadOnly(true) : setReadOnly(false);\r\n        setModalActiveIndex(null);\r\n    }\r\n\r\n    //모달 수정 클릭 핸들러\r\n    const todoInputChangeHandler = (e) => {\r\n        // console.log(\"입력 정보 \", e.currentTarget.value)\r\n    \r\n        const goal_id = parseInt(e.currentTarget.dataset.goalid);\r\n        const todo_id = parseInt(e.currentTarget.dataset.todoid);\r\n    \r\n    \r\n        let current_value = e.currentTarget.value;\r\n    \r\n        todoDataArray.map(data=>\r\n            data.todos.map(todo=>{\r\n                if(todo.goalId === goal_id && todo.id === todo_id){\r\n                    todo.title = current_value;\r\n                }\r\n            })\r\n        )\r\n        setDtTodos(todoDataArray) ;//setDtTodos 이용해 state 변경\r\n    }\r\n\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return (\r\n        <div className=\"todos-list-box\" data-todos={todos}>\r\n            <TodoModal index={index} modalActive={modalActiveIndex} todos={todos} setModalActiveIndex={setModalActiveIndex} \r\n            readOnlyHandler={readOnlyHandler} todoModalEditHandler={todoModalEditHandler}\r\n            /> \r\n            <LikeListModal index={index} likeModalActive={likeModalActiveIndex}\r\n            likeModalActiveIndex={likeModalActiveIndex} setLikeModalActiveIndex={setLikeModalActiveIndex} likesUser={todos.likes} />\r\n\r\n            <div className=\"goals-listItem-text-wrap\" \r\n            id={todos.todoId}\r\n            data-index={todos.orderNo}>\r\n                    {todos.checkYn === 'Y' ?  \r\n                    <CheckBoxIcon data-goalid={todos.goalId} data-todoid={todos.todoId} className=\"todos-list-check-icon\" data-check={todos.checkYn} onClick={onClickTodoCheckYn}\r\n                    /> : \r\n                    <CheckBoxOutlineBlankIcon data-goalid={todos.goalId} data-todoid={todos.todoId} className=\"todos-list-check-icon\"\r\n                    data-check={todos.checkYn} onClick={onClickTodoCheckYn}\r\n                    /> }\r\n                        \r\n            <TodoList todos={todos} \r\n            readOnly={readOnly}\r\n            // ref={inputElement}\r\n            activeHandler={activeHandler}\r\n            likeActiveHandler={likeActiveHandler}\r\n            todoInputChangeHandler={todoInputChangeHandler} inputLostFocusEventHandler={inputLostFocusEventHandler} enterKeyEventHandler={enterKeyEventHandler} />\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n} \r\n\r\nconst TodoList = React.forwardRef((props, ref) => {\r\n  \r\n    const inputRef = useRef(null);\r\n\r\n    const todos = props.todos;\r\n    const readOnly = props.readOnly;\r\n    const activeHandler = props.activeHandler;\r\n    const likeActiveHandler = props.likeActiveHandler;\r\n    const todoInputChangeHandler = props.todoInputChangeHandler;\r\n    const inputLostFocusEventHandler = props.inputLostFocusEventHandler;\r\n    const enterKeyEventHandler = props.enterKeyEventHandler;\r\n\r\n\r\n    return (\r\n        <div className=\"todos-list-wrap\">\r\n            <input\r\n            className=\"todos-list-input\" key={todos.todoId} id=\"todo-input\" type=\"text\" \r\n            maxLength=\"50\"\r\n            size={inputRef.current?.value.length}\r\n            ref={inputRef}\r\n            name={todos.title} \r\n            data-orderno={todos.orderNo}\r\n            data-goalid={todos.goalId} \r\n            data-todoid={todos.id} \r\n            value={todos.title} \r\n            readOnly={readOnly}\r\n            onClick={()=>activeHandler(todos.id)}\r\n            onChange={todoInputChangeHandler}\r\n            onBlur={inputLostFocusEventHandler}\r\n            onKeyDown={enterKeyEventHandler}\r\n            />\r\n                {/* 만약 계정 주인이면 좋아요 누른 사람 보여주고, 다른 계정 유저면 좋아요 클릭되기 */}\r\n            <Button className=\"todos-list-like-btn\" onClick={()=>{likeActiveHandler(todos.id)}}><ThumbUpAltIcon  />\r\n            <span className=\"todos-list-like-num\">{todos.likes.length}</span>\r\n            </Button>\r\n        </div>\r\n        )\r\n})","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\RoutinesTodos.js",["288","289","290"],"import React, {  useRef, useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nimport EditRoutinesForm from './EditRoutinesForm';\r\n\r\n\r\nexport default function RoutinesTodos (props) {\r\n\r\n\r\n    const todos = props.todos; \r\n    const index = props.todos.todoId;\r\n    const isTodoSelected = props.isTodoSelected;\r\n    const [readOnly, setReadOnly] = useState(true);\r\n\r\n      \r\n    //엔터키 인식 readonly 변경\r\n    const enterKeyEventHandler = (e) => {\r\n        if(e.key === 'Enter' || e.code === 'NumpadEnter'){ \r\n            setReadOnly(true)\r\n        }\r\n    }\r\n  \r\n    // const readOnlyHandler = (index) => {\r\n    //     if (index === modalActiveIndex) {\r\n    //       setModalActiveIndex(null);\r\n    //     } else {\r\n    //       setModalActiveIndex(index);\r\n    //     }\r\n    //   }\r\n\r\n    return (\r\n        <div className=\"todos-list-box\" data-todos={todos} key={index}>\r\n                    <div className=\"goals-listItem-text-wrap\">\r\n                        {todos.check_yn === 'y' ?  <CheckBoxIcon className=\"todos-list-check-icon\" /> : <CheckBoxOutlineBlankIcon className=\"todos-list-check-icon\" /> }\r\n                        <TodoList \r\n                        todos={todos} \r\n                        index={index}\r\n                        readOnly={readOnly}\r\n                        setReadOnly={setReadOnly}\r\n                        isTodoSelected={isTodoSelected}\r\n                        enterKeyEventHandler={enterKeyEventHandler} />\r\n                        \r\n                    </div>\r\n                    {!readOnly ? (<>\r\n                    <EditRoutinesForm todos={todos} goalId={todos.goalId} todoId={todos.id} set\r\n                    ReadOnly={setReadOnly} /> \r\n                    </>) :\r\n                    null} \r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\nconst TodoList = React.forwardRef((props, ref) => {\r\n  \r\n    const inputRef = useRef(null);\r\n    const todos = props.todos;\r\n    const index = parseInt(props.index-1);\r\n    const readOnly = props.readOnly;\r\n    const setReadOnly = props.setReadOnly;\r\n    const isTodoSelected = props.isTodoSelected;\r\n    \r\n    const todoSelectedHandler = () => {\r\n      setReadOnly(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <input\r\n        className=\"todos-list-input\" key={todos.todoId} id=\"todo-input\" type=\"text\" \r\n        maxLength=\"50\"\r\n        size={inputRef.current?.value.length}\r\n        ref={inputRef}\r\n        name={todos.title} \r\n        data-index={index}\r\n        data-orderno={todos.orderNo}\r\n        data-goalid={todos.goalId} \r\n        data-todoid={todos.todoId} \r\n        value={todos.title} \r\n        readOnly={readOnly}\r\n        onClick={todoSelectedHandler}\r\n        />\r\n        \r\n        </>\r\n        )\r\n})","C:\\Users\\soomin\\clonemate-front\\src\\api\\apiCommunicate.js",["291","292","293","294"],"import axios from 'axios';\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { objFeedCalendarOverview , objDatesData} from \"../atoms/todoData\";\r\n\r\n\r\nexport const getTodosDataSample = async () => {\r\n\r\n  //axios\r\n  await axios.get('https://jsonplaceholder.typicode.com/todos/1')\r\n  .then((Response)=>{console.log(Response.data)})\r\n  .then((result)=>{console.log(result)})\r\n  .catch((Error)=>{console.log(Error)})\r\n\r\n  return Response.data\r\n} \r\n\r\n\r\n/* ------------------------------------예시 종료---------------------------------------- */\r\n\r\n/* state 관리 */\r\n\r\n\r\n/* 공통 변수 선언 */\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"Connection\": \"keep-alive\",\r\n  \"X-Requested-With\": \"XMLHttpRequest\"\r\n}\r\n\r\nconst userHost = 'https://clonetodo.herokuapp.com';\r\nconst todoHost = 'https://clonetodo.herokuapp.com/api/v1';\r\n\r\n//POST 메서드로 전송할 데이터\r\n// let formData = new FormData(); \r\n// formData.append('key', value); // key-value (키-값)의 형태로 데이터 추가함\r\n\r\n/* 캘린더 API 통신 시작 */\r\n\r\n//GET 캘린더 데이터 가져오기\r\n//dateYm=yyyy-mm\r\nexport const getTodosOverviewData = async (numUserId,localDate) => {\r\n\r\n  //axios\r\n  await axios({\r\n    method: `GET`,\r\n    url: `${todoHost}/todos/overview`,\r\n    params: {\r\n      userId: numUserId,\r\n      dateYm: localDate\r\n    },\r\n    header: {\r\n      headers\r\n    }\r\n  })\r\n  .then(Response => Response.data)\r\n  .then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null)\r\n  .catch((Error)=>{console.log(Error)})\r\n  \r\n    //완료 되면 res.data가 success true 인지 확인하고 null 부분에 todoData에 objFeedCalendarOverview 값을 바꿔줘야 한다\r\n  return Response.data;\r\n} \r\n\r\n/* 캘린더 API 통신 종료 */\r\n\r\n\r\n\r\n/* 유저 관련 통신 시작 */\r\n\r\n//회원가입\r\nexport const postUserJoin = async (data) => {\r\n\r\n  //axios\r\n  await axios({\r\n    method: `POST`,\r\n    url: `${userHost}/join`,\r\n    params: {\r\n      data\r\n    },\r\n    headers:{\r\n      headers\r\n    }\r\n  })\r\n  .then(res => res.data)\r\n  .then(res => res.data.success ? sessionStorage.setItem(\"userId\", res.data.userId) : console.log(\"로그인 실패\"))\r\n  .then(res => !res.success ? alert(\"아이디와 비밀번호를 확인해주세요\") : window.location.reload(`/signin`))\r\n  \r\n} \r\n\r\n\r\n\r\n//로그인\r\n\r\nexport const postUserLogin = async (data) => {\r\n\r\n  //axios\r\n  await axios({\r\n    method: `POST`,\r\n    url: `${userHost}/login`,\r\n    params: {\r\n      data\r\n    },\r\n    headers:{\r\n      headers\r\n    }\r\n  })\r\n  .then(res => res.data)\r\n  .then(res => !res.success ? alert(\"아이디와 비밀번호를 확인해주세요\") : \r\n   window.location.reload(`/main`))\r\n} \r\n\r\n\r\n/* 유저 관련 통신 종료 */\r\n\r\n\r\n\r\n/* 목표 API 통신 시작 */\r\n\r\n//GET 목표 배열 가져오기\r\n\r\nexport const getGoalsData = async () => {\r\n\r\n  //axios\r\n  await axios({\r\n   method: `GET`,\r\n   url: `${todoHost}/goals`\r\n })\r\n .then(Response => Response.data)\r\n .then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null)\r\n .catch((Error)=>{console.log(Error)})\r\n\r\n return Response.data\r\n}\r\n\r\n//POST 목표 등록하기\r\n\r\n//PATCH 목표 수정하기\r\n\r\n//DELETE 목표 삭제하기\r\n\r\n/* 목표 API 통신 끝 */\r\n\r\n\r\n\r\n/* 투두 API 통신 시작 */\r\n\r\n\r\n\r\n\r\n//GET objTodosDataResult id 값으로 받아오기\r\n\r\n//GET objTodosDataResult 캘린더 날짜로 받아오기\r\n//date=yyyy-mm-dd\r\nexport const getTodosData = async (numUserId,localDate) => {\r\n\r\n   //axios\r\n   await axios({\r\n    method: `GET`,\r\n    url: `${todoHost}/todos/overview`,\r\n    params: {\r\n      userId: sessionStorage.getItem(\"userId\"),\r\n      dateYm: localDate\r\n    }\r\n  })\r\n  .then(Response => Response.data)\r\n  .then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null)\r\n  .catch((Error)=>{console.log(Error)})\r\n  \r\n    //완료 되면 res.data가 success true 인지 확인하고 null 부분에 todoData에 objFeedCalendarOverview 값을 바꿔줘야 한다\r\n  return Response.data\r\n\r\n} \r\n\r\n//POST objTodosDataResult 추가하기\r\n\r\nexport const postTodoCreateData = async (data) => {\r\n  console.log(\"data\", data)\r\n  //axios\r\n  await axios({\r\n    method: `POST`,\r\n    url: `${todoHost}/todos`,\r\n    params: {\r\n      data\r\n    }\r\n  })\r\n  .then(Response => Response.data)\r\n\r\n}\r\n\r\n//PATCH objTodosDataResult id값으로 수정하기\r\n\r\n//PATCH objTodosDataResult 날짜로 수정하기\r\n//date=yyyy-mm-dd\r\n//checkYn=y or n\r\n\r\n//DELETE objTodosDataResult 날짜로 모든 todo값 삭제하기\r\n\r\n//DELETE objTodosDataResult 날짜로 모든 todo값 삭제하기\r\n\r\n/* 투두 API 통신 끝 */\r\n\r\n\r\n\r\n\r\n/* 투두 좋아요 API 통신 시작 */\r\n\r\n//POST 투두 좋아요 클릭 +1 추가하기\r\n\r\n//DELETE 투두 좋아요 클릭 -1 삭제하기\r\n\r\n/* 투두 좋아요 API 통신 끝 */\r\n\r\n\r\n\r\n/* 팔로우 API 통신 시작 */\r\n\r\n//GET followers 가져오기\r\n\r\nexport async function axiosGetFollowers () {\r\n  //axios\r\n\r\n  await axios.get(`/follow/followers`)\r\n  .then((Response)=>{console.log(Response.data)})\r\n  .catch((Error)=>{console.log(Error)})\r\n} \r\n\r\n//GET following 가져오기\r\n\r\nexport async function axiosGetFollowing () {\r\n  //axios\r\n\r\n  await axios.get(`/follow/followings`)\r\n  .then((Response)=>{console.log(Response.data)})\r\n  .catch((Error)=>{console.log(Error)})\r\n} \r\n\r\n//POST 팔로워 수정하기\r\n\r\n//DELETE 팔로워 삭제하기\r\n\r\n/* 팔로우 API 통신 끝 */\r\n\r\n\r\n\r\n/* 좋아요 API 통신 시작 */\r\n\r\n//GET 좋아요 보내기\r\n\r\n//GET 지정 날짜 좋아요 보내기\r\n//date=yyyy-mm-dd\r\n\r\n//POST 좋아요 수정하기\r\n\r\n\r\n//DELETE 좋아요 삭제하기\r\n\r\n\r\n/* 좋아요 API 통신 끝 */\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\RoutineDateModal.js",["295","296","297","298","299"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CalendarPicker from '@mui/lab/CalendarPicker';\r\nimport { ko } from \"date-fns/locale\";\r\nimport { Box, Button, Modal } from \"@mui/material\";\r\n\r\nimport { objDatesData } from \"../../atoms/todoData\";\r\n\r\n\r\nexport default function RoutineDateModal(props) {\r\n\r\n  \r\n    const [dtDate, setDtDate] = useRecoilState(objDatesData)\r\n    const dateActiveBoolean = props.dateActiveBoolean;\r\n    const setDateActiveBoolean = props.setDateActiveBoolean;\r\n    const createRoutinesState = props.createRoutinesState;\r\n    const setCreatRoutinesState = props.setCreatRoutinesState;\r\n    const location = props.location;\r\n    \r\n    const dtSelectedDate = dtDate.selectedNewDate;\r\n    const copy_dtDate = {...dtDate};\r\n\r\n    const week = new Array('일', '월', '화', '수', '목', '금', '토');\r\n\r\n    //선택된 날짜  \r\n\r\n    let selectedYear = dtSelectedDate.getFullYear();\r\n    let selectedMonth = dtSelectedDate.getMonth()+1;\r\n    let selectedDay = dtSelectedDate.getDate();\r\n    let selectedLabel = dtSelectedDate.getDay();\r\n    let todayLabel = week[selectedLabel];\r\n\r\n    const saveSelectedNewDate = (date) => {\r\n        copy_dtDate.selectedNewDate = date;\r\n        setDtDate(copy_dtDate)\r\n    }\r\n\r\n    const calendarOnChangeDate = (e) => {\r\n\r\n        const destination = e.currentTarget.dataset.destination;\r\n        const copy_createRoutinesState = {...createRoutinesState}\r\n        copy_createRoutinesState[destination] = dtSelectedDate.toJSON().substring(0, 10);\r\n        console.log(dtSelectedDate.toJSON().substring(0, 10))\r\n        setCreatRoutinesState(copy_createRoutinesState)\r\n        setDateActiveBoolean(false)\r\n    }\r\n    \r\n    return (\r\n        <Modal open={dateActiveBoolean}\r\n        onClose={setDateActiveBoolean} \r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n        className=\"todo-modal-datePicker-wrap\"\r\n         >\r\n        <Box className=\"todo-modal-datePicker-box\">\r\n            <LocalizationProvider locale={ko} dateAdapter={AdapterDateFns}>\r\n                <div className=\"todo-modal-datePicker-box-title-wrap\">\r\n                    <p>선택한 날짜</p>\r\n                    <span>{selectedYear +`년 `+ selectedMonth +`월 `+ selectedDay+ `일 ` + todayLabel + `요일`}</span>\r\n                </div>\r\n                <CalendarPicker className=\"todo-modal-datePicker\" date={dtSelectedDate} onChange={(date) => saveSelectedNewDate(date)} />\r\n                <div className=\"todo-modal-datePicker-btn-wrap\">\r\n                <Button className=\"todo-modal-datePicker-btn\"\r\n                data-destination={location} onClick={calendarOnChangeDate}>확인</Button> <Button className=\"todo-modal-datePicker-btn\" onClick={()=>{setDateActiveBoolean(false)}}>취소</Button>\r\n                </div>\r\n            </LocalizationProvider>\r\n        </Box>\r\n        </Modal>  \r\n    )\r\n\r\n\r\n}\r\n\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\routines\\RoutineDayModal.js",["300","301","302","303","304","305","306","307","308","309"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Modal, } from \"@mui/material\";\r\n\r\nimport { createRepeatDay } from \"../../atoms/todoData\";\r\n\r\nimport '../../stylesheets/CalendarBox.css';\r\n\r\nexport default function RoutineDayModal(props) {\r\n\r\n\r\n    const dayActiveBoolean = props.dayActiveBoolean;\r\n    const setDayActiveBoolean = props.setDayActiveBoolean;\r\n    const dayArr = props.dayArr;\r\n    const createRoutinesState = props.createRoutinesState;\r\n    const copy_createRoutinesState = {...createRoutinesState}\r\n    const setCreatRoutinesState = props.setCreatRoutinesState;\r\n    const editRoutinesState = props.editRoutinesState;\r\n    const copy_editRoutinesState = {...editRoutinesState}\r\n    const setEditRoutinesState = props.setEditRoutinesState;\r\n    const position = props.position;\r\n    console.log(\"position\",position)\r\n    console.log(\"copy_createRoutinesState\",copy_createRoutinesState)\r\n\r\n\r\n    const checkedHandler = (e) => {\r\n        const id = e.currentTarget.id;\r\n        const name = e.currentTarget.name;\r\n   \r\n        if(position === 'edit'){\r\n            copy_editRoutinesState.repeatDays[name] === 'N' ? copy_editRoutinesState.repeatDays[name] = 'Y' : copy_editRoutinesState.repeatDays[name] = 'N';\r\n            setEditRoutinesState(copy_editRoutinesState)\r\n        } else if(position === 'create'){\r\n            console.log(\"id\", id)\r\n            copy_createRoutinesState[id] === 'n' ? copy_createRoutinesState[id] = 'y' : copy_createRoutinesState[id] = 'n';\r\n            setCreatRoutinesState(copy_createRoutinesState)\r\n        }\r\n        \r\n        \r\n    }\r\n    const resetHandler = () => {\r\n        //아래 전체 리셋은 굳이 안해도 되네요\r\n        // copy_createRoutinesState = {\r\n        //     \"repeatMonYn\":\"n\",\r\n        //     \"repeatTueYn\":\"n\",\r\n        //     \"repeatWenYn\":\"n\",\r\n        //     \"repeatThuYn\":\"n\",\r\n        //     \"repeatFriYn\":\"n\",\r\n        //     \"repeatSatYn\":\"n\",\r\n        //     \"repeatSunYn\":\"n\",\r\n        // }\r\n        // setCreatRoutinesState(copy_createRoutinesState)\r\n        setDayActiveBoolean(false)\r\n    }\r\n\r\n    return (\r\n        <Modal open={dayActiveBoolean}\r\n        onClose={setDayActiveBoolean} \r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n        className=\"todo-modal-datePicker-wrap\"\r\n         >\r\n            <div className=\"todo-modal-dayPicker-box\">\r\n                <h3 className=\"dayPicker-title\">요일 선택</h3>\r\n                    <div\r\n                    aria-labelledby=\"dayPicker-label\"\r\n                    name=\"dayPicker-group\"\r\n                    id=\"dayPicker-checkbox-btn-wrap\"\r\n                    >\r\n                        { \r\n                            position === 'edit' ? ( <React.Fragment>\r\n                                <label key={'repeatMonYn'}>\r\n                                <input type=\"checkbox\" name={'MON'} value={'repeatMonYn'} id={'repeatMonYn'} checked={editRoutinesState.repeatDays['MON'] === 'N' ? false : true} onChange={checkedHandler}/>월\r\n                                </label>\r\n                                <label key={'repeatTueYn'}>\r\n                                <input type=\"checkbox\" name={'TUE'} value={'repeatTueYn'} id={'repeatTueYn'} checked={ editRoutinesState.repeatDays['TUE'] === 'N' ? false : true} onChange={checkedHandler}/>화\r\n                                </label>\r\n                                <label key={'repeatWenYn'}>\r\n                                <input type=\"checkbox\" name={'WEN'} value={'repeatWenYn'} id={'repeatWenYn'} checked={editRoutinesState.repeatDays['WEN'] === 'N' ? false : true} onChange={checkedHandler}/>수\r\n                                </label>\r\n                                <label key={'repeatThuYn'}>\r\n                                <input type=\"checkbox\" name={'THU'} value={'repeatThuYn'} id={'repeatThuYn'} checked={editRoutinesState.repeatDays['THU'] === 'N' ? false : true} onChange={checkedHandler}/>목\r\n                                </label>\r\n                                <label key={'repeatFriYn'}>\r\n                                <input type=\"checkbox\" name={'FRI'} value={'repeatFriYn'} id={'repeatFriYn'} checked={editRoutinesState.repeatDays['FRI'] === 'N' ? false : true} onChange={checkedHandler}/>금\r\n                                </label>\r\n                                <label key={'repeatSatYn'}>\r\n                                <input type=\"checkbox\" name={'SAT'} value={'repeatSatYn'} id={'repeatSatYn'} checked={editRoutinesState.repeatDays['SAT'] === 'N' ? false : true} onChange={checkedHandler}/>토\r\n                                </label>\r\n                                <label key={'repeatSunYn'}>\r\n                                <input type=\"checkbox\" name={'SUN'} value={'repeatSunYn'} id={'repeatSunYn'} checked={editRoutinesState.repeatDays['SUN'] === 'N' ? false : true} onChange={checkedHandler}/>일\r\n                                </label>\r\n                            </React.Fragment>\r\n                            ) : ( <React.Fragment>\r\n                                <label key={'repeatMonYn'}>\r\n                                <input type=\"checkbox\" name={'MON'} value={'repeatMonYn'} id={'repeatMonYn'} checked={copy_createRoutinesState['repeatMonYn'] === 'n' ? false : true} onChange={checkedHandler}/>월\r\n                                </label>\r\n                                <label key={'repeatTueYn'}>\r\n                                <input type=\"checkbox\" name={'TUE'} value={'repeatTueYn'} id={'repeatTueYn'} checked={copy_createRoutinesState['repeatTueYn'] === 'n' ? false : true} onChange={checkedHandler}/>화\r\n                                </label>\r\n                                <label key={'repeatWenYn'}>\r\n                                <input type=\"checkbox\" name={'WEN'} value={'repeatWenYn'} id={'repeatWenYn'} checked={copy_createRoutinesState['repeatWenYn'] === 'n' ? false : true} onChange={checkedHandler}/>수\r\n                                </label>\r\n                                <label key={'repeatThuYn'}>\r\n                                <input type=\"checkbox\" name={'THU'} value={'repeatThuYn'} id={'repeatThuYn'} checked={copy_createRoutinesState['repeatThuYn'] === 'n' ? false : true} onChange={checkedHandler}/>목\r\n                                </label>\r\n                                <label key={'repeatFriYn'}>\r\n                                <input type=\"checkbox\" name={'FRI'} value={'repeatFriYn'} id={'repeatFriYn'} checked={copy_createRoutinesState['repeatFriYn'] === 'n' ? false : true} onChange={checkedHandler}/>금\r\n                                </label>\r\n                                <label key={'repeatSatYn'}>\r\n                                <input type=\"checkbox\" name={'SAT'} value={'repeatSatYn'} id={'repeatSatYn'} checked={copy_createRoutinesState['repeatSatYn'] === 'n' ? false : true} onChange={checkedHandler}/>토\r\n                                </label>\r\n                                <label key={'repeatSunYn'}>\r\n                                <input type=\"checkbox\" name={'SUN'} value={'repeatSunYn'} id={'repeatSunYn'} checked={copy_createRoutinesState['repeatSunYn'] === 'n' ? false : true} onChange={checkedHandler}/>일\r\n                                </label>\r\n                            </React.Fragment>\r\n                        )\r\n                        }\r\n                    </div>\r\n                   <div className=\"dayPicker-btn-wrap\">\r\n                    <Button className=\"dayPicker-btn\" onClick={()=>{setDayActiveBoolean(false)}}>확인</Button>\r\n                    <Button className=\"dayPicker-btn\" onClick={resetHandler}>취소</Button>\r\n                    </div>  \r\n            </div>\r\n           \r\n        </Modal>  \r\n    )\r\n\r\n\r\n}\r\n\r\n","C:\\Users\\soomin\\clonemate-front\\src\\api\\API.js",["310"],"import axios from 'axios';\r\n\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\nav\\Setting.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\main\\LikeListModal.js",["311","312","313","314","315","316","317"],"import { Modal } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\n\r\nexport function LikeListModal (props) {\r\n\r\n    /* hook 선언 시작 */\r\n\r\n    const history = useHistory();\r\n\r\n    /* hook 선언 종료 */\r\n\r\n    /* state 선언 시작 */\r\n\r\n\r\n    /* atom 선언 시작 */\r\n\r\n\r\n    /* atom 선언 종료 */\r\n\r\n    const index = props.index;\r\n    const likesUser = props.likesUser;\r\n    const likeModalActiveIndex = props.likeModalActiveIndex;\r\n    const setLikeModalActiveIndex = props.setLikeModalActiveIndex;\r\n    // console.log(likesUser)\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    //모달 onoff 핸들러\r\n    const modalActive = props.modalActive;\r\n\r\n    //캘린더 onoff 핸들러\r\n    const setModalActiveIndex = props.setModalActiveIndex;\r\n\r\n\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return(\r\n        <>\r\n        <Modal open={likeModalActiveIndex}\r\n        onClose={()=>{setLikeModalActiveIndex(false)}}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n        className=\"feed-todo-modal-box\"\r\n         >\r\n        \r\n            <ul className=\"like-todo-modal-wrap\" >\r\n            <h1>좋아요</h1>\r\n\r\n                {likesUser.map((data)=>{\r\n                    const userInfo = data.user\r\n                    const uriParams = userInfo.account\r\n                    return (\r\n                        <li className=\"like-todo-modal-data\">\r\n                            <Link to={uriParams}>\r\n                                <p>{userInfo.name}</p>\r\n                                <p>{userInfo.introText}</p>\r\n                            </Link>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n\r\n        </Modal>  \r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\TermUse.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\Policy.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\Announce.js",[],"C:\\Users\\soomin\\clonemate-front\\src\\components\\tabmenu\\Text.js",["318"],"import React from 'react';\r\n\r\nimport { Button } from \"@mui/material\";\r\nimport Divider from \"@mui/material/Divider\";\r\nimport NavigateNextIcon from '@mui/icons-material/NavigateNext';\r\n\r\nimport '../../stylesheets/Setting.css';\r\n\r\n\r\nexport default function TextInfo() {\r\n\r\n/* 함수 시작 */\r\n\r\n  //컴포넌트로 이동 함수 (파라미터 추가)\r\n  const moveTermuse = (e) => {\r\n    window.location.replace(`/termUse`)\r\n  }\r\n  const movePolicy = (e) => {\r\n    window.location.replace(`/policy`)\r\n  }\r\n  const moveAnnouncements = (e) => {\r\n    window.location.replace(`/`)\r\n  }\r\n\r\n /* 함수 종료 */\r\n\r\n    \r\n    return (\r\n        <div className='setting-settings-list-wrap' >\r\n            <Button className=\"setting-list-box\" onClick={moveTermuse} sx={{ color: \"black\" }}>\r\n                \r\n                <div className=\"setting-list-button\" >\r\n\r\n                    <div className=\"settings-list-text\"><p>이용약관</p>\r\n                    </div>\r\n\r\n                </div>\r\n                <NavigateNextIcon className=\"setting-list-arrow\" fontSize=\"small\" sx={{ color: \"lightgray\" }} />\r\n            \r\n            </Button>\r\n            <Divider/>\r\n            \r\n            <Button className=\"setting-list-box\" onClick={movePolicy} sx={{ color: \"black\" }}>\r\n                <div className=\"setting-list-button\" >\r\n                    \r\n                    <div className=\"settings-list-text\"><p>개인정보 정책</p>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <NavigateNextIcon className=\"setting-list-arrow\" fontSize=\"small\" sx={{ color: \"lightgray\" }} />\r\n            </Button>\r\n            <Divider/>\r\n\r\n            <Button className=\"setting-list-box\" sx={{ color: \"black\" }}>\r\n                <div className=\"setting-list-button\" >\r\n                    \r\n                    <div className=\"settings-list-text\"><p>오픈소스</p>\r\n                    </div>\r\n                    \r\n                </div>\r\n                \r\n                <NavigateNextIcon className=\"setting-list-arrow\" fontSize=\"small\" sx={{ color: \"lightgray\" }} />\r\n            </Button>\r\n            <Divider />\r\n\r\n    \r\n\r\n        </div>\r\n    )\r\n\r\n}",{"ruleId":"319","replacedBy":"320"},{"ruleId":"321","replacedBy":"322"},{"ruleId":"323","severity":1,"message":"324","line":30,"column":9,"nodeType":"325","messageId":"326","endLine":30,"endColumn":11},{"ruleId":"323","severity":1,"message":"327","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":17},{"ruleId":"323","severity":1,"message":"327","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":17},{"ruleId":"323","severity":1,"message":"328","line":17,"column":10,"nodeType":"325","messageId":"326","endLine":17,"endColumn":12},{"ruleId":"329","severity":1,"message":"330","line":35,"column":37,"nodeType":"331","messageId":"332","endLine":35,"endColumn":39},{"ruleId":"333","severity":1,"message":"334","line":38,"column":8,"nodeType":"335","endLine":38,"endColumn":10,"suggestions":"336"},{"ruleId":"323","severity":1,"message":"337","line":81,"column":9,"nodeType":"325","messageId":"326","endLine":81,"endColumn":16},{"ruleId":"338","severity":1,"message":"339","line":107,"column":60,"nodeType":"340","messageId":"341","endLine":107,"endColumn":62},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"343","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":24},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"344","line":1,"column":28,"nodeType":"325","messageId":"326","endLine":1,"endColumn":36},{"ruleId":"323","severity":1,"message":"345","line":3,"column":10,"nodeType":"325","messageId":"326","endLine":3,"endColumn":13},{"ruleId":"323","severity":1,"message":"346","line":3,"column":23,"nodeType":"325","messageId":"326","endLine":3,"endColumn":27},{"ruleId":"323","severity":1,"message":"347","line":3,"column":29,"nodeType":"325","messageId":"326","endLine":3,"endColumn":37},{"ruleId":"323","severity":1,"message":"348","line":3,"column":39,"nodeType":"325","messageId":"326","endLine":3,"endColumn":51},{"ruleId":"323","severity":1,"message":"349","line":8,"column":3,"nodeType":"325","messageId":"326","endLine":8,"endColumn":21},{"ruleId":"323","severity":1,"message":"350","line":18,"column":3,"nodeType":"325","messageId":"326","endLine":18,"endColumn":12},{"ruleId":"323","severity":1,"message":"351","line":19,"column":3,"nodeType":"325","messageId":"326","endLine":19,"endColumn":11},{"ruleId":"323","severity":1,"message":"352","line":35,"column":7,"nodeType":"325","messageId":"326","endLine":35,"endColumn":15},{"ruleId":"329","severity":1,"message":"353","line":128,"column":28,"nodeType":"331","messageId":"354","endLine":128,"endColumn":30},{"ruleId":"323","severity":1,"message":"355","line":197,"column":9,"nodeType":"325","messageId":"326","endLine":197,"endColumn":14},{"ruleId":"323","severity":1,"message":"337","line":19,"column":5,"nodeType":"325","messageId":"326","endLine":19,"endColumn":12},{"ruleId":"323","severity":1,"message":"356","line":25,"column":15,"nodeType":"325","messageId":"326","endLine":25,"endColumn":25},{"ruleId":"323","severity":1,"message":"357","line":27,"column":5,"nodeType":"325","messageId":"326","endLine":27,"endColumn":11},{"ruleId":"323","severity":1,"message":"358","line":34,"column":22,"nodeType":"325","messageId":"326","endLine":34,"endColumn":39},{"ruleId":"323","severity":1,"message":"342","line":1,"column":19,"nodeType":"325","messageId":"326","endLine":1,"endColumn":28},{"ruleId":"323","severity":1,"message":"359","line":13,"column":12,"nodeType":"325","messageId":"326","endLine":13,"endColumn":18},{"ruleId":"323","severity":1,"message":"360","line":13,"column":20,"nodeType":"325","messageId":"326","endLine":13,"endColumn":29},{"ruleId":"323","severity":1,"message":"361","line":20,"column":11,"nodeType":"325","messageId":"326","endLine":20,"endColumn":18},{"ruleId":"323","severity":1,"message":"362","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":22},{"ruleId":"323","severity":1,"message":"344","line":1,"column":28,"nodeType":"325","messageId":"326","endLine":1,"endColumn":36},{"ruleId":"323","severity":1,"message":"363","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":20},{"ruleId":"323","severity":1,"message":"364","line":3,"column":26,"nodeType":"325","messageId":"326","endLine":3,"endColumn":40},{"ruleId":"323","severity":1,"message":"346","line":4,"column":19,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"333","severity":1,"message":"365","line":31,"column":5,"nodeType":"335","endLine":31,"endColumn":14,"suggestions":"366"},{"ruleId":"323","severity":1,"message":"364","line":7,"column":26,"nodeType":"325","messageId":"326","endLine":7,"endColumn":40},{"ruleId":"323","severity":1,"message":"367","line":118,"column":30,"nodeType":"325","messageId":"326","endLine":118,"endColumn":55},{"ruleId":"323","severity":1,"message":"368","line":119,"column":6,"nodeType":"325","messageId":"326","endLine":119,"endColumn":26},{"ruleId":"323","severity":1,"message":"369","line":119,"column":28,"nodeType":"325","messageId":"326","endLine":119,"endColumn":51},{"ruleId":"323","severity":1,"message":"370","line":146,"column":11,"nodeType":"325","messageId":"326","endLine":146,"endColumn":30},{"ruleId":"323","severity":1,"message":"371","line":151,"column":11,"nodeType":"325","messageId":"326","endLine":151,"endColumn":22},{"ruleId":"333","severity":1,"message":"372","line":154,"column":3,"nodeType":"335","endLine":154,"endColumn":17,"suggestions":"373"},{"ruleId":"323","severity":1,"message":"374","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":16},{"ruleId":"323","severity":1,"message":"356","line":25,"column":19,"nodeType":"325","messageId":"326","endLine":25,"endColumn":29},{"ruleId":"323","severity":1,"message":"375","line":28,"column":18,"nodeType":"325","messageId":"326","endLine":28,"endColumn":27},{"ruleId":"323","severity":1,"message":"376","line":45,"column":9,"nodeType":"325","messageId":"326","endLine":45,"endColumn":18},{"ruleId":"377","severity":1,"message":"378","line":168,"column":28,"nodeType":"379","messageId":"380","endLine":168,"endColumn":72},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"323","severity":1,"message":"381","line":14,"column":20,"nodeType":"325","messageId":"326","endLine":14,"endColumn":29},{"ruleId":"329","severity":1,"message":"330","line":66,"column":41,"nodeType":"331","messageId":"332","endLine":66,"endColumn":43},{"ruleId":"329","severity":1,"message":"353","line":74,"column":35,"nodeType":"331","messageId":"354","endLine":74,"endColumn":37},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"382","line":1,"column":38,"nodeType":"325","messageId":"326","endLine":1,"endColumn":44},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"323","severity":1,"message":"357","line":15,"column":16,"nodeType":"325","messageId":"326","endLine":15,"endColumn":22},{"ruleId":"323","severity":1,"message":"381","line":15,"column":24,"nodeType":"325","messageId":"326","endLine":15,"endColumn":33},{"ruleId":"323","severity":1,"message":"383","line":16,"column":16,"nodeType":"325","messageId":"326","endLine":16,"endColumn":23},{"ruleId":"323","severity":1,"message":"356","line":16,"column":25,"nodeType":"325","messageId":"326","endLine":16,"endColumn":35},{"ruleId":"329","severity":1,"message":"330","line":48,"column":45,"nodeType":"331","messageId":"332","endLine":48,"endColumn":47},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"382","line":1,"column":38,"nodeType":"325","messageId":"326","endLine":1,"endColumn":44},{"ruleId":"329","severity":1,"message":"384","line":93,"column":30,"nodeType":"331","messageId":"332","endLine":93,"endColumn":32},{"ruleId":"329","severity":1,"message":"353","line":122,"column":27,"nodeType":"331","messageId":"354","endLine":122,"endColumn":29},{"ruleId":"329","severity":1,"message":"353","line":134,"column":27,"nodeType":"331","messageId":"354","endLine":134,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":236,"column":18,"nodeType":"387","messageId":"388","endLine":236,"endColumn":62},{"ruleId":"329","severity":1,"message":"330","line":67,"column":32,"nodeType":"331","messageId":"332","endLine":67,"endColumn":34},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"389","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":19},{"ruleId":"323","severity":1,"message":"343","line":3,"column":10,"nodeType":"325","messageId":"326","endLine":3,"endColumn":24},{"ruleId":"323","severity":1,"message":"390","line":11,"column":8,"nodeType":"325","messageId":"326","endLine":11,"endColumn":20},{"ruleId":"323","severity":1,"message":"391","line":12,"column":8,"nodeType":"325","messageId":"326","endLine":12,"endColumn":11},{"ruleId":"323","severity":1,"message":"392","line":18,"column":10,"nodeType":"325","messageId":"326","endLine":18,"endColumn":28},{"ruleId":"323","severity":1,"message":"393","line":44,"column":7,"nodeType":"325","messageId":"326","endLine":44,"endColumn":13},{"ruleId":"323","severity":1,"message":"394","line":156,"column":10,"nodeType":"325","messageId":"326","endLine":156,"endColumn":18},{"ruleId":"323","severity":1,"message":"395","line":156,"column":20,"nodeType":"325","messageId":"326","endLine":156,"endColumn":31},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"343","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":24},{"ruleId":"323","severity":1,"message":"396","line":5,"column":8,"nodeType":"325","messageId":"326","endLine":5,"endColumn":22},{"ruleId":"323","severity":1,"message":"348","line":6,"column":8,"nodeType":"325","messageId":"326","endLine":6,"endColumn":20},{"ruleId":"323","severity":1,"message":"345","line":11,"column":8,"nodeType":"325","messageId":"326","endLine":11,"endColumn":11},{"ruleId":"323","severity":1,"message":"344","line":1,"column":28,"nodeType":"325","messageId":"326","endLine":1,"endColumn":36},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"323","severity":1,"message":"390","line":5,"column":8,"nodeType":"325","messageId":"326","endLine":5,"endColumn":20},{"ruleId":"323","severity":1,"message":"397","line":7,"column":8,"nodeType":"325","messageId":"326","endLine":7,"endColumn":21},{"ruleId":"323","severity":1,"message":"398","line":19,"column":13,"nodeType":"325","messageId":"326","endLine":19,"endColumn":21},{"ruleId":"323","severity":1,"message":"399","line":19,"column":23,"nodeType":"325","messageId":"326","endLine":19,"endColumn":35},{"ruleId":"323","severity":1,"message":"400","line":19,"column":37,"nodeType":"325","messageId":"326","endLine":19,"endColumn":43},{"ruleId":"323","severity":1,"message":"401","line":19,"column":45,"nodeType":"325","messageId":"326","endLine":19,"endColumn":50},{"ruleId":"329","severity":1,"message":"353","line":84,"column":31,"nodeType":"331","messageId":"354","endLine":84,"endColumn":33},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"344","line":1,"column":28,"nodeType":"325","messageId":"326","endLine":1,"endColumn":36},{"ruleId":"323","severity":1,"message":"382","line":1,"column":38,"nodeType":"325","messageId":"326","endLine":1,"endColumn":44},{"ruleId":"323","severity":1,"message":"342","line":2,"column":17,"nodeType":"325","messageId":"326","endLine":2,"endColumn":26},{"ruleId":"323","severity":1,"message":"382","line":2,"column":38,"nodeType":"325","messageId":"326","endLine":2,"endColumn":44},{"ruleId":"329","severity":1,"message":"353","line":61,"column":32,"nodeType":"331","messageId":"354","endLine":61,"endColumn":34},{"ruleId":"329","severity":1,"message":"353","line":83,"column":41,"nodeType":"331","messageId":"354","endLine":83,"endColumn":43},{"ruleId":"323","severity":1,"message":"356","line":156,"column":19,"nodeType":"325","messageId":"326","endLine":156,"endColumn":29},{"ruleId":"385","severity":1,"message":"386","line":162,"column":18,"nodeType":"387","messageId":"388","endLine":162,"endColumn":62},{"ruleId":"329","severity":1,"message":"353","line":183,"column":38,"nodeType":"331","messageId":"354","endLine":183,"endColumn":40},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"323","severity":1,"message":"402","line":8,"column":30,"nodeType":"325","messageId":"326","endLine":8,"endColumn":42},{"ruleId":"323","severity":1,"message":"337","line":21,"column":9,"nodeType":"325","messageId":"326","endLine":21,"endColumn":16},{"ruleId":"329","severity":1,"message":"353","line":77,"column":30,"nodeType":"331","messageId":"354","endLine":77,"endColumn":32},{"ruleId":"329","severity":1,"message":"353","line":119,"column":32,"nodeType":"331","messageId":"354","endLine":119,"endColumn":34},{"ruleId":"323","severity":1,"message":"343","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":24},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"323","severity":1,"message":"403","line":65,"column":11,"nodeType":"325","messageId":"326","endLine":65,"endColumn":25},{"ruleId":"323","severity":1,"message":"343","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":24},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"323","severity":1,"message":"404","line":3,"column":10,"nodeType":"325","messageId":"326","endLine":3,"endColumn":33},{"ruleId":"323","severity":1,"message":"402","line":3,"column":36,"nodeType":"325","messageId":"326","endLine":3,"endColumn":48},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"344","line":1,"column":28,"nodeType":"325","messageId":"326","endLine":1,"endColumn":36},{"ruleId":"323","severity":1,"message":"382","line":1,"column":38,"nodeType":"325","messageId":"326","endLine":1,"endColumn":44},{"ruleId":"323","severity":1,"message":"364","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":40},{"ruleId":"385","severity":1,"message":"386","line":25,"column":18,"nodeType":"387","messageId":"388","endLine":25,"endColumn":62},{"ruleId":"323","severity":1,"message":"342","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"344","line":1,"column":28,"nodeType":"325","messageId":"326","endLine":1,"endColumn":36},{"ruleId":"323","severity":1,"message":"382","line":1,"column":38,"nodeType":"325","messageId":"326","endLine":1,"endColumn":44},{"ruleId":"323","severity":1,"message":"405","line":2,"column":18,"nodeType":"325","messageId":"326","endLine":2,"endColumn":26},{"ruleId":"323","severity":1,"message":"406","line":2,"column":28,"nodeType":"325","messageId":"326","endLine":2,"endColumn":39},{"ruleId":"323","severity":1,"message":"407","line":2,"column":41,"nodeType":"325","messageId":"326","endLine":2,"endColumn":57},{"ruleId":"323","severity":1,"message":"408","line":2,"column":59,"nodeType":"325","messageId":"326","endLine":2,"endColumn":68},{"ruleId":"323","severity":1,"message":"409","line":2,"column":70,"nodeType":"325","messageId":"326","endLine":2,"endColumn":79},{"ruleId":"323","severity":1,"message":"410","line":4,"column":10,"nodeType":"325","messageId":"326","endLine":4,"endColumn":25},{"ruleId":"323","severity":1,"message":"411","line":13,"column":11,"nodeType":"325","messageId":"326","endLine":13,"endColumn":17},{"ruleId":"323","severity":1,"message":"412","line":1,"column":8,"nodeType":"325","messageId":"326","endLine":1,"endColumn":13},{"ruleId":"323","severity":1,"message":"344","line":2,"column":17,"nodeType":"325","messageId":"326","endLine":2,"endColumn":25},{"ruleId":"323","severity":1,"message":"343","line":5,"column":10,"nodeType":"325","messageId":"326","endLine":5,"endColumn":24},{"ruleId":"323","severity":1,"message":"364","line":5,"column":26,"nodeType":"325","messageId":"326","endLine":5,"endColumn":40},{"ruleId":"323","severity":1,"message":"337","line":12,"column":11,"nodeType":"325","messageId":"326","endLine":12,"endColumn":18},{"ruleId":"323","severity":1,"message":"355","line":24,"column":11,"nodeType":"325","messageId":"326","endLine":24,"endColumn":16},{"ruleId":"323","severity":1,"message":"413","line":33,"column":11,"nodeType":"325","messageId":"326","endLine":33,"endColumn":22},{"ruleId":"323","severity":1,"message":"414","line":36,"column":11,"nodeType":"325","messageId":"326","endLine":36,"endColumn":30},{"ruleId":"323","severity":1,"message":"415","line":21,"column":9,"nodeType":"325","messageId":"326","endLine":21,"endColumn":26},"no-native-reassign",["416"],"no-negated-in-lhs",["417"],"no-unused-vars","'id' is assigned a value but never used.","Identifier","unusedVar","'useForm' is defined but never used.","'id' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'goal' and 'originID'. Either include them or remove the dependency array.","ArrayExpression",["418"],"'history' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useRecoilState' is defined but never used.","'useState' is defined but never used.","'Box' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'resetServerContext' is defined but never used.","'goalsData' is defined but never used.","'todoData' is defined but never used.","'dateData' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'index' is assigned a value but never used.","'setDtTodos' is assigned a value but never used.","'dtDate' is assigned a value but never used.","'setIsTodoSelected' is assigned a value but never used.","'result' is assigned a value but never used.","'setResult' is assigned a value but never used.","'onError' is assigned a value but never used.","'appendErrors' is defined but never used.","'useHistory' is defined but never used.","'useRecoilValue' is defined but never used.","React Hook useEffect has a missing dependency: 'setDtTodos'. Either include it or remove the dependency array.",["419"],"'setDtFeedCalendarOverview' is assigned a value but never used.","'dtObjTodosDataResult' is assigned a value but never used.","'setDtObjTodosDataResult' is assigned a value but never used.","'newTodoOverviewData' is assigned a value but never used.","'newTodoData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'USER_NUM_ID', 'copy_objDate', and 'setObjDate'. Either include them or remove the dependency array.",["420"],"'Button' is defined but never used.","'setDtUser' is assigned a value but never used.","'moveGoals' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'setDtDate' is assigned a value but never used.","'useRef' is defined but never used.","'dtTodos' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'useParams' is defined but never used.","'CheckBoxIcon' is defined but never used.","'API' is defined but never used.","'getTodosDataSample' is defined but never used.","'getAPI' is assigned a value but never used.","'testdata' is assigned a value but never used.","'settestdata' is assigned a value but never used.","'ListItemButton' is defined but never used.","'MoreHorizIcon' is defined but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","'watch' is assigned a value but never used.","'objDatesData' is defined but never used.","'isTodoSelected' is assigned a value but never used.","'objFeedCalendarOverview' is defined but never used.","'Checkbox' is defined but never used.","'FormControl' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'FormLabel' is defined but never used.","'createRepeatDay' is defined but never used.","'dayArr' is assigned a value but never used.","'axios' is defined but never used.","'modalActive' is assigned a value but never used.","'setModalActiveIndex' is assigned a value but never used.","'moveAnnouncements' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"421","fix":"422"},{"desc":"423","fix":"424"},{"desc":"425","fix":"426"},"Update the dependencies array to be: [goal, originID]",{"range":"427","text":"428"},"Update the dependencies array to be: [dtTodos, setDtTodos]",{"range":"429","text":"430"},"Update the dependencies array to be: [USER_NUM_ID, copy_objDate, selectedDate, setObjDate]",{"range":"431","text":"432"},[1339,1341],"[goal, originID]",[964,973],"[dtTodos, setDtTodos]",[4410,4424],"[USER_NUM_ID, copy_objDate, selectedDate, setObjDate]"]