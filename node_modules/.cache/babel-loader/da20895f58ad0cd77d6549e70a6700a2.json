{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\CalendarBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport '../stylesheets/CalendarBox.css';\nimport { Paper, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\"; // import CalendarPicker from '@mui/lab/CalendarPicker';\n// import AdapterDateFns from '@mui/lab/AdapterDateFns';\n// import LocalizationProvider from '@mui/lab/LocalizationProvider';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const styles = makeStyles(() => ({\n  //define CSS for different date types\n  notInThisMonthDayPaper: {\n    visibility: \"hidden\",\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#00000000\",\n    fontSize: \"0.825em\",\n    textAlign: \"center\",\n    margin: \"11px\",\n    padding: \"1px\"\n  },\n  normalDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#707070\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  normalDayNum: {\n    fontSize: \"0.5em\",\n    textAlign: \"center\",\n    color: \"#707070\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  selectedDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#707070\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  selectedDayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"500\",\n    textAlign: \"center\",\n    textDecoration: \"underline\",\n    color: \"#222\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  todayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#707070\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  todayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"600\",\n    color: \"blue\",\n    textAlign: \"center\",\n    position: \"relative\",\n    top: \"3em\"\n  }\n}));\nexport default function CalendarBox() {\n  _s();\n\n  const today = new Date(); // 오늘 날짜 객체\n\n  const classes = styles(); // import those CSS\n\n  const [selectedDate, setselectedDate] = useState(new Date()); //현재 선택된 날짜 state\n\n  const resultArray = [{\n    date: 1,\n    todoNum: 2\n  }, {\n    date: 15,\n    todoNum: 4\n  }, {\n    date: 27,\n    todoNum: 6\n  }];\n  const todoData = resultArray.map(a => a.date); // 데이터가 있는 날\n\n  console.log(todoData);\n  const todoDataNum = '2'; //날짜 타일 변경 함수\n\n  function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\n    //generate boolean \n    const isHasTodoData = todoData.includes(day.getDate()); //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) \n\n    const howManyTodoData = todoDataNum.includes(day.getDate());\n    console.log('howManyTodoData', howManyTodoData);\n    const isSelected = day.getDate() === selectedDate.getDate();\n    const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth();\n    let dateTile;\n\n    if (isInCurrentMonth) {\n      //conditionally return appropriate Element of date tile.\n      if (isHasTodoData) {\n        dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n          className: isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n            children: day.getDate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"todoDataNum\",\n            children: todoDataNum\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this);\n      } else {\n        dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n          className: isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n            children: [\" \", day.getDate()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 15\n        }, this);\n      }\n    } else {\n      dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.notInThisMonthDayPaper,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n          children: day.getDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this);\n    }\n\n    return dateTile;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    children: /*#__PURE__*/_jsxDEV(DatePicker, {\n      value: selectedDate,\n      onChange: setselectedDate,\n      variant: \"static\" //만든 함수 props로 전달\n      ,\n      renderDay: (day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 11\n  }, this);\n}\n/* renderDate props로 함수가 필요함\r\nday: Date,\r\nselectedDate : Date,\r\nisInCrrentMonth: boolean,\r\ndayComponenssh st: Element\r\n\r\n이 props를 입력한 다음 날짜 타일로 렌더링 할 수 있는 요소를 반환한다.\r\nDatePicker는 이 함수를 표시된 모든 날짜로 호출\r\n\r\n필요한 경우\r\n- 투두가 없는 날 : normal date tile\r\n- 투두가 있는 날 : todo date tile (갯수)\r\n- 투두를 모두 완료한 날 : complete date tile(색상, check✔)\r\n\r\n만든 함수를 enderDate 요소에 지정\r\n그러면 DatePicker가 날짜를 렌더링 하고 날짜 타일을 요청할 때마다 호출해준다. 만든 함수가 날짜를 확인하고 적절한 날짜 타일을 반환한다.\r\n*/\n\n_s(CalendarBox, \"YM9khZ6NsSl5kGWsTo0bZG7qC7g=\");\n\n_c = CalendarBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarBox\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/CalendarBox.js"],"names":["React","useState","DateFnsUtils","DatePicker","MuiPickersUtilsProvider","Paper","Grid","makeStyles","styles","notInThisMonthDayPaper","visibility","width","height","backgroundColor","fontSize","textAlign","margin","padding","normalDayPaper","cursor","normalDayNum","color","position","top","selectedDayPaper","selectedDayNum","fontWeight","textDecoration","todayPaper","todayNum","CalendarBox","today","Date","classes","selectedDate","setselectedDate","resultArray","date","todoNum","todoData","map","a","console","log","todoDataNum","getDayElement","day","isInCurrentMonth","dayComponent","isHasTodoData","includes","getDate","howManyTodoData","isSelected","isToday","getMonth","dateTile"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport '../stylesheets/CalendarBox.css';\r\nimport {Paper, Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\n// import CalendarPicker from '@mui/lab/CalendarPicker';\r\n// import AdapterDateFns from '@mui/lab/AdapterDateFns';\r\n// import LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\n\r\nexport const styles = makeStyles(() => ({ //define CSS for different date types\r\n    notInThisMonthDayPaper: {\r\n        visibility: \"hidden\",\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#00000000\",\r\n        fontSize: \"0.825em\",\r\n        textAlign: \"center\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n    },\r\n    normalDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#707070\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },  \r\n    normalDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    selectedDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#707070\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    selectedDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"500\",\r\n        textAlign: \"center\",\r\n        textDecoration: \"underline\",\r\n        color: \"#222\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    todayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#707070\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    todayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"600\",\r\n        color: \"blue\",\r\n        textAlign: \"center\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n\r\n\r\n}));\r\n\r\n\r\n\r\nexport default function CalendarBox() {\r\n\r\n  const today = new Date(); // 오늘 날짜 객체\r\n  const classes = styles(); // import those CSS\r\n  const [selectedDate, setselectedDate] = useState(new Date()); //현재 선택된 날짜 state\r\n\r\n    const resultArray = [ { date: 1, todoNum: 2}, { date: 15, todoNum: 4}, { date: 27, todoNum: 6} ];\r\n      \r\n\r\n    const todoData = resultArray.map(a => a.date); // 데이터가 있는 날\r\n    console.log(todoData);\r\n    const todoDataNum = '2';\r\n\r\n  //날짜 타일 변경 함수\r\n\r\n  function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\r\n    //generate boolean \r\n    const isHasTodoData = todoData.includes(day.getDate()); \r\n    //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) \r\n    const howManyTodoData = todoDataNum.includes(day.getDate())\r\n    console.log('howManyTodoData', howManyTodoData)\r\n\r\n    const isSelected = day.getDate() === selectedDate.getDate();\r\n    const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth();\r\n\r\n    let dateTile\r\n    if (isInCurrentMonth) { //conditionally return appropriate Element of date tile.\r\n        if (isHasTodoData) {\r\n            dateTile = (\r\n                <Paper className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}>\r\n                    <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                        {day.getDate()}\r\n                    </Grid>\r\n                    <span className=\"todoDataNum\">{todoDataNum}</span>\r\n                </Paper>)\r\n        } else {\r\n            dateTile = (\r\n              <Paper className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}>   \r\n                <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}> {day.getDate()}</Grid>\r\n            </Paper>)\r\n        }\r\n\r\n    } else {\r\n        dateTile = (<Paper className={classes.notInThisMonthDayPaper}>\r\n            <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                {day.getDate()}\r\n            </Grid>\r\n        </Paper>)\r\n    }\r\n    return dateTile\r\n}\r\n\r\n  \r\n\r\n    return(\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <DatePicker\r\n                    value={selectedDate}\r\n                    onChange={setselectedDate}\r\n                    variant=\"static\"\r\n\r\n                    //만든 함수 props로 전달\r\n                    renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)}\r\n\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n    );\r\n}\r\n\r\n/* renderDate props로 함수가 필요함\r\nday: Date,\r\nselectedDate : Date,\r\nisInCrrentMonth: boolean,\r\ndayComponenssh st: Element\r\n\r\n이 props를 입력한 다음 날짜 타일로 렌더링 할 수 있는 요소를 반환한다.\r\nDatePicker는 이 함수를 표시된 모든 날짜로 호출\r\n\r\n필요한 경우\r\n- 투두가 없는 날 : normal date tile\r\n- 투두가 있는 날 : todo date tile (갯수)\r\n- 투두를 모두 완료한 날 : complete date tile(색상, check✔)\r\n\r\n만든 함수를 enderDate 요소에 지정\r\n그러면 DatePicker가 날짜를 렌더링 하고 날짜 타일을 요청할 때마다 호출해준다. 만든 함수가 날짜를 확인하고 적절한 날짜 타일을 반환한다.\r\n*/ \r\n"]},"metadata":{},"sourceType":"module"}