{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\main\\\\Feed.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport CalendarPicker from '@mui/lab/CalendarPicker';\nimport { ko } from \"date-fns/locale\";\nimport FeedTodoGoal from './FeedTodoGoal';\nimport '../../stylesheets/Feed.css';\nimport { Button, List, ListItem, ListItemText, Modal } from \"@mui/material\";\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\nimport { objTodosDataResult, datesData } from \"../../atoms/todoData\";\nimport CreateTodoForm from \"./CreateTodoForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Feed() {\n  _s();\n\n  /* hook 선언 시작 */\n  let history = useHistory();\n  /* hook 선언 종료 */\n\n  /* state 선언 시작 */\n\n  /* atom 시작 */\n  // atom에서 goal+todo 데이터 가져오기\n\n  let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\n  let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\n  let dtDate = useRecoilValue(datesData);\n  /* atom 종료 */\n  //날짜 정보값 dtToday 오늘 dtTomorrow 내일 dtFeedCalendarDate 캘린더에서 선택한 날짜\n  //목표 클릭 여부 확인 배열 생성\n\n  let [isGoalSelected, setIsGoalSelected] = useState(Array(todoDataArray.length).fill(false));\n  /* state 선언 종료 */\n\n  /* 함수 선언 시작 */\n\n  /* 모달 on/off 함수 시작 */\n\n  /* 모달 on/off 함수 종료 */\n  //Todo checkbox 핸들러\n\n  const onClickTodoCheckYn = e => {\n    console.log(e.target);\n  }; //Goal 클릭 핸들러 \n\n\n  const onClickGoalHandler = e => {\n    const index = e.currentTarget.dataset.index;\n    const clicked_arr = Array(todoDataArray.length).fill(false);\n    clicked_arr[index] = true;\n    setIsGoalSelected(clicked_arr);\n  };\n  /* 함수 선언 끝 */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"feed-title\",\n      children: \"Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"goals-list-wrap\",\n      children: todoDataArray.map((data, idx) => {\n        // console.log(\"data[idx].todos.length\", data.todos.length)\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FeedTodoGoal, {\n            data: data,\n            idx: idx,\n            onClickGoalHandler: onClickGoalHandler,\n            onClickTodoCheckYn: onClickTodoCheckYn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), isGoalSelected[idx] ? /*#__PURE__*/_jsxDEV(CreateTodoForm, {\n            dtDate: dtDate,\n            goalId: data.goalId,\n            todoLength: data.todos.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 48\n          }, this) : null]\n        }, void 0, true);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"feed-move-to-routines\",\n      title: \"\\uAE30\\uAC04\\uC774 \\uC788\\uB294 \\uD560 \\uC77C \\uC791\\uC131\\uD558\\uAE30\",\n      onClick: () => {\n        history.push(\"/routines\");\n      },\n      children: /*#__PURE__*/_jsxDEV(BorderColorIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 121\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Feed, \"GPn/dfCZoBx8WItHGccSAUFVdsw=\", false, function () {\n  return [useHistory, useRecoilState, useRecoilValue];\n});\n\n_c = Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/main/Feed.js"],"names":["React","useEffect","useState","useRef","useRecoilState","useRecoilValue","useHistory","useForm","AdapterDateFns","LocalizationProvider","CalendarPicker","ko","FeedTodoGoal","Button","List","ListItem","ListItemText","Modal","BorderColorIcon","objTodosDataResult","datesData","CreateTodoForm","Feed","history","dtTodos","setDtTodos","todoDataArray","JSON","parse","stringify","dtDate","isGoalSelected","setIsGoalSelected","Array","length","fill","onClickTodoCheckYn","e","console","log","target","onClickGoalHandler","index","currentTarget","dataset","clicked_arr","map","data","idx","goalId","todos","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CalendarPicker from '@mui/lab/CalendarPicker';\r\nimport { ko } from \"date-fns/locale\";\r\nimport FeedTodoGoal from './FeedTodoGoal';\r\nimport '../../stylesheets/Feed.css'\r\n\r\nimport {  Button, List, ListItem, ListItemText, Modal, } from \"@mui/material\";\r\nimport BorderColorIcon from '@material-ui/icons/BorderColor';\r\n\r\n\r\nimport { objTodosDataResult, datesData } from \"../../atoms/todoData\";\r\nimport CreateTodoForm from \"./CreateTodoForm\";\r\n\r\nexport default function Feed() {\r\n\r\n/* hook 선언 시작 */\r\n\r\nlet history = useHistory();\r\n\r\n/* hook 선언 종료 */\r\n\r\n/* state 선언 시작 */\r\n\r\n/* atom 시작 */\r\n\r\n    // atom에서 goal+todo 데이터 가져오기\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n    let dtDate = useRecoilValue(datesData);\r\n\r\n/* atom 종료 */\r\n\r\n//날짜 정보값 dtToday 오늘 dtTomorrow 내일 dtFeedCalendarDate 캘린더에서 선택한 날짜\r\n\r\n//목표 클릭 여부 확인 배열 생성\r\nlet [isGoalSelected, setIsGoalSelected] = useState(Array(todoDataArray.length).fill(false) );\r\n\r\n\r\n/* state 선언 종료 */\r\n\r\n/* 함수 선언 시작 */\r\n\r\n/* 모달 on/off 함수 시작 */\r\n\r\n\r\n/* 모달 on/off 함수 종료 */\r\n\r\n//Todo checkbox 핸들러\r\nconst onClickTodoCheckYn = (e) => {\r\n    console.log(e.target)\r\n}\r\n\r\n//Goal 클릭 핸들러 \r\nconst onClickGoalHandler = (e) => {\r\n    const index = e.currentTarget.dataset.index;\r\n    const clicked_arr = Array(todoDataArray.length).fill(false) ;\r\n    clicked_arr[index] = true;\r\n    setIsGoalSelected(clicked_arr)\r\n\r\n}\r\n\r\n\r\n/* 함수 선언 끝 */\r\n\r\n    return (\r\n        <div className='feed-wrap'>\r\n            <h2 className=\"feed-title\">Feed</h2>\r\n            <div className=\"goals-list-wrap\" >\r\n                {\r\n                    todoDataArray.map((data, idx) => {\r\n                        // console.log(\"data[idx].todos.length\", data.todos.length)\r\n                        \r\n                        return <>\r\n                        \r\n                        <FeedTodoGoal \r\n                        data={data} idx={idx}\r\n                        onClickGoalHandler={onClickGoalHandler}\r\n                        onClickTodoCheckYn={onClickTodoCheckYn} \r\n                        />\r\n                        {isGoalSelected[idx] ? <CreateTodoForm \r\n                        dtDate={dtDate} goalId={data.goalId} \r\n                        todoLength={data.todos.length}\r\n                        /> :null}\r\n                        </>\r\n                    })\r\n                    \r\n                }\r\n            </div>\r\n            <button className=\"feed-move-to-routines\" title=\"기간이 있는 할 일 작성하기\" onClick={()=>{history.push(\"/routines\")}}><BorderColorIcon /></button>\r\n        </div>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}