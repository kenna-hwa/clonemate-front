{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\goal\\\\Goals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Button, List, ListItem } from \"@mui/material\";\nimport { Box } from \"@mui/system\";\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport '../../stylesheets/Goal.css';\nimport { goalsData } from \"../../atoms/todoData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Goals() {\n  _s();\n\n  /* Hook 선언 시작 */\n\n  /* atom 시작 */\n  let goal = useRecoilValue(goalsData); // 목표goals 아이템\n\n  let [readOnly, readOnlyChange] = useState('read'); //목표 수정표시\n\n  /* Dummy State 끝 */\n\n  useEffect(() => {// recoil 에서 정보 갱신이 되었으면 하는데..?\n    // goalItems = useRecoilState(goalsData)\n  });\n  /* Hook 선언 끝 */\n\n  /* 함수 시작 */\n  //목표수정 컴포넌트로 이동 함수 (파라미터 추가)\n\n  function moveEditGoalForm(id) {\n    window.location.replace(`/goals/goalEditForm/` + id);\n  } //목표 수정 이벤트핸들러 함수\n\n\n  async function clickGoaltoEdit(e) {\n    const {\n      id\n    } = e.target;\n    await readOnlyChange(readOnly = 'edit');\n    console.log(\"readOnly\", readOnly, id);\n    await moveEditGoalForm(id);\n  }\n  /* 함수 끝 */\n\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: \"goals-list-box\",\n    children: /*#__PURE__*/_jsxDEV(List, {\n      className: \"goals-list-wrap\",\n      children: goal.map((item, idx) => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          className: \"goals-list\",\n          id: item.goal_id,\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: \"goals-listItem-btn\",\n            id: item.goal_id,\n            name: item.goal_id,\n            sx: {\n              color: item.title_color\n            },\n            onClick: clickGoaltoEdit,\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ArrowForwardIosIcon, {\n            className: \"goals-clickToEdit-btn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)]\n        }, item.goal_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Goals, \"ueZplA8m/vhTvEBZr+y3EDfBNkA=\", false, function () {\n  return [useRecoilValue];\n});\n\n_c = Goals;\n\nvar _c;\n\n$RefreshReg$(_c, \"Goals\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/goal/Goals.js"],"names":["React","useEffect","useState","useHistory","useRecoilState","useRecoilValue","Button","List","ListItem","Box","ArrowForwardIosIcon","goalsData","Goals","goal","readOnly","readOnlyChange","moveEditGoalForm","id","window","location","replace","clickGoaltoEdit","e","target","console","log","map","item","idx","goal_id","color","title_color","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,SAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,QAAxB,QAAyC,eAAzC;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,mBAAP,MAAgC,oCAAhC;AAEA,OAAO,4BAAP;AAEA,SAASC,SAAT,QAA0B,sBAA1B;;AAGA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAG9B;;AAEC;AAED,MAAIC,IAAI,GAAGR,cAAc,CAACM,SAAD,CAAzB,CAP8B,CAOO;;AACrC,MAAI,CAACG,QAAD,EAAWC,cAAX,IAA6Bb,QAAQ,CAAC,MAAD,CAAzC,CAR8B,CAQqB;;AAInD;;AAEAD,EAAAA,SAAS,CAAC,MAAI,CACZ;AACA;AACD,GAHQ,CAAT;AAOA;;AAKA;AAGA;;AACA,WAASe,gBAAT,CAA0BC,EAA1B,EAA6B;AAC3BC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAyB,sBAAD,GAAuBH,EAA/C;AACD,GAhC6B,CAmC9B;;;AACA,iBAAeI,eAAf,CAA+BC,CAA/B,EAAiC;AAC/B,UAAM;AAAEL,MAAAA;AAAF,QAASK,CAAC,CAACC,MAAjB;AACA,UAAMR,cAAc,CAACD,QAAQ,GAAC,MAAV,CAApB;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBX,QAAxB,EAAkCG,EAAlC;AACA,UAAMD,gBAAgB,CAACC,EAAD,CAAtB;AACD;AAGH;;;AAGE,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACA,QAAC,IAAD;AAAM,MAAA,SAAS,EAAC,iBAAhB;AAAA,gBAEIJ,IAAI,CAACa,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,KAAe;AACxB,4BAAS,QAAC,QAAD;AAAU,UAAA,SAAS,EAAC,YAApB;AAAiC,UAAA,EAAE,EAAED,IAAI,CAACE,OAA1C;AAAA,kCACG,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,oBAAlB;AAAuC,YAAA,EAAE,EAAEF,IAAI,CAACE,OAAhD;AAAyD,YAAA,IAAI,EAAEF,IAAI,CAACE,OAApE;AAA6E,YAAA,EAAE,EAAE;AAAEC,cAAAA,KAAK,EAACH,IAAI,CAACI;AAAb,aAAjF;AAA6G,YAAA,OAAO,EAAEV,eAAtH;AAAA,sBAAyIM,IAAI,CAACK;AAA9I;AAAA;AAAA;AAAA;AAAA,kBADH,eAEG,QAAC,mBAAD;AAAqB,YAAA,SAAS,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAFH;AAAA,WAAwDL,IAAI,CAACE,OAA7D;AAAA;AAAA;AAAA;AAAA,gBAAT;AAKK,OANL;AAFJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GA9DuBjB,K;UAOXP,c;;;KAPWO,K","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {  Button, List, ListItem  } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\r\n\r\nimport '../../stylesheets/Goal.css';\r\n\r\nimport { goalsData } from \"../../atoms/todoData\";\r\n\r\n\r\nexport default function Goals() {\r\n\r\n  \r\n  /* Hook 선언 시작 */\r\n\r\n   /* atom 시작 */\r\n  \r\n  let goal = useRecoilValue(goalsData);// 목표goals 아이템\r\n  let [readOnly, readOnlyChange] = useState('read'); //목표 수정표시\r\n\r\n\r\n\r\n  /* Dummy State 끝 */\r\n  \r\n  useEffect(()=>{\r\n    // recoil 에서 정보 갱신이 되었으면 하는데..?\r\n    // goalItems = useRecoilState(goalsData)\r\n  })\r\n\r\n\r\n\r\n  /* Hook 선언 끝 */\r\n \r\n\r\n\r\n\r\n  /* 함수 시작 */\r\n\r\n\r\n  //목표수정 컴포넌트로 이동 함수 (파라미터 추가)\r\n  function moveEditGoalForm(id){\r\n    window.location.replace(`/goals/goalEditForm/`+id)\r\n  }\r\n\r\n  \r\n  //목표 수정 이벤트핸들러 함수\r\n  async function clickGoaltoEdit(e){\r\n    const { id } = e.target;\r\n    await readOnlyChange(readOnly='edit');\r\n    console.log(\"readOnly\", readOnly, id )\r\n    await moveEditGoalForm(id)\r\n  }\r\n\r\n\r\n/* 함수 끝 */\r\n\r\n\r\n  return (\r\n    <Box className=\"goals-list-box\">\r\n    <List className=\"goals-list-wrap\" >\r\n        {\r\n        goal.map((item, idx) => {\r\n        return ( <ListItem className=\"goals-list\" id={item.goal_id} key={item.goal_id} > \r\n                    <Button className=\"goals-listItem-btn\" id={item.goal_id} name={item.goal_id} sx={{ color:item.title_color }} onClick={clickGoaltoEdit} >{item.title}</Button >\r\n                    <ArrowForwardIosIcon className=\"goals-clickToEdit-btn\"/>\r\n                </ListItem>\r\n                );\r\n            })\r\n        }\r\n    </List>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}