{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\main\\\\CalendarBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { Paper, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ko } from \"date-fns/locale\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport '../../stylesheets/CalendarBox.css';\nimport { objFeedCalendarOverview, objDatesData } from \"../../atoms/todoData\";\nimport { getTodosData } from \"../../api/apiCommunicate\";\nimport API from '../../api/API';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const refresh = async () => {\n  try {\n    const {\n      data\n    } = await API.get('https://jsonplaceholder.typicode.com/todos/1');\n    return data;\n  } catch {// Error Handling\n  }\n};\nconsole.log(data);\nexport const styles = makeStyles(() => ({\n  //define CSS for different date types\n  notInThisMonthDayPaper: {\n    visibility: \"hidden\",\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#00000000\",\n    fontSize: \"0.825em\",\n    textAlign: \"center\",\n    margin: \"11px\",\n    padding: \"1px\"\n  },\n  normalDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707030\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  normalDayNum: {\n    fontSize: \"0.5em\",\n    textAlign: \"center\",\n    color: \"#707070\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  selectedDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707030\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  selectedDayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"700\",\n    textAlign: \"center\",\n    textDecoration: \"underline\",\n    color: \"#000\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  hasTodoDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707080\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  hasTodoDayNum: {\n    fontSize: \"0.5em\",\n    textAlign: \"center\",\n    color: \"#707070\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  CheckedTodoDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#21bdbd\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  CheckedTodoDayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"700\",\n    textAlign: \"center\",\n    color: \"#21bdbd90\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  todayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707030\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  todayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"600\",\n    color: \"#222\",\n    textAlign: \"center\",\n    position: \"relative\",\n    top: \"3em\"\n  }\n}));\nexport default function CalendarBox(props) {\n  _s();\n\n  /* state 선언 시작 */\n  const [objDate, setObjDate] = useRecoilState(objDatesData);\n  const copy_objDate = { ...objDate\n  };\n  let dtFeedCalendarOverview = useRecoilValue(objFeedCalendarOverview);\n  const today = new Date(); // 오늘 날짜 객체\n\n  const classes = styles(); // import those CSS\n\n  const [selectedDate, setselectedDate] = useState(new Date(objDate.dtFeedCalendarDate)); //현재 선택된 날짜 state -> Feed 불러낼 때 사용\n\n  let todoObj = {};\n  /* state 선언 종료 */\n\n  /* hook 선언 시작 */\n\n  useEffect(() => {\n    //selectedDate 변경시 Tododata의 dtFeedCalendarDate\n    copy_objDate.dtFeedCalendarDate = selectedDate;\n    setObjDate(copy_objDate); //컴포넌트 실행 시 서버에서 처음 값 받아오기 여기서 ajax\n  }, [selectedDate]);\n  /* hook 선언 종료 */\n\n  /* 함수 선언 시작 */\n  // 데이터가 있는 날\n  // 데이터가 있는 날 : todo 갯수 / 데이터가 모두 완료된 날 \n\n  const theDayhasTodoArr = dtFeedCalendarOverview.map((data, i) => data.arrTodoInfo[0].numTodoDay); //ajax 통신을 통해 받아온 값 (numCountTodo, numTodoCount, completeYn)\n\n  dtFeedCalendarOverview.map((item, i) => todoObj[item.arrTodoInfo[0].numTodoDay] = item.arrTodoInfo[0].ynComplete !== 'Y' ? item.arrTodoInfo[0].numTodoCount : '✓'); //날짜 타일 변경 함수\n\n  function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\n    //boolean 으로 바꿔주는 작업\n    //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) -> true\n    const isHasTodoData = theDayhasTodoArr.includes(day.getDate()); //클릭된 날짜 \n\n    const isSelected = day.getDate() === selectedDate.getDate(); //오늘 날짜\n\n    const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth(); //dateTile 생성\n\n    let dateTile;\n\n    if (isInCurrentMonth) {\n      //데이터 타일 반환\n      if (isHasTodoData) {\n        //HasTodoData가 있을 때 = todo가 있는 날 -> 갯수 표시 todoChecked가 y 면 색상변환 \n        let d = day.getDate(); // console.log(todoObj, d)\n        // console.log('todoObj[d]', todoObj[d])\n\n        dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n          className: isNaN(todoObj[d]) ? classes.CheckedTodoDayPaper : isHasTodoData ? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          ref: isNaN(todoObj[d]) ? classes.CheckedTodoDayPaper : isHasTodoData ? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            className: isNaN(todoObj[d]) ? classes.CheckedTodoDayNum : isHasTodoData ? classes.hasTodoDayNum : isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n            children: day.getDate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), isHasTodoData ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"todoDataNum\",\n            children: todoObj[d]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 40\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this);\n      } else {\n        dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n          className: isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n            children: [\" \", day.getDate()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }, this);\n      }\n    } else {\n      dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.notInThisMonthDayPaper,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n          children: day.getDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 25\n      }, this);\n    }\n\n    return dateTile;\n  }\n  /* 함수 선언 종료 */\n\n\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    locale: ko,\n    utils: DateFnsUtils,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"yearMM\",\n      children: `${today.getFullYear()}년 ${today.getMonth() + 1}월`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n      value: selectedDate,\n      onChange: setselectedDate //클릭하면 selectedDate (선택한 날짜로 보냄)\n      ,\n      variant: \"static\",\n      inputFormat: \"yyyy-MM-dd\",\n      mask: \"____-__-__\" //renderDay props로 getDayElement 전달\n      ,\n      renderDay: (day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 11\n  }, this);\n}\n\n_s(CalendarBox, \"jKwrJf3kBLNSd5hadSSkIQWnCAQ=\", false, function () {\n  return [useRecoilState, useRecoilValue];\n});\n\n_c = CalendarBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarBox\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/main/CalendarBox.js"],"names":["React","useEffect","useState","DateFnsUtils","DatePicker","MuiPickersUtilsProvider","Paper","Grid","makeStyles","ko","useRecoilState","useRecoilValue","objFeedCalendarOverview","objDatesData","getTodosData","API","refresh","data","get","console","log","styles","notInThisMonthDayPaper","visibility","width","height","backgroundColor","fontSize","textAlign","margin","padding","normalDayPaper","cursor","normalDayNum","color","position","top","selectedDayPaper","selectedDayNum","fontWeight","textDecoration","hasTodoDayPaper","hasTodoDayNum","CheckedTodoDayPaper","CheckedTodoDayNum","todayPaper","todayNum","CalendarBox","props","objDate","setObjDate","copy_objDate","dtFeedCalendarOverview","today","Date","classes","selectedDate","setselectedDate","dtFeedCalendarDate","todoObj","theDayhasTodoArr","map","i","arrTodoInfo","numTodoDay","item","ynComplete","numTodoCount","getDayElement","day","isInCurrentMonth","dayComponent","isHasTodoData","includes","getDate","isSelected","isToday","getMonth","dateTile","d","isNaN","getFullYear"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport {Paper, Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { ko } from \"date-fns/locale\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\nimport '../../stylesheets/CalendarBox.css';\r\nimport { objFeedCalendarOverview , objDatesData} from \"../../atoms/todoData\";\r\nimport { getTodosData } from \"../../api/apiCommunicate\";\r\nimport API from '../../api/API';\r\n\r\n\r\nexport const refresh = async () => {\r\n    try {\r\n        const { data } = await API.get('https://jsonplaceholder.typicode.com/todos/1');\r\n    \treturn data;\r\n    } catch {\r\n    \t// Error Handling\r\n    }\r\n};\r\nconsole.log(data)\r\n\r\nexport const styles = makeStyles(() => ({ //define CSS for different date types\r\n    notInThisMonthDayPaper: {\r\n        visibility: \"hidden\",\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#00000000\",\r\n        fontSize: \"0.825em\",\r\n        textAlign: \"center\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n    },\r\n    normalDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },  \r\n    normalDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    selectedDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    selectedDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"700\",\r\n        textAlign: \"center\",\r\n        textDecoration: \"underline\",\r\n        color: \"#000\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    hasTodoDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707080\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    hasTodoDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    CheckedTodoDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#21bdbd\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    CheckedTodoDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"700\",\r\n        textAlign: \"center\",\r\n        color: \"#21bdbd90\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    todayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    todayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"600\",\r\n        color: \"#222\",\r\n        textAlign: \"center\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n\r\n\r\n}));\r\n\r\nexport default function CalendarBox(props) {\r\n\r\n/* state 선언 시작 */\r\n\r\nconst [objDate, setObjDate] = useRecoilState(objDatesData);\r\nconst copy_objDate = {...objDate};\r\nlet dtFeedCalendarOverview = useRecoilValue(objFeedCalendarOverview);\r\n\r\nconst today = new Date(); // 오늘 날짜 객체\r\nconst classes = styles(); // import those CSS\r\nconst [selectedDate, setselectedDate] = useState(new Date(objDate.dtFeedCalendarDate)); //현재 선택된 날짜 state -> Feed 불러낼 때 사용\r\nlet todoObj = {};\r\n\r\n/* state 선언 종료 */\r\n\r\n/* hook 선언 시작 */\r\n\r\n\r\n\r\nuseEffect(()=>{\r\n\r\n    //selectedDate 변경시 Tododata의 dtFeedCalendarDate\r\n    copy_objDate.dtFeedCalendarDate = selectedDate;\r\n    setObjDate(copy_objDate);\r\n    //컴포넌트 실행 시 서버에서 처음 값 받아오기 여기서 ajax\r\n\r\n},[selectedDate])\r\n    \r\n    \r\n/* hook 선언 종료 */\r\n\r\n/* 함수 선언 시작 */\r\n\r\n\r\n\r\n\r\n\r\n// 데이터가 있는 날\r\n// 데이터가 있는 날 : todo 갯수 / 데이터가 모두 완료된 날 \r\n\r\nconst theDayhasTodoArr = dtFeedCalendarOverview.map((data,i) => data.arrTodoInfo[0].numTodoDay);\r\n    \r\n//ajax 통신을 통해 받아온 값 (numCountTodo, numTodoCount, completeYn)\r\n    dtFeedCalendarOverview.map((item, i) =>  todoObj[item.arrTodoInfo[0].numTodoDay] = item.arrTodoInfo[0].ynComplete!=='Y'? item.arrTodoInfo[0].numTodoCount : '✓');\r\n\r\n    //날짜 타일 변경 함수\r\n    function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\r\n\r\n\r\n        //boolean 으로 바꿔주는 작업\r\n        //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) -> true\r\n        const isHasTodoData = theDayhasTodoArr.includes(day.getDate()); \r\n        //클릭된 날짜 \r\n        const isSelected = day.getDate() === selectedDate.getDate();\r\n        //오늘 날짜\r\n        const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth();\r\n\r\n        //dateTile 생성\r\n        let dateTile\r\n\r\n        if (isInCurrentMonth) { //데이터 타일 반환\r\n            if (isHasTodoData) { //HasTodoData가 있을 때 = todo가 있는 날 -> 갯수 표시 todoChecked가 y 면 색상변환 \r\n\r\n                let d = day.getDate();\r\n                // console.log(todoObj, d)\r\n                // console.log('todoObj[d]', todoObj[d])\r\n\r\n                dateTile = (\r\n                    <Paper className={isNaN(todoObj[d])? classes.CheckedTodoDayPaper : isHasTodoData? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper } ref={isNaN(todoObj[d])? classes.CheckedTodoDayPaper : isHasTodoData? classes.hasTodoDayPaper : isSelected? classes.selectedDayPaper : isToday? classes.todayPaper : classes.normalDayPaper}>\r\n                        <Grid className={isNaN(todoObj[d])? classes.CheckedTodoDayNum : isHasTodoData? classes.hasTodoDayNum : isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                            {day.getDate()}\r\n                        </Grid>\r\n                       {isHasTodoData? <span className='todoDataNum'>{todoObj[d]}</span> : null}\r\n                    </Paper>\r\n                    )\r\n            } else {\r\n                dateTile = (\r\n                <Paper className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}>   \r\n                    <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}> {day.getDate()}</Grid>\r\n                </Paper>)\r\n            }\r\n        } \r\n        else {\r\n            dateTile = (<Paper className={classes.notInThisMonthDayPaper}>\r\n                <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                    {day.getDate()}\r\n                </Grid>\r\n            </Paper>)\r\n\r\n        }\r\n        return dateTile;\r\n    }\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return(\r\n          <MuiPickersUtilsProvider locale={ko} utils={DateFnsUtils} >\r\n              <span className='yearMM'>{`${today.getFullYear()}년 ${today.getMonth()+1}월`}</span>\r\n                <DatePicker\r\n                    value={selectedDate}\r\n                    onChange={setselectedDate} //클릭하면 selectedDate (선택한 날짜로 보냄)\r\n                    variant=\"static\"\r\n                    inputFormat={\"yyyy-MM-dd\"}\r\n                    mask={\"____-__-__\"}\r\n                    //renderDay props로 getDayElement 전달\r\n                    renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)}\r\n\r\n                />\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}