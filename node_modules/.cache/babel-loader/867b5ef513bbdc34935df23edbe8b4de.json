{"ast":null,"code":"import axios from 'axios';\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { objFeedCalendarOverview, objDatesData } from \"../atoms/todoData\";\nexport const getTodosDataSample = async () => {\n  //axios\n  await axios.get('https://jsonplaceholder.typicode.com/todos/1').then(Response => {\n    console.log(Response.data);\n  }).then(result => {\n    console.log(result);\n  }).catch(Error => {\n    console.log(Error);\n  });\n  return Response.data;\n};\n/* ------------------------------------예시 종료---------------------------------------- */\n\n/* state 관리 */\n\n/* 공통 변수 선언 */\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  \"Connection\": \"keep-alive\",\n  \"X-Requested-With\": \"XMLHttpRequest\"\n};\nconst userHost = 'https://clonetodo.herokuapp.com';\nconst todoHost = 'https://clonetodo.herokuapp.com/api/v1'; //POST 메서드로 전송할 데이터\n// let formData = new FormData(); \n// formData.append('key', value); // key-value (키-값)의 형태로 데이터 추가함\n\n/* 캘린더 API 통신 시작 */\n//GET 캘린더 데이터 가져오기\n//dateYm=yyyy-mm\n\nexport const getTodosOverviewData = async (numUserId, localDate) => {\n  //axios\n  await axios({\n    method: `GET`,\n    url: `${todoHost}/todos/overview`,\n    params: {\n      userId: numUserId,\n      dateYm: localDate\n    },\n    header: {\n      headers\n    }\n  }).then(Response => Response.data).then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null).catch(Error => {\n    console.log(Error);\n  }); //완료 되면 res.data가 success true 인지 확인하고 null 부분에 todoData에 objFeedCalendarOverview 값을 바꿔줘야 한다\n\n  return Response.data;\n};\n/* 캘린더 API 통신 종료 */\n\n/* 유저 관련 통신 시작 */\n//회원가입\n\nexport const postUserJoin = async data => {\n  //axios\n  await axios({\n    method: `POST`,\n    url: `${userHost}/join`,\n    params: {\n      data\n    },\n    headers: {\n      headers\n    }\n  }).then(res => res.data).then(res => res.data.success ? sessionStorage.setItem(\"userId\", res.data.userId) : console.log(\"로그인 실패\")).then(res => !res.success ? alert(\"아이디와 비밀번호를 확인해주세요\") : window.location.reload(`/signin`));\n}; //로그인\n\nexport const postUserLogin = async data => {\n  //axios\n  await axios({\n    method: `POST`,\n    url: `${userHost}/login`,\n    params: {\n      data\n    },\n    headers: {\n      headers\n    }\n  }).then(res => res.data).then(res => !res.success ? alert(\"아이디와 비밀번호를 확인해주세요\") : window.location.reload(`/main`));\n};\n/* 유저 관련 통신 종료 */\n\n/* 목표 API 통신 시작 */\n//GET 목표 배열 가져오기\n\nexport const getGoalsData = async () => {\n  //axios\n  await axios({\n    method: `GET`,\n    url: `${todoHost}/goals`\n  }).then(Response => Response.data).then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null).catch(Error => {\n    console.log(Error);\n  });\n  return Response.data;\n}; //POST 목표 등록하기\n//PATCH 목표 수정하기\n//DELETE 목표 삭제하기\n\n/* 목표 API 통신 끝 */\n\n/* 투두 API 통신 시작 */\n//GET objTodosDataResult id 값으로 받아오기\n//GET objTodosDataResult 캘린더 날짜로 받아오기\n//date=yyyy-mm-dd\n\nexport const getTodosData = async (numUserId, localDate) => {\n  //axios\n  await axios({\n    method: `GET`,\n    url: `${todoHost}/todos/overview`,\n    params: {\n      userId: sessionStorage.getItem(\"userId\"),\n      dateYm: localDate\n    }\n  }).then(Response => Response.data).then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null).catch(Error => {\n    console.log(Error);\n  }); //완료 되면 res.data가 success true 인지 확인하고 null 부분에 todoData에 objFeedCalendarOverview 값을 바꿔줘야 한다\n\n  return Response.data;\n}; //POST objTodosDataResult 추가하기\n\nexport const postTodoCreateData = async data => {\n  console.log(\"data\", data); //axios\n\n  await axios({\n    method: `POST`,\n    url: `${todoHost}/todos`,\n    params: {\n      data\n    }\n  }).then(Response => Response.data);\n}; //PATCH objTodosDataResult id값으로 수정하기\n//PATCH objTodosDataResult 날짜로 수정하기\n//date=yyyy-mm-dd\n//checkYn=y or n\n//DELETE objTodosDataResult 날짜로 모든 todo값 삭제하기\n//DELETE objTodosDataResult 날짜로 모든 todo값 삭제하기\n\n/* 투두 API 통신 끝 */\n\n/* 투두 좋아요 API 통신 시작 */\n//POST 투두 좋아요 클릭 +1 추가하기\n//DELETE 투두 좋아요 클릭 -1 삭제하기\n\n/* 투두 좋아요 API 통신 끝 */\n\n/* 팔로우 API 통신 시작 */\n//GET followers 가져오기\n\nexport async function axiosGetFollowers() {\n  //axios\n  await axios.get(`/follow/followers`).then(Response => {\n    console.log(Response.data);\n  }).catch(Error => {\n    console.log(Error);\n  });\n} //GET following 가져오기\n\nexport async function axiosGetFollowing() {\n  //axios\n  await axios.get(`/follow/followings`).then(Response => {\n    console.log(Response.data);\n  }).catch(Error => {\n    console.log(Error);\n  });\n} //POST 팔로워 수정하기\n//DELETE 팔로워 삭제하기\n\n/* 팔로우 API 통신 끝 */\n\n/* 좋아요 API 통신 시작 */\n//GET 좋아요 보내기\n//GET 지정 날짜 좋아요 보내기\n//date=yyyy-mm-dd\n//POST 좋아요 수정하기\n//DELETE 좋아요 삭제하기\n\n/* 좋아요 API 통신 끝 */","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/api/apiCommunicate.js"],"names":["axios","useRecoilState","useRecoilValue","objFeedCalendarOverview","objDatesData","getTodosDataSample","get","then","Response","console","log","data","result","catch","Error","headers","userHost","todoHost","getTodosOverviewData","numUserId","localDate","method","url","params","userId","dateYm","header","success","alert","postUserJoin","res","sessionStorage","setItem","window","location","reload","postUserLogin","getGoalsData","getTodosData","getItem","postTodoCreateData","axiosGetFollowers","axiosGetFollowing"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { objFeedCalendarOverview , objDatesData} from \"../atoms/todoData\";\r\n\r\n\r\nexport const getTodosDataSample = async () => {\r\n\r\n  //axios\r\n  await axios.get('https://jsonplaceholder.typicode.com/todos/1')\r\n  .then((Response)=>{console.log(Response.data)})\r\n  .then((result)=>{console.log(result)})\r\n  .catch((Error)=>{console.log(Error)})\r\n\r\n  return Response.data\r\n} \r\n\r\n\r\n/* ------------------------------------예시 종료---------------------------------------- */\r\n\r\n/* state 관리 */\r\n\r\n\r\n/* 공통 변수 선언 */\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\",\r\n  \"Connection\": \"keep-alive\",\r\n  \"X-Requested-With\": \"XMLHttpRequest\"\r\n}\r\n\r\nconst userHost = 'https://clonetodo.herokuapp.com';\r\nconst todoHost = 'https://clonetodo.herokuapp.com/api/v1';\r\n\r\n//POST 메서드로 전송할 데이터\r\n// let formData = new FormData(); \r\n// formData.append('key', value); // key-value (키-값)의 형태로 데이터 추가함\r\n\r\n/* 캘린더 API 통신 시작 */\r\n\r\n//GET 캘린더 데이터 가져오기\r\n//dateYm=yyyy-mm\r\nexport const getTodosOverviewData = async (numUserId,localDate) => {\r\n\r\n  //axios\r\n  await axios({\r\n    method: `GET`,\r\n    url: `${todoHost}/todos/overview`,\r\n    params: {\r\n      userId: numUserId,\r\n      dateYm: localDate\r\n    },\r\n    header: {\r\n      headers\r\n    }\r\n  })\r\n  .then(Response => Response.data)\r\n  .then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null)\r\n  .catch((Error)=>{console.log(Error)})\r\n  \r\n    //완료 되면 res.data가 success true 인지 확인하고 null 부분에 todoData에 objFeedCalendarOverview 값을 바꿔줘야 한다\r\n  return Response.data;\r\n} \r\n\r\n/* 캘린더 API 통신 종료 */\r\n\r\n\r\n\r\n/* 유저 관련 통신 시작 */\r\n\r\n//회원가입\r\nexport const postUserJoin = async (data) => {\r\n\r\n  //axios\r\n  await axios({\r\n    method: `POST`,\r\n    url: `${userHost}/join`,\r\n    params: {\r\n      data\r\n    },\r\n    headers:{\r\n      headers\r\n    }\r\n  })\r\n  .then(res => res.data)\r\n  .then(res => res.data.success ? sessionStorage.setItem(\"userId\", res.data.userId) : console.log(\"로그인 실패\"))\r\n  .then(res => !res.success ? alert(\"아이디와 비밀번호를 확인해주세요\") : window.location.reload(`/signin`))\r\n  \r\n} \r\n\r\n\r\n\r\n//로그인\r\n\r\nexport const postUserLogin = async (data) => {\r\n\r\n  //axios\r\n  await axios({\r\n    method: `POST`,\r\n    url: `${userHost}/login`,\r\n    params: {\r\n      data\r\n    },\r\n    headers:{\r\n      headers\r\n    }\r\n  })\r\n  .then(res => res.data)\r\n  .then(res => !res.success ? alert(\"아이디와 비밀번호를 확인해주세요\") : \r\n   window.location.reload(`/main`))\r\n} \r\n\r\n\r\n/* 유저 관련 통신 종료 */\r\n\r\n\r\n\r\n/* 목표 API 통신 시작 */\r\n\r\n//GET 목표 배열 가져오기\r\n\r\nexport const getGoalsData = async () => {\r\n\r\n  //axios\r\n  await axios({\r\n   method: `GET`,\r\n   url: `${todoHost}/goals`\r\n })\r\n .then(Response => Response.data)\r\n .then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null)\r\n .catch((Error)=>{console.log(Error)})\r\n\r\n return Response.data\r\n}\r\n\r\n//POST 목표 등록하기\r\n\r\n//PATCH 목표 수정하기\r\n\r\n//DELETE 목표 삭제하기\r\n\r\n/* 목표 API 통신 끝 */\r\n\r\n\r\n\r\n/* 투두 API 통신 시작 */\r\n\r\n\r\n\r\n\r\n//GET objTodosDataResult id 값으로 받아오기\r\n\r\n//GET objTodosDataResult 캘린더 날짜로 받아오기\r\n//date=yyyy-mm-dd\r\nexport const getTodosData = async (numUserId,localDate) => {\r\n\r\n   //axios\r\n   await axios({\r\n    method: `GET`,\r\n    url: `${todoHost}/todos/overview`,\r\n    params: {\r\n      userId: sessionStorage.getItem(\"userId\"),\r\n      dateYm: localDate\r\n    }\r\n  })\r\n  .then(Response => Response.data)\r\n  .then(Response => !Response.success ? alert(\"데이터를 받아오지 못했습니다.\") : null)\r\n  .catch((Error)=>{console.log(Error)})\r\n  \r\n    //완료 되면 res.data가 success true 인지 확인하고 null 부분에 todoData에 objFeedCalendarOverview 값을 바꿔줘야 한다\r\n  return Response.data\r\n\r\n} \r\n\r\n//POST objTodosDataResult 추가하기\r\n\r\nexport const postTodoCreateData = async (data) => {\r\n  console.log(\"data\", data)\r\n  //axios\r\n  await axios({\r\n    method: `POST`,\r\n    url: `${todoHost}/todos`,\r\n    params: {\r\n      data\r\n    }\r\n  })\r\n  .then(Response => Response.data)\r\n\r\n}\r\n\r\n//PATCH objTodosDataResult id값으로 수정하기\r\n\r\n//PATCH objTodosDataResult 날짜로 수정하기\r\n//date=yyyy-mm-dd\r\n//checkYn=y or n\r\n\r\n//DELETE objTodosDataResult 날짜로 모든 todo값 삭제하기\r\n\r\n//DELETE objTodosDataResult 날짜로 모든 todo값 삭제하기\r\n\r\n/* 투두 API 통신 끝 */\r\n\r\n\r\n\r\n\r\n/* 투두 좋아요 API 통신 시작 */\r\n\r\n//POST 투두 좋아요 클릭 +1 추가하기\r\n\r\n//DELETE 투두 좋아요 클릭 -1 삭제하기\r\n\r\n/* 투두 좋아요 API 통신 끝 */\r\n\r\n\r\n\r\n/* 팔로우 API 통신 시작 */\r\n\r\n//GET followers 가져오기\r\n\r\nexport async function axiosGetFollowers () {\r\n  //axios\r\n\r\n  await axios.get(`/follow/followers`)\r\n  .then((Response)=>{console.log(Response.data)})\r\n  .catch((Error)=>{console.log(Error)})\r\n} \r\n\r\n//GET following 가져오기\r\n\r\nexport async function axiosGetFollowing () {\r\n  //axios\r\n\r\n  await axios.get(`/follow/followings`)\r\n  .then((Response)=>{console.log(Response.data)})\r\n  .catch((Error)=>{console.log(Error)})\r\n} \r\n\r\n//POST 팔로워 수정하기\r\n\r\n//DELETE 팔로워 삭제하기\r\n\r\n/* 팔로우 API 통신 끝 */\r\n\r\n\r\n\r\n/* 좋아요 API 통신 시작 */\r\n\r\n//GET 좋아요 보내기\r\n\r\n//GET 지정 날짜 좋아요 보내기\r\n//date=yyyy-mm-dd\r\n\r\n//POST 좋아요 수정하기\r\n\r\n\r\n//DELETE 좋아요 삭제하기\r\n\r\n\r\n/* 좋아요 API 통신 끝 */\r\n"]},"metadata":{},"sourceType":"module"}