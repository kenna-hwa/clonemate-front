{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\CalendarBox.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport { Paper, Grid } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { ko } from \"date-fns/locale\";\nimport format from \"date-fns/format\";\nimport '../stylesheets/CalendarBox.css';\nimport * as apiAxios from '../api/axios'; // import CalendarPicker from '@mui/lab/CalendarPicker';\n// import AdapterDateFns from '@mui/lab/AdapterDateFns';\n// import LocalizationProvider from '@mui/lab/LocalizationProvider';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const styles = makeStyles(() => ({\n  //define CSS for different date types\n  notInThisMonthDayPaper: {\n    visibility: \"hidden\",\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#00000000\",\n    fontSize: \"0.825em\",\n    textAlign: \"center\",\n    margin: \"11px\",\n    padding: \"1px\"\n  },\n  normalDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707030\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  normalDayNum: {\n    fontSize: \"0.5em\",\n    textAlign: \"center\",\n    color: \"#707070\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  selectedDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707030\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  selectedDayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"700\",\n    textAlign: \"center\",\n    textDecoration: \"underline\",\n    color: \"#000\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  hasTodoDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707080\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  hasTodoDayNum: {\n    fontSize: \"0.5em\",\n    textAlign: \"center\",\n    color: \"#707070\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  CheckedTodoDayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#21bdbd\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  CheckedTodoDayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"700\",\n    textAlign: \"center\",\n    color: \"#21bdbd90\",\n    position: \"relative\",\n    top: \"3em\"\n  },\n  todayPaper: {\n    width: \"18px\",\n    height: \"18px\",\n    backgroundColor: \"#70707030\",\n    margin: \"11px\",\n    padding: \"1px\",\n    cursor: \"pointer\"\n  },\n  todayNum: {\n    fontSize: \"0.5em\",\n    fontWeight: \"600\",\n    color: \"#222\",\n    textAlign: \"center\",\n    position: \"relative\",\n    top: \"3em\"\n  }\n})); //서버에서 값 받아오는 경우\n\nexport async function fetchPostInfo(param) {\n  const getTodoDataForCalendar = await apiAxios.getData(param); // console.log(getTodoDataForCalendar);\n} //ajax 통신을 통해 받아온 값 (theDayhasTodo, todoNum, todoChecked)\n\nconst getTodoDataForCalendar = [{\n  theDayhasTodo: '2022-01-08',\n  todoNum: 2,\n  todoChecked: 'n'\n}, {\n  theDayhasTodo: '2022-01-14',\n  todoNum: 4,\n  todoChecked: 'n'\n}, {\n  theDayhasTodo: '2022-01-27',\n  todoNum: 6,\n  todoChecked: 'y'\n}];\nexport default function CalendarBox() {\n  _s();\n\n  //컴포넌트 실행 시 서버에서 처음 값 받아오기\n  // useEffect(() => {\n  //     getTodoDataForCalendar();\n  // }, []);\n  const today = new Date(); // 오늘 날짜 객체\n\n  const classes = styles(); // import those CSS\n\n  const [selectedDate, setselectedDate] = useState(new Date()); //현재 선택된 날짜 state -> Feed 불러낼 때 사용\n\n  let todoObj = {}; // 데이터가 있는 날\n\n  const theDayhasTodoArr = getTodoDataForCalendar.map(item => parseInt(item.theDayhasTodo.split('-')[2])); // 데이터가 있는 날 : todo 갯수 / 데이터가 모두 완료된 날 \n\n  getTodoDataForCalendar.map(item => todoObj[parseInt(item.theDayhasTodo.split('-')[2])] = item.todoChecked !== 'y' ? item.todoNum : '✓'); //날짜 타일 변경 함수\n\n  function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\n    //boolean 으로 바꿔주는 작업\n    //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) -> true\n    const isHasTodoData = theDayhasTodoArr.includes(day.getDate()); //클릭된 날짜 \n\n    const isSelected = day.getDate() === selectedDate.getDate(); //오늘 날짜\n\n    const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth(); //dateTile 생성\n\n    let dateTile;\n\n    if (isInCurrentMonth) {\n      //데이터 타일 반환\n      if (isHasTodoData) {\n        //HasTodoData가 있을 때 = todo가 있는 날 -> 갯수 표시 todoChecked가 y 면 색상변환 \n        let d = day.getDate();\n        dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n          className: isNaN(todoObj[d]) ? classes.CheckedTodoDayPaper : isHasTodoData ? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          ref: isNaN(todoObj[d]) ? classes.CheckedTodoDayPaper : isHasTodoData ? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            className: isNaN(todoObj[d]) ? classes.CheckedTodoDayNum : isHasTodoData ? classes.hasTodoDayNum : isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n            children: day.getDate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 25\n          }, this), isHasTodoData ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"todoDataNum\",\n            children: todoObj[d]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 40\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this);\n      } else {\n        dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n          className: isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n            children: [\" \", day.getDate()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 17\n        }, this);\n      }\n    } else {\n      dateTile = /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.notInThisMonthDayPaper,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          className: isSelected ? classes.selectedDayNum : isToday ? classes.todayNum : classes.normalDayNum,\n          children: day.getDate()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 25\n      }, this);\n    }\n\n    return dateTile;\n  }\n\n  return /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n    locale: ko,\n    utils: DateFnsUtils,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"yearMM\",\n      children: `${today.getFullYear()}년 ${today.getMonth() + 1}월`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n      value: selectedDate,\n      onChange: setselectedDate //클릭하면 selectedDate (선택한 날짜로 보냄)\n      ,\n      variant: \"static\",\n      inputFormat: \"yyyy-MM-dd\",\n      mask: \"____-__-__\" //renderDay props로 getDayElement 전달\n      ,\n      renderDay: (day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 11\n  }, this);\n}\n/* renderDay props로 함수가 필요함\r\nday: Date,\r\nselectedDate : Date,\r\nisInCrrentMonth: boolean,\r\ndayComponent: Element\r\n\r\n이 props를 입력한 다음 날짜 타일로 렌더링 할 수 있는 요소를 반환한다.\r\nDatePicker는 이 함수를 표시된 모든 날짜로 호출\r\n\r\n필요한 경우\r\n- 투두가 없는 날 : normal date tile\r\n- 투두가 있는 날 : todo date tile (갯수)\r\n- 투두를 모두 완료한 날 : complete date tile(색상, check✔)\r\n\r\n만든 함수를 enderDate 요소에 지정\r\n그러면 DatePicker가 날짜를 렌더링 하고 날짜 타일을 요청할 때마다 호출해준다. 만든 함수가 날짜를 확인하고 적절한 날짜 타일을 반환한다.\r\n\r\n따라서 데이터는 \r\n- 투두가 있는 날 theDayhasTodo\r\n- 투두가 있는 날의 투두 갯수 todoNum\r\n- 투두가 있는 날의 투두 완료 정보 (해당 날짜의 checked 의 값이 모두 y인가?) todoChecked\r\n\r\n 투두 있으면 -> dateTile에 투두가 있는 날의 투두 갯수 넣음\r\n     투두가 모두 완료 되면 -> 투두 갯수가 v 표시로 변환됨\r\n*/\n\n_s(CalendarBox, \"YM9khZ6NsSl5kGWsTo0bZG7qC7g=\");\n\n_c = CalendarBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarBox\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/CalendarBox.js"],"names":["React","useState","useEffect","DateFnsUtils","DatePicker","MuiPickersUtilsProvider","Paper","Grid","makeStyles","ko","format","apiAxios","styles","notInThisMonthDayPaper","visibility","width","height","backgroundColor","fontSize","textAlign","margin","padding","normalDayPaper","cursor","normalDayNum","color","position","top","selectedDayPaper","selectedDayNum","fontWeight","textDecoration","hasTodoDayPaper","hasTodoDayNum","CheckedTodoDayPaper","CheckedTodoDayNum","todayPaper","todayNum","fetchPostInfo","param","getTodoDataForCalendar","getData","theDayhasTodo","todoNum","todoChecked","CalendarBox","today","Date","classes","selectedDate","setselectedDate","todoObj","theDayhasTodoArr","map","item","parseInt","split","getDayElement","day","isInCurrentMonth","dayComponent","isHasTodoData","includes","getDate","isSelected","isToday","getMonth","dateTile","d","isNaN","getFullYear"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport {Paper, Grid} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport { ko } from \"date-fns/locale\";\r\nimport format from \"date-fns/format\";\r\n\r\nimport '../stylesheets/CalendarBox.css';\r\nimport * as apiAxios from '../api/axios';\r\n\r\n// import CalendarPicker from '@mui/lab/CalendarPicker';\r\n// import AdapterDateFns from '@mui/lab/AdapterDateFns';\r\n// import LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\n\r\nexport const styles = makeStyles(() => ({ //define CSS for different date types\r\n    notInThisMonthDayPaper: {\r\n        visibility: \"hidden\",\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#00000000\",\r\n        fontSize: \"0.825em\",\r\n        textAlign: \"center\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n    },\r\n    normalDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },  \r\n    normalDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    selectedDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    selectedDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"700\",\r\n        textAlign: \"center\",\r\n        textDecoration: \"underline\",\r\n        color: \"#000\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    hasTodoDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707080\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    hasTodoDayNum: {\r\n        fontSize: \"0.5em\",\r\n        textAlign: \"center\",\r\n        color: \"#707070\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    CheckedTodoDayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#21bdbd\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    CheckedTodoDayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"700\",\r\n        textAlign: \"center\",\r\n        color: \"#21bdbd90\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n    todayPaper: {\r\n        width: \"18px\",\r\n        height: \"18px\",\r\n        backgroundColor: \"#70707030\",\r\n        margin: \"11px\",\r\n        padding: \"1px\",\r\n        cursor: \"pointer\",\r\n    },\r\n    todayNum: {\r\n        fontSize: \"0.5em\",\r\n        fontWeight: \"600\",\r\n        color: \"#222\",\r\n        textAlign: \"center\",\r\n        position: \"relative\",\r\n        top: \"3em\"\r\n    },\r\n\r\n\r\n}));\r\n\r\n//서버에서 값 받아오는 경우\r\n\r\nexport async function fetchPostInfo (param) {\r\n    const getTodoDataForCalendar = await apiAxios.getData(param);\r\n    // console.log(getTodoDataForCalendar);\r\n\r\n}\r\n\r\n\r\n//ajax 통신을 통해 받아온 값 (theDayhasTodo, todoNum, todoChecked)\r\nconst getTodoDataForCalendar = [ { theDayhasTodo: '2022-01-08', todoNum: 2, todoChecked: 'n' }, { theDayhasTodo: '2022-01-14', todoNum: 4, todoChecked: 'n', }, { theDayhasTodo: '2022-01-27', todoNum: 6, todoChecked: 'y' } ];\r\n\r\n\r\n\r\nexport default function CalendarBox() {\r\n\r\n\r\n    //컴포넌트 실행 시 서버에서 처음 값 받아오기\r\n\r\n    // useEffect(() => {\r\n    //     getTodoDataForCalendar();\r\n    // }, []);\r\n\r\n    const today = new Date(); // 오늘 날짜 객체\r\n    const classes = styles(); // import those CSS\r\n    const [selectedDate, setselectedDate] = useState(new Date()); //현재 선택된 날짜 state -> Feed 불러낼 때 사용\r\n    let todoObj = {};\r\n\r\n    // 데이터가 있는 날\r\n    const theDayhasTodoArr = getTodoDataForCalendar.map(item => parseInt(item.theDayhasTodo.split('-')[2]));\r\n    // 데이터가 있는 날 : todo 갯수 / 데이터가 모두 완료된 날 \r\n    getTodoDataForCalendar.map(item =>  todoObj[parseInt(item.theDayhasTodo.split('-')[2])] = item.todoChecked!=='y'? item.todoNum : '✓');\r\n\r\n\r\n    //날짜 타일 변경 함수\r\n    function getDayElement(day, selectedDate, isInCurrentMonth, dayComponent) {\r\n\r\n\r\n        //boolean 으로 바꿔주는 작업\r\n        //데이터가 있을 때 (todoData = todo 데이터가 있는 날짜) -> true\r\n        const isHasTodoData = theDayhasTodoArr.includes(day.getDate()); \r\n\r\n\r\n        //클릭된 날짜 \r\n        const isSelected = day.getDate() === selectedDate.getDate();\r\n        //오늘 날짜\r\n        const isToday = day.getDate() === today.getDate() && day.getMonth() === today.getMonth();\r\n\r\n\r\n        //dateTile 생성\r\n        let dateTile\r\n\r\n        if (isInCurrentMonth) { //데이터 타일 반환\r\n            if (isHasTodoData) { //HasTodoData가 있을 때 = todo가 있는 날 -> 갯수 표시 todoChecked가 y 면 색상변환 \r\n\r\n                let d = day.getDate();\r\n\r\n\r\n                dateTile = (\r\n                    <Paper className={isNaN(todoObj[d])? classes.CheckedTodoDayPaper : isHasTodoData? classes.hasTodoDayPaper : isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper } ref={isNaN(todoObj[d])? classes.CheckedTodoDayPaper : isHasTodoData? classes.hasTodoDayPaper : isSelected? classes.selectedDayPaper : isToday? classes.todayPaper : classes.normalDayPaper}>\r\n                        <Grid className={isNaN(todoObj[d])? classes.CheckedTodoDayNum : isHasTodoData? classes.hasTodoDayNum : isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                            {day.getDate()}\r\n                        </Grid>\r\n                       {isHasTodoData? <span className='todoDataNum'>{todoObj[d]}</span> : null}\r\n                    </Paper>\r\n                    )\r\n            } else {\r\n                dateTile = (\r\n                <Paper className={isSelected ? classes.selectedDayPaper : isToday ? classes.todayPaper : classes.normalDayPaper}>   \r\n                    <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}> {day.getDate()}</Grid>\r\n                </Paper>)\r\n            }\r\n        } \r\n        else {\r\n            dateTile = (<Paper className={classes.notInThisMonthDayPaper}>\r\n                <Grid className={isSelected? classes.selectedDayNum : isToday? classes.todayNum : classes.normalDayNum}>\r\n                    {day.getDate()}\r\n                </Grid>\r\n            </Paper>)\r\n\r\n        }\r\n        return dateTile\r\n    }\r\n\r\n  \r\n\r\n    return(\r\n          <MuiPickersUtilsProvider locale={ko} utils={DateFnsUtils} >\r\n              <span className='yearMM'>{`${today.getFullYear()}년 ${today.getMonth()+1}월`}</span>\r\n                <DatePicker\r\n                    value={selectedDate}\r\n                    onChange={setselectedDate} //클릭하면 selectedDate (선택한 날짜로 보냄)\r\n                    variant=\"static\"\r\n                    inputFormat={\"yyyy-MM-dd\"}\r\n                    mask={\"____-__-__\"}\r\n                    //renderDay props로 getDayElement 전달\r\n                    renderDay={(day, selectedDate, isInCurrentMonth, dayComponent) => getDayElement(day, selectedDate, isInCurrentMonth, dayComponent)}\r\n\r\n                />\r\n        </MuiPickersUtilsProvider>\r\n    );\r\n}\r\n\r\n/* renderDay props로 함수가 필요함\r\nday: Date,\r\nselectedDate : Date,\r\nisInCrrentMonth: boolean,\r\ndayComponent: Element\r\n\r\n이 props를 입력한 다음 날짜 타일로 렌더링 할 수 있는 요소를 반환한다.\r\nDatePicker는 이 함수를 표시된 모든 날짜로 호출\r\n\r\n필요한 경우\r\n- 투두가 없는 날 : normal date tile\r\n- 투두가 있는 날 : todo date tile (갯수)\r\n- 투두를 모두 완료한 날 : complete date tile(색상, check✔)\r\n\r\n만든 함수를 enderDate 요소에 지정\r\n그러면 DatePicker가 날짜를 렌더링 하고 날짜 타일을 요청할 때마다 호출해준다. 만든 함수가 날짜를 확인하고 적절한 날짜 타일을 반환한다.\r\n\r\n따라서 데이터는 \r\n- 투두가 있는 날 theDayhasTodo\r\n- 투두가 있는 날의 투두 갯수 todoNum\r\n- 투두가 있는 날의 투두 완료 정보 (해당 날짜의 checked 의 값이 모두 y인가?) todoChecked\r\n\r\n 투두 있으면 -> dateTile에 투두가 있는 날의 투두 갯수 넣음\r\n     투두가 모두 완료 되면 -> 투두 갯수가 v 표시로 변환됨\r\n*/ \r\n"]},"metadata":{},"sourceType":"module"}