{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\Following.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport Box from '@mui/material/Box';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemText from '@mui/material/ListItemText';\nimport SvgIcon from '@mui/material/SvgIcon';\nimport { followData } from \"../atoms/todoData\"; //함수선언\n// isfollowing? Y인 사람만 리스트에 불러와져 있으면 됨. \n//  -> 더미 데이터에서 isfollowing 이 y인 사람만 파싱? 으로 처리 하여 \n//     나타나는 것은 닉네임으로 표현하기 \n// 팔로잉 추가 함수\n// 팔로잉 삭제 함수 \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Following() {\n  var _s = $RefreshSig$();\n\n  const FontAwesomeSvgIcon = /*#__PURE__*/React.forwardRef(_s((props, ref) => {\n    _s();\n\n    const {\n      icon\n    } = props;\n    const {\n      icon: [width, height,,, svgPathData]\n    } = icon;\n    /* atom 시작 */\n\n    let [following, setFollowing] = useRecoilState(followData); // 목표goals 아이템\n\n    let {\n      originID\n    } = useParams(); //url Params 따오기\n\n    let [editFollowingState, setEditFollowingState] = useState('');\n    /*useEffect(()=>{\r\n        let originFollowingState = [...following]; //원본 follow 가지고 옴\r\n        let originFollowing;\r\n        originFollowing = originFollowingState[originID]\r\n        setFollowingState(originFollowing)\r\n    },[])*/\n\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: '100%',\n        bgcolor: 'background.paper'\n      },\n      textAlign: \"center\",\n      style: {\n        position: 'relative'\n      },\n      children: following.map(data => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          style: {\n            position: 'relative'\n          },\n          component: \"div\",\n          disablePadding: true,\n          children: /*#__PURE__*/_jsxDEV(ListItemButton, {\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: data.strUserName,\n              secondary: data.strUserInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(SvgIcon, {\n              ref: ref,\n              viewBox: `0 0 ${width} ${height}`,\n              children: typeof svgPathData === 'string' ? /*#__PURE__*/_jsxDEV(\"path\", {\n                d: svgPathData\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 37\n              }, this) :\n              /*\r\n              A multi-path Font Awesome icon seems to imply a duotune icon. The 0th path seems to\r\n              be the faded element (referred to as the \"secondary\" path in the Font Awesome docs)\r\n              of a duotone icon. 40% is the default opacity. */\n              svgPathData.map((d, i) => /*#__PURE__*/_jsxDEV(\"path\", {\n                style: {\n                  opacity: i === 0 ? 0.4 : 1\n                },\n                d: d\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 25\n          }, this)\n        }, data.strUserId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this);\n  }, \"Lr/sn1ztjC5zLfPMyPwCvwRPCEY=\", false, function () {\n    return [useRecoilState, useParams];\n  }));\n}\n_c = Following;\n\nvar _c;\n\n$RefreshReg$(_c, \"Following\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/Following.js"],"names":["React","useEffect","useState","useParams","useRecoilState","Box","ListItem","ListItemButton","ListItemText","SvgIcon","followData","Following","FontAwesomeSvgIcon","forwardRef","props","ref","icon","width","height","svgPathData","following","setFollowing","originID","editFollowingState","setEditFollowingState","bgcolor","position","map","data","strUserName","strUserInfo","d","i","opacity","strUserId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AAEA,SAASC,UAAT,QAA2B,mBAA3B,C,CAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASC,SAAT,GAAqB;AAAA;;AAGhC,QAAMC,kBAAkB,gBAAGZ,KAAK,CAACa,UAAN,IAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AACxD,UAAM;AAAEC,MAAAA;AAAF,QAAWF,KAAjB;AAEA,UAAM;AACJE,MAAAA,IAAI,EAAE,CAACC,KAAD,EAAQC,MAAR,IAAoBC,WAApB;AADF,QAEFH,IAFJ;AAMR;;AACA,QAAI,CAACI,SAAD,EAAYC,YAAZ,IAA4BjB,cAAc,CAACM,UAAD,CAA9C,CAVgE,CAUL;;AAE3D,QAAI;AAAEY,MAAAA;AAAF,QAAenB,SAAS,EAA5B,CAZgE,CAYjC;;AAE/B,QAAI,CAACoB,kBAAD,EAAqBC,qBAArB,IAA8CtB,QAAQ,CAAC,EAAD,CAA1D;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEI,wBACI,QAAC,GAAD;AACI,MAAA,EAAE,EAAE;AAAEe,QAAAA,KAAK,EAAE,MAAT;AAAiBQ,QAAAA,OAAO,EAAE;AAA1B,OADR;AAEI,MAAA,SAAS,EAAC,QAFd;AAGI,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAC;AAAX,OAHX;AAAA,gBAKKN,SAAS,CAACO,GAAV,CAAcC,IAAI,IAAE;AACjB,4BACI,QAAC,QAAD;AACA,UAAA,KAAK,EAAE;AAACF,YAAAA,QAAQ,EAAC;AAAV,WADP;AAEqB,UAAA,SAAS,EAAC,KAF/B;AAEqC,UAAA,cAAc,MAFnD;AAAA,iCAGI,QAAC,cAAD;AAAA,oCACI,QAAC,YAAD;AACA,cAAA,OAAO,EAAEE,IAAI,CAACC,WADd;AAEA,cAAA,SAAS,EAAED,IAAI,CAACE;AAFhB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAKI,QAAC,OAAD;AAAS,cAAA,GAAG,EAAEf,GAAd;AAAmB,cAAA,OAAO,EAAG,OAAME,KAAM,IAAGC,MAAO,EAAnD;AAAA,wBACK,OAAOC,WAAP,KAAuB,QAAvB,gBACG;AAAM,gBAAA,CAAC,EAAEA;AAAT;AAAA;AAAA;AAAA;AAAA,sBADH;AAGI;AACrC;AACA;AACA;AAEoCA,cAAAA,WAAW,CAACQ,GAAZ,CAAgB,CAACI,CAAD,EAAIC,CAAJ,kBAChB;AAAM,gBAAA,KAAK,EAAE;AAAEC,kBAAAA,OAAO,EAAED,CAAC,KAAK,CAAN,GAAU,GAAV,GAAgB;AAA3B,iBAAb;AAA6C,gBAAA,CAAC,EAAED;AAAhD;AAAA;AAAA;AAAA;AAAA,sBADA;AATR;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ,WAEKH,IAAI,CAACM,SAFV;AAAA;AAAA;AAAA;AAAA,gBADJ;AA2BH,OA5BA;AALL;AAAA;AAAA;AAAA;AAAA,YADJ;AAsCE,GA7DyB;AAAA,YAUC9B,cAVD,EAYZD,SAZY;AAAA,KAA3B;AA6DK;KAhEeQ,S","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport Box from '@mui/material/Box';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport SvgIcon from '@mui/material/SvgIcon';\r\n\r\nimport { followData } from \"../atoms/todoData\";\r\n\r\n\r\n//함수선언\r\n// isfollowing? Y인 사람만 리스트에 불러와져 있으면 됨. \r\n//  -> 더미 데이터에서 isfollowing 이 y인 사람만 파싱? 으로 처리 하여 \r\n//     나타나는 것은 닉네임으로 표현하기 \r\n// 팔로잉 추가 함수\r\n// 팔로잉 삭제 함수 \r\n\r\n\r\nexport default function Following() {\r\n\r\n\r\n    const FontAwesomeSvgIcon = React.forwardRef((props, ref) => {\r\n        const { icon } = props;\r\n      \r\n        const {\r\n          icon: [width, height, , , svgPathData],\r\n        } = icon;\r\n    \r\n\r\n\r\n/* atom 시작 */\r\nlet [following, setFollowing] = useRecoilState(followData);// 목표goals 아이템\r\n\r\nlet { originID } = useParams();//url Params 따오기\r\n\r\nlet [editFollowingState, setEditFollowingState] = useState('');\r\n\r\n/*useEffect(()=>{\r\n    let originFollowingState = [...following]; //원본 follow 가지고 옴\r\n    let originFollowing;\r\n    originFollowing = originFollowingState[originID]\r\n    setFollowingState(originFollowing)\r\n},[])*/\r\n\r\n    return (\r\n        <Box \r\n            sx={{ width: '100%', bgcolor: 'background.paper' }} \r\n            textAlign='center' \r\n            style={{ position:'relative'}}>\r\n\r\n            {following.map(data=>{\r\n                return (\r\n                    <ListItem \r\n                    style={{position:'relative'}} \r\n                    key={data.strUserId} component=\"div\" disablePadding>\r\n                        <ListItemButton>\r\n                            <ListItemText \r\n                            primary={data.strUserName}\r\n                            secondary={data.strUserInfo} />\r\n                            \r\n                            <SvgIcon ref={ref} viewBox={`0 0 ${width} ${height}`}>\r\n                                {typeof svgPathData === 'string' ? (\r\n                                    <path d={svgPathData} />\r\n                                     ) : (\r\n                                     /*\r\n                                     A multi-path Font Awesome icon seems to imply a duotune icon. The 0th path seems to\r\n                                     be the faded element (referred to as the \"secondary\" path in the Font Awesome docs)\r\n                                    of a duotone icon. 40% is the default opacity. */\r\n         \r\n                                    svgPathData.map((d, i) => (\r\n                                    <path style={{ opacity: i === 0 ? 0.4 : 1 }} d={d} />\r\n                                        ))\r\n                                     )}\r\n                            </SvgIcon>\r\n\r\n                        </ListItemButton>\r\n                    </ListItem>\r\n                );\r\n            })}\r\n     \r\n        </Box>\r\n    \r\n    )} )}"]},"metadata":{},"sourceType":"module"}