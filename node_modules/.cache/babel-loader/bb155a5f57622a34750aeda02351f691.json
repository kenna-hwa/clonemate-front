{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\routines\\\\RoutinesTodos.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport EditRoutinesForm from './EditRoutinesForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RoutinesTodos(props) {\n  _s();\n\n  const todos = props.todos;\n  const index = props.todos.todoId;\n  const isTodoSelected = props.isTodoSelected;\n  const [readOnly, setReadOnly] = useState(true); //엔터키 인식 readonly 변경\n\n  const enterKeyEventHandler = e => {\n    if (e.key === 'Enter' || e.code === 'NumpadEnter') {\n      setReadOnly(true);\n    }\n  }; // const readOnlyHandler = (index) => {\n  //     if (index === modalActiveIndex) {\n  //       setModalActiveIndex(null);\n  //     } else {\n  //       setModalActiveIndex(index);\n  //     }\n  //   }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todos-list-box\",\n    \"data-todos\": todos,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"goals-listItem-text-wrap\",\n      children: [todos.check_yn === 'y' ? /*#__PURE__*/_jsxDEV(CheckBoxIcon, {\n        className: \"todos-list-check-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 52\n      }, this) : /*#__PURE__*/_jsxDEV(CheckBoxOutlineBlankIcon, {\n        className: \"todos-list-check-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 105\n      }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n        todos: todos,\n        index: index,\n        readOnly: readOnly,\n        setReadOnly: setReadOnly,\n        isTodoSelected: isTodoSelected,\n        enterKeyEventHandler: enterKeyEventHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }, this), !readOnly ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(EditRoutinesForm, {\n        todos: todos,\n        goalId: todos.goalId,\n        todoId: todos.id,\n        set: true,\n        ReadOnly: setReadOnly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)\n    }, void 0, false) : null]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RoutinesTodos, \"rh1lxQHbgkvucO3gxNrRRQcNHGw=\");\n\n_c = RoutinesTodos;\nconst TodoList = /*#__PURE__*/React.forwardRef(_c2 = _s2((props, ref) => {\n  var _inputRef$current;\n\n  _s2();\n\n  const inputRef = useRef(null);\n  const todos = props.todos;\n  const index = parseInt(props.index - 1);\n  const readOnly = props.readOnly;\n  const setReadOnly = props.setReadOnly;\n  const isTodoSelected = props.isTodoSelected;\n\n  const todoSelectedHandler = () => {\n    setReadOnly(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"todos-list-input\",\n      id: \"todo-input\",\n      type: \"text\",\n      maxLength: \"50\",\n      size: (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value.length,\n      ref: inputRef,\n      name: todos.title,\n      \"data-index\": index,\n      \"data-orderno\": todos.orderNo,\n      \"data-goalid\": todos.goalId,\n      \"data-todoid\": todos.todoId,\n      value: todos.title,\n      readOnly: readOnly,\n      onClick: todoSelectedHandler\n    }, todos.todoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"iD9XNNsNOlNDckBemnvlLS+aHYk=\"));\n_c3 = TodoList;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"RoutinesTodos\");\n$RefreshReg$(_c2, \"TodoList$React.forwardRef\");\n$RefreshReg$(_c3, \"TodoList\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/routines/RoutinesTodos.js"],"names":["React","useRef","useState","useRecoilState","useRecoilValue","CheckBoxIcon","CheckBoxOutlineBlankIcon","EditRoutinesForm","RoutinesTodos","props","todos","index","todoId","isTodoSelected","readOnly","setReadOnly","enterKeyEventHandler","e","key","code","check_yn","goalId","id","TodoList","forwardRef","ref","inputRef","parseInt","todoSelectedHandler","current","value","length","title","orderNo"],"mappings":"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","sourcesContent":["import React, {  useRef, useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\n\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nimport EditRoutinesForm from './EditRoutinesForm';\r\n\r\n\r\nexport default function RoutinesTodos (props) {\r\n\r\n\r\n    const todos = props.todos; \r\n    const index = props.todos.todoId;\r\n    const isTodoSelected = props.isTodoSelected;\r\n    const [readOnly, setReadOnly] = useState(true);\r\n\r\n      \r\n    //엔터키 인식 readonly 변경\r\n    const enterKeyEventHandler = (e) => {\r\n        if(e.key === 'Enter' || e.code === 'NumpadEnter'){ \r\n            setReadOnly(true)\r\n        }\r\n    }\r\n  \r\n    // const readOnlyHandler = (index) => {\r\n    //     if (index === modalActiveIndex) {\r\n    //       setModalActiveIndex(null);\r\n    //     } else {\r\n    //       setModalActiveIndex(index);\r\n    //     }\r\n    //   }\r\n\r\n    return (\r\n        <div className=\"todos-list-box\" data-todos={todos} key={index}>\r\n                    <div className=\"goals-listItem-text-wrap\">\r\n                        {todos.check_yn === 'y' ?  <CheckBoxIcon className=\"todos-list-check-icon\" /> : <CheckBoxOutlineBlankIcon className=\"todos-list-check-icon\" /> }\r\n                        <TodoList \r\n                        todos={todos} \r\n                        index={index}\r\n                        readOnly={readOnly}\r\n                        setReadOnly={setReadOnly}\r\n                        isTodoSelected={isTodoSelected}\r\n                        enterKeyEventHandler={enterKeyEventHandler} />\r\n                        \r\n                    </div>\r\n                    {!readOnly ? (<>\r\n                    <EditRoutinesForm todos={todos} goalId={todos.goalId} todoId={todos.id} set\r\n                    ReadOnly={setReadOnly} /> \r\n                    </>) :\r\n                    null} \r\n                    \r\n        </div>\r\n    )\r\n}\r\n\r\nconst TodoList = React.forwardRef((props, ref) => {\r\n  \r\n    const inputRef = useRef(null);\r\n    const todos = props.todos;\r\n    const index = parseInt(props.index-1);\r\n    const readOnly = props.readOnly;\r\n    const setReadOnly = props.setReadOnly;\r\n    const isTodoSelected = props.isTodoSelected;\r\n    \r\n    const todoSelectedHandler = () => {\r\n      setReadOnly(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <input\r\n        className=\"todos-list-input\" key={todos.todoId} id=\"todo-input\" type=\"text\" \r\n        maxLength=\"50\"\r\n        size={inputRef.current?.value.length}\r\n        ref={inputRef}\r\n        name={todos.title} \r\n        data-index={index}\r\n        data-orderno={todos.orderNo}\r\n        data-goalid={todos.goalId} \r\n        data-todoid={todos.todoId} \r\n        value={todos.title} \r\n        readOnly={readOnly}\r\n        onClick={todoSelectedHandler}\r\n        />\r\n        \r\n        </>\r\n        )\r\n})"]},"metadata":{},"sourceType":"module"}