{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\main\\\\CreateTodoForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { useForm } from \"react-hook-form\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport { objTodosDataResult } from \"../../atoms/todoData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateTodoForm(props) {\n  _s();\n\n  /* hook 선언 시작 */\n  let createInput = useRef();\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm({\n    mode: \"onChange\"\n  });\n  useEffect(() => {\n    const inputElement = createInput.current;\n    inputElement.focus();\n  }, []);\n  /* hook 선언 종료 */\n\n  /* atom 시작 */\n\n  let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\n  let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\n  /* atom 종료 */\n\n  /* state 선언 시작 */\n\n  const dtDate = props.dtDate;\n  const goal_id = props.goalId;\n  const new_todo_id = props.todoLength + 1;\n  const new_order_no = props.todoLength + 1;\n  const createTodoFieldReset = props.createTodoFieldReset;\n  const copy_dtTodos = [...dtTodos];\n  let id = props.id;\n  let createTodoState = {\n    goalId: goal_id,\n    todoId: new_todo_id,\n    orderNo: new_order_no,\n    title: \"\",\n    date: dtDate.dtToday,\n    endRepeatDate: dtDate.dtToday,\n    repeatDays: {\n      THU: \"N\",\n      WEN: \"N\",\n      TUE: \"N\",\n      SAT: \"N\",\n      FRI: \"N\",\n      MON: \"N\",\n      SUN: \"N\"\n    },\n    checkYn: \"N\"\n  };\n  /* state 선언 종료 */\n\n  /* 함수 선언 시작 */\n  //createTodoForm에 값 없을 때 사라지게\n\n  const inputValueCheckHandler = e => {\n    if (e.currentTarget.value === \"\") {\n      createTodoFieldReset();\n    } else {\n      createTodoStateSubmit(e);\n    }\n  }; //엔터 클릭 시 inputValueCheckHandler 실행\n\n\n  const onKeyPressHandler = e => {\n    if (e.key === 'Enter' || e.code === 'NumpadEnter') inputValueCheckHandler(e);\n  }; //field에 글자 입력 시 createTodoState 객체 title 값 변경\n\n\n  const onChangeCreateTodofield = e => {\n    createTodoState.title = e.currentTarget.value;\n  }; //새로운 todo 넣기 / goal객체 찾아서 todos에 push\n\n\n  const createTodoStateSubmit = e => {\n    todoDataArray.map(data => {\n      if (data.goalId === goal_id) {\n        data.todos.push(createTodoState);\n      }\n    });\n    setDtTodos(todoDataArray);\n    createTodoFieldReset();\n  };\n  /* 함수 선언 종료 */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create-todo-form\",\n    children: [/*#__PURE__*/_jsxDEV(CheckBoxOutlineBlankIcon, {\n      className: \"create-todo-check-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: createInput,\n      id: \"todo-input\",\n      className: \"create-todo-field\",\n      placeholder: \"\\uD560 \\uC77C\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n      type: \"text\",\n      maxLength: \"50\",\n      onChange: onChangeCreateTodofield,\n      onBlur: inputValueCheckHandler,\n      onKeyPress: onKeyPressHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CreateTodoForm, \"6BiPmQ5qrNOLlKxcL6ia7Jf1AZQ=\", false, function () {\n  return [useForm, useRecoilState];\n});\n\n_c = CreateTodoForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateTodoForm\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/main/CreateTodoForm.js"],"names":["React","useEffect","useState","useRef","useRecoilState","useRecoilValue","useForm","CheckBoxIcon","CheckBoxOutlineBlankIcon","MoreHorizIcon","objTodosDataResult","CreateTodoForm","props","createInput","register","handleSubmit","errors","watch","mode","inputElement","current","focus","dtTodos","setDtTodos","todoDataArray","JSON","parse","stringify","dtDate","goal_id","goalId","new_todo_id","todoLength","new_order_no","createTodoFieldReset","copy_dtTodos","id","createTodoState","todoId","orderNo","title","date","dtToday","endRepeatDate","repeatDays","THU","WEN","TUE","SAT","FRI","MON","SUN","checkYn","inputValueCheckHandler","e","currentTarget","value","createTodoStateSubmit","onKeyPressHandler","key","code","onChangeCreateTodofield","map","data","todos","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\nimport { objTodosDataResult } from \"../../atoms/todoData\";\r\n\r\n\r\nexport default function CreateTodoForm (props) {\r\n\r\n    /* hook 선언 시작 */\r\n\r\n    let createInput = useRef();\r\n\r\n    const { register, handleSubmit, errors, watch } = useForm({ mode: \"onChange\" });\r\n    useEffect(() => {\r\n        const inputElement = createInput.current;\r\n        inputElement.focus();\r\n      }, []);\r\n\r\n    /* hook 선언 종료 */\r\n\r\n    /* atom 시작 */\r\n    let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);\r\n    let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n\r\n    /* atom 종료 */\r\n\r\n    /* state 선언 시작 */\r\n\r\n    const dtDate = props.dtDate;\r\n    const goal_id = props.goalId;\r\n    const new_todo_id = props.todoLength+1;\r\n    const new_order_no = props.todoLength+1;\r\n    const createTodoFieldReset = props.createTodoFieldReset;\r\n    const copy_dtTodos = [...dtTodos];\r\n\r\n    let id = props.id;\r\n\r\n    let createTodoState = {\r\n        goalId: goal_id,\r\n        todoId: new_todo_id,\r\n        orderNo: new_order_no,\r\n        title: \"\",\r\n        date: dtDate.dtToday,\r\n        endRepeatDate: dtDate.dtToday,\r\n        repeatDays: {\r\n          THU: \"N\",\r\n          WEN: \"N\",\r\n          TUE: \"N\",\r\n          SAT: \"N\",\r\n          FRI: \"N\",\r\n          MON: \"N\",\r\n          SUN: \"N\"\r\n        },\r\n        checkYn: \"N\"\r\n    };\r\n\r\n    /* state 선언 종료 */\r\n\r\n    /* 함수 선언 시작 */\r\n\r\n    //createTodoForm에 값 없을 때 사라지게\r\n    const inputValueCheckHandler =  (e) => { \r\n        if(e.currentTarget.value === \"\") {\r\n            createTodoFieldReset()\r\n        } else {\r\n            createTodoStateSubmit(e)\r\n        }\r\n    }\r\n    //엔터 클릭 시 inputValueCheckHandler 실행\r\n    const onKeyPressHandler = (e) => {\r\n        if(e.key === 'Enter' || e.code === 'NumpadEnter') inputValueCheckHandler(e)\r\n    }\r\n\r\n    //field에 글자 입력 시 createTodoState 객체 title 값 변경\r\n    const onChangeCreateTodofield = (e) => {\r\n        createTodoState.title = e.currentTarget.value;\r\n    }\r\n\r\n    //새로운 todo 넣기 / goal객체 찾아서 todos에 push\r\n    const createTodoStateSubmit = (e) => {\r\n        todoDataArray.map(data=>{\r\n                if(data.goalId === goal_id){\r\n                    data.todos.push(createTodoState)\r\n                }\r\n            }\r\n        )\r\n        setDtTodos(todoDataArray)\r\n        createTodoFieldReset()\r\n    }\r\n\r\n    /* 함수 선언 종료 */\r\n\r\n    return (\r\n        <div className=\"create-todo-form\">\r\n            <CheckBoxOutlineBlankIcon className=\"create-todo-check-icon\"/>\r\n            <input ref={createInput} id=\"todo-input\" className=\"create-todo-field\"  placeholder=\"할 일을 입력해주세요.\" type=\"text\" maxLength=\"50\" \r\n            onChange={onChangeCreateTodofield}\r\n            onBlur={inputValueCheckHandler}\r\n            onKeyPress={onKeyPressHandler} \r\n            /> \r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}