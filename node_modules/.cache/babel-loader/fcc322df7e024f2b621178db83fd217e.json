{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport { TextField } from '@mui/material';\nimport SearchIcon from '@mui/icons-material/Search';\nimport Input from '@mui/material/Input';\nimport InputAdornment from '@mui/material/InputAdornment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Data = [{\n  id: 'fullName',\n  label: 'Employee Name'\n}, {\n  id: 'email',\n  label: 'Email Address (Personal)'\n}, {\n  id: 'mobile',\n  label: 'Mobile Number'\n}, {\n  id: 'department',\n  label: 'Department',\n  disableSorting: true\n}];\nconsole.log(Data);\nexport default function Search(props) {\n  _s();\n\n  const products = props.Data; // console.log(global);\n\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  const handleInputChange = event => {\n    // console.log(event.target.value);        \n    setSearchValue(event.target.value);\n  };\n\n  const shouldDisplayButton = searchValue.length > 0;\n\n  const handleInputClear = () => {\n    setSearchValue(\"\");\n  }; // products.map((product) => {\n  //     console.log(product);\n  // });\n\n\n  const filteredProducts = products.filter(product => {\n    return product.includes(searchValue);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"searchBar\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: searchValue,\n      placeholder: \"search value\",\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }, this), shouldDisplayButton && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInputClear,\n      children: \"clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 35\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredProducts.map(product => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: product\n        }, product, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 27\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n  /*\r\n    const styleInfo = {\r\n      paddingRight:'10px',\r\n      position:'relative',\r\n      left:'10vh'\r\n      };\r\n  \r\n    const [search] = useState([]);\r\n  \r\n    const searchSpace=(event)=>{\r\n      let keyword = event.target.value;\r\n      search({search:keyword})\r\n    };\r\n     \r\n      const items = Data.filter((data) => {\r\n        if(search === null) {\r\n            return data\r\n        } else if(data.id.toLowerCase().includes(search.toLowerCase()) || data.label.toLowerCase().includes(search.toLowerCase())){\r\n            return data }\r\n        }).map(data => {\r\n          \r\n            return(\r\n               <div>\r\n                 <ul>\r\n                   <li style={{position:'relative',left:'10vh'}}>\r\n                      <span style={styleInfo} >id: {data.id}<br/>label: {data.label}</span>\r\n                    </li>\r\n       \r\n                </ul>\r\n                </div>\r\n             )\r\n        })\r\n          \r\n      /* const [filterFn, setFilterFn] = useState({ fn: items => { return items; } })\r\n    \r\n    const handleSearch = e => {\r\n      let target = e.target;\r\n      setFilterFn({\r\n          fn: items => {\r\n              if (target.value === \"\")\r\n                  return items;\r\n              else\r\n                  return items.filter(x => x.fullname.toLowerCase().includes(target.value))\r\n          }\r\n      })\r\n  }\r\n    const items = Data.map(data=>{\r\n    return(\r\n    <div>\r\n      <ul>\r\n        <li style={{position:'relative',left:'10vh'}}>\r\n          <span style={styleInfo} >id: {data.id}<br/>label: {data.label}</span>\r\n        </li>\r\n       \r\n      </ul>\r\n    </div>\r\n    )\r\n  }) */\n\n  /*\r\n  return (\r\n      <Box \r\n      sx={{ width: '100%', bgcolor: 'background.paper' }} \r\n      textAlign='center' \r\n      style={{ position:'relative'}}>\r\n      \r\n        {/* - 입력받는 string에 매치되는 아이디,할일,email 리스트로 불러와 보여주기\r\n              받아와야 하는 값 \r\n              -user nickname\r\n              -매치된 할일 의 단어\r\n              -참고) 설정한 색  \r\n          - style 수정사항\r\n              -search 검색 input 높이 조절\r\n              -항목 선택시 default 색 변경 */\n}\n/*     <TextField \r\n         fullWidth  \r\n         variant=\"filled\"\r\n         size=\"small\"\r\n         id=\"filled-basic\"\r\n         placeholder=\"email ,ID 또는 할 일 검색\"\r\n         sx={{ boxShadow: 'none'}}    \r\n         //onChange={handleSearch}\r\n         onChange={searchSpace}\r\n         InputProps={{\r\n         startAdornment: (\r\n           <InputAdornment position=\"start\">\r\n             <SearchIcon fontSize=\"small\" />\r\n           </InputAdornment>\r\n         ),\r\n       }}\r\n     >\r\n     </TextField>\r\n     \r\n          {items}\r\n            \r\n      \r\n </Box>\r\n);\r\n}  */\n\n_s(Search, \"F12Wsjogj0HVecr0VGWn/MCEg+A=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/Search.js"],"names":["React","useState","Box","TextField","SearchIcon","Input","InputAdornment","Data","id","label","disableSorting","console","log","Search","props","products","searchValue","setSearchValue","handleInputChange","event","target","value","shouldDisplayButton","length","handleInputClear","filteredProducts","filter","product","includes","map"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,UAAP,MAAuB,4BAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,MAAMC,IAAI,GAAG,CACX;AAAEC,EAAAA,EAAE,EAAE,UAAN;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CADW,EAEX;AAAED,EAAAA,EAAE,EAAE,OAAN;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CAFW,EAGX;AAAED,EAAAA,EAAE,EAAE,QAAN;AAAgBC,EAAAA,KAAK,EAAE;AAAvB,CAHW,EAIX;AAAED,EAAAA,EAAE,EAAE,YAAN;AAAoBC,EAAAA,KAAK,EAAE,YAA3B;AAAyCC,EAAAA,cAAc,EAAE;AAAzD,CAJW,CAAb;AAMAC,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,eAAe,SAASM,MAAT,CAAgBC,KAAhB,EAAuB;AAAA;;AAGpC,QAAMC,QAAQ,GAAGD,KAAK,CAACP,IAAvB,CAHoC,CAOpC;;AAEA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;;AAIA,QAAMiB,iBAAiB,GAAIC,KAAD,IAAW;AAEjC;AAEAF,IAAAA,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AAEH,GAND;;AAUA,QAAMC,mBAAmB,GAAGN,WAAW,CAACO,MAAZ,GAAqB,CAAjD;;AAIA,QAAMC,gBAAgB,GAAG,MAAM;AAE3BP,IAAAA,cAAc,CAAC,EAAD,CAAd;AAEH,GAJD,CA3BoC,CAmCpC;AAEA;AAEA;;;AAIA,QAAMQ,gBAAgB,GAAGV,QAAQ,CAACW,MAAT,CAAiBC,OAAD,IAAa;AAElD,WAAOA,OAAO,CAACC,QAAR,CAAiBZ,WAAjB,CAAP;AAEH,GAJwB,CAAzB;AAUA,sBAEI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BAEI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAEA,WAA1B;AAAuC,MAAA,WAAW,EAAC,cAAnD;AAAkE,MAAA,QAAQ,EAAEE;AAA5E;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIKI,mBAAmB,iBAAI;AAAQ,MAAA,OAAO,EAAEE,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJ5B,eAQI;AAAA,gBAEKC,gBAAgB,CAACI,GAAjB,CAAsBF,OAAD,IAAa;AAE/B,4BAAQ;AAAA,oBAAmBA;AAAnB,WAASA,OAAT;AAAA;AAAA;AAAA;AAAA,gBAAR;AAEH,OAJA;AAFL;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AA8BA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAwC;AACjC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAxLwBd,M;;KAAAA,M","sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport Box from '@mui/material/Box';\r\nimport { TextField } from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Input from '@mui/material/Input';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nconst Data = [\r\n  { id: 'fullName', label: 'Employee Name' },\r\n  { id: 'email', label: 'Email Address (Personal)' },\r\n  { id: 'mobile', label: 'Mobile Number' },\r\n  { id: 'department', label: 'Department', disableSorting: true },\r\n]\r\nconsole.log(Data);\r\n\r\nexport default function Search(props) {\r\n\r\n\r\n  const products = props.Data;\r\n\r\n \r\n\r\n  // console.log(global);\r\n\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n\r\n\r\n  const handleInputChange = (event) => {\r\n\r\n      // console.log(event.target.value);        \r\n\r\n      setSearchValue(event.target.value)\r\n\r\n  }\r\n\r\n\r\n\r\n  const shouldDisplayButton = searchValue.length > 0;\r\n\r\n\r\n\r\n  const handleInputClear = () => {\r\n\r\n      setSearchValue(\"\")\r\n\r\n  }\r\n\r\n\r\n\r\n  // products.map((product) => {\r\n\r\n  //     console.log(product);\r\n\r\n  // });\r\n\r\n\r\n\r\n  const filteredProducts = products.filter((product) => {\r\n\r\n      return product.includes(searchValue);\r\n\r\n  })\r\n\r\n \r\n\r\n\r\n\r\n  return(\r\n\r\n      <div className=\"searchBar\">\r\n\r\n          <input type=\"text\" value={searchValue} placeholder=\"search value\" onChange={handleInputChange} />\r\n\r\n          {shouldDisplayButton && <button onClick={handleInputClear}>clear</button>}\r\n\r\n          \r\n\r\n          <ul>\r\n\r\n              {filteredProducts.map((product) => {\r\n\r\n                  return (<li key={product}>{product}</li>)\r\n\r\n              })}\r\n\r\n          </ul>\r\n\r\n\r\n\r\n      </div>\r\n\r\n  )\r\n\r\n  \r\n\r\n\r\n\r\n  /*\r\n    const styleInfo = {\r\n      paddingRight:'10px',\r\n      position:'relative',\r\n      left:'10vh'\r\n      };\r\n  \r\n    const [search] = useState([]);\r\n  \r\n    const searchSpace=(event)=>{\r\n      let keyword = event.target.value;\r\n      search({search:keyword})\r\n    };\r\n\r\n   \r\n      const items = Data.filter((data) => {\r\n        if(search === null) {\r\n            return data\r\n        } else if(data.id.toLowerCase().includes(search.toLowerCase()) || data.label.toLowerCase().includes(search.toLowerCase())){\r\n            return data }\r\n        }).map(data => {\r\n          \r\n            return(\r\n               <div>\r\n                 <ul>\r\n                   <li style={{position:'relative',left:'10vh'}}>\r\n                      <span style={styleInfo} >id: {data.id}<br/>label: {data.label}</span>\r\n                    </li>\r\n       \r\n                </ul>\r\n                </div>\r\n             )\r\n        })\r\n          \r\n\r\n    /* const [filterFn, setFilterFn] = useState({ fn: items => { return items; } })\r\n    \r\n    const handleSearch = e => {\r\n      let target = e.target;\r\n      setFilterFn({\r\n          fn: items => {\r\n              if (target.value === \"\")\r\n                  return items;\r\n              else\r\n                  return items.filter(x => x.fullname.toLowerCase().includes(target.value))\r\n          }\r\n      })\r\n  }\r\n\r\n  const items = Data.map(data=>{\r\n    return(\r\n    <div>\r\n      <ul>\r\n        <li style={{position:'relative',left:'10vh'}}>\r\n          <span style={styleInfo} >id: {data.id}<br/>label: {data.label}</span>\r\n        </li>\r\n       \r\n      </ul>\r\n    </div>\r\n    )\r\n  }) */\r\n\r\n    /*\r\n    return (\r\n        <Box \r\n        sx={{ width: '100%', bgcolor: 'background.paper' }} \r\n        textAlign='center' \r\n        style={{ position:'relative'}}>\r\n        \r\n          {/* - 입력받는 string에 매치되는 아이디,할일,email 리스트로 불러와 보여주기\r\n                받아와야 하는 값 \r\n                -user nickname\r\n                -매치된 할일 의 단어\r\n                -참고) 설정한 색  \r\n            - style 수정사항\r\n                -search 검색 input 높이 조절\r\n                -항목 선택시 default 색 변경 */}\r\n       /*     <TextField \r\n                fullWidth  \r\n                variant=\"filled\"\r\n                size=\"small\"\r\n                id=\"filled-basic\"\r\n                placeholder=\"email ,ID 또는 할 일 검색\"\r\n                sx={{ boxShadow: 'none'}}    \r\n                //onChange={handleSearch}\r\n                onChange={searchSpace}\r\n                InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon fontSize=\"small\" />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            >\r\n            </TextField>\r\n            \r\n                 {items}\r\n                   \r\n             \r\n        </Box>\r\n    );\r\n}  */"]},"metadata":{},"sourceType":"module"}