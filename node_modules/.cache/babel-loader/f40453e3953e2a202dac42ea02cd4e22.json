{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\soomin\\\\clonemate-front\\\\src\\\\components\\\\goal\\\\Goals.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { Button, List } from \"@mui/material\";\nimport ReceiptIcon from '@material-ui/icons/Receipt';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport '../../stylesheets/Goal.css';\nimport { getGoalsData } from \"../../api/apiCommunicate\";\nimport { objTodosDataResult } from \"../../atoms/todoData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Goals() {\n  _s();\n\n  /* Hook 선언 시작 */\n\n  /* atom 시작 */\n  let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult); // 목표goals 아이템\n\n  let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\n  console.log(\"todoDataArray\", todoDataArray);\n  /* Dummy State 끝 */\n\n  useEffect(() => {\n    // recoil 에서 정보 갱신이 되었으면 하는데..?\n    const goalItems = getGoalsData();\n    setDtTodos(goalItems); // goalItems = useRecoilState(goalsData)\n  }, [dtTodos]);\n  /* Hook 선언 끝 */\n\n  /* 함수 시작 */\n  //목표수정 컴포넌트로 이동 함수 (파라미터 추가)\n\n  const moveEditGoalForm = e => {\n    window.location.replace(`/goals/goalEditForm/` + e.target.id);\n  }; // //목표 수정 이벤트핸들러 함수\n  // async function clickGoaltoEdit(e){\n  //   const { id } = e.target;\n  //   await moveEditGoalForm(id)\n  // }\n\n  /* 함수 끝 */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"goal-goals-list-wrap\",\n    children: todoDataArray.map((data, idx) => {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"goals-list-box\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: \"goals-list-button\",\n            id: data.id,\n            name: data.id,\n            data: data,\n            onClick: moveEditGoalForm,\n            children: [/*#__PURE__*/_jsxDEV(ReceiptIcon, {\n              className: \"goals-list-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"goals-list-text\",\n              id: data.goalOrderNo,\n              name: data.goalOrderNo,\n              style: {\n                color: data.titleColor\n              },\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: data.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 140\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(NavigateNextIcon, {\n            className: \"goal-list-arrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)]\n        }, data.goalOrderNo, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }, this)\n      }, data.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Goals, \"mMPowszgRg4xTQKONiYKH/5CW4o=\", false, function () {\n  return [useRecoilState];\n});\n\n_c = Goals;\n\nvar _c;\n\n$RefreshReg$(_c, \"Goals\");","map":{"version":3,"sources":["C:/Users/soomin/clonemate-front/src/components/goal/Goals.js"],"names":["React","useEffect","useState","useHistory","useRecoilState","useRecoilValue","Button","List","ReceiptIcon","NavigateNextIcon","getGoalsData","objTodosDataResult","Goals","dtTodos","setDtTodos","todoDataArray","JSON","parse","stringify","console","log","goalItems","moveEditGoalForm","e","window","location","replace","target","id","map","data","idx","goalOrderNo","color","titleColor","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,SAAUC,MAAV,EAAkBC,IAAlB,QAA+B,eAA/B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,gBAAP,MAA6B,iCAA7B;AAA+D,OAAO,4BAAP;AAE/D,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;;AAGA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAG9B;;AAEC;AAED,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBV,cAAc,CAACO,kBAAD,CAA1C,CAP8B,CAOiC;;AAC/D,MAAII,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,OAAf,CAAX,CAApB;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BL,aAA7B;AAEA;;AAEAd,EAAAA,SAAS,CAAC,MAAI;AACZ;AACA,UAAMoB,SAAS,GAAGX,YAAY,EAA9B;AACAI,IAAAA,UAAU,CAACO,SAAD,CAAV,CAHY,CAIZ;AACD,GALQ,EAKP,CAACR,OAAD,CALO,CAAT;AASA;;AAKA;AAGA;;AACA,QAAMS,gBAAgB,GAAIC,CAAD,IAAO;AAC9BC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,OAAhB,CAAyB,sBAAD,GAAuBH,CAAC,CAACI,MAAF,CAASC,EAAxD;AACD,GAFD,CAhC8B,CAqC9B;AACA;AACA;AACA;AACA;;AAGF;;;AAGE,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,cAEMb,aAAa,CAACc,GAAd,CAAkB,CAACC,IAAD,EAAOC,GAAP,KAAe;AAC/B,0BACE,QAAC,KAAD,CAAO,QAAP;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,mBAAlB;AAAsC,YAAA,EAAE,EAAED,IAAI,CAACF,EAA/C;AAAmD,YAAA,IAAI,EAAEE,IAAI,CAACF,EAA9D;AAAkE,YAAA,IAAI,EAAEE,IAAxE;AAA8E,YAAA,OAAO,EAAER,gBAAvF;AAAA,oCACI,QAAC,WAAD;AAAa,cAAA,SAAS,EAAC;AAAvB;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAK,cAAA,SAAS,EAAC,iBAAf;AAAiC,cAAA,EAAE,EAAEQ,IAAI,CAACE,WAA1C;AAAuD,cAAA,IAAI,EAAEF,IAAI,CAACE,WAAlE;AAA+E,cAAA,KAAK,EAAE;AAAEC,gBAAAA,KAAK,EAACH,IAAI,CAACI;AAAb,eAAtF;AAAA,qCAAmH;AAAA,0BAAIJ,IAAI,CAACK;AAAT;AAAA;AAAA;AAAA;AAAA;AAAnH;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAME,QAAC,gBAAD;AAAkB,YAAA,SAAS,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA,WAAqCL,IAAI,CAACE,WAA1C;AAAA;AAAA;AAAA;AAAA;AADF,SAAqBF,IAAI,CAACF,EAA1B;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAdD;AAFN;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBD;;GApEuBhB,K;UAOMR,c;;;KAPNQ,K","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {  Button, List  } from \"@mui/material\";\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';import '../../stylesheets/Goal.css';\r\n\r\nimport { getGoalsData } from \"../../api/apiCommunicate\";\r\nimport { objTodosDataResult } from \"../../atoms/todoData\";\r\n\r\n\r\nexport default function Goals() {\r\n\r\n  \r\n  /* Hook 선언 시작 */\r\n\r\n   /* atom 시작 */\r\n  \r\n  let [dtTodos, setDtTodos] = useRecoilState(objTodosDataResult);// 목표goals 아이템\r\n  let todoDataArray = JSON.parse(JSON.stringify(dtTodos));\r\n\r\n  console.log(\"todoDataArray\", todoDataArray)\r\n\r\n  /* Dummy State 끝 */\r\n  \r\n  useEffect(()=>{\r\n    // recoil 에서 정보 갱신이 되었으면 하는데..?\r\n    const goalItems = getGoalsData();\r\n    setDtTodos(goalItems)\r\n    // goalItems = useRecoilState(goalsData)\r\n  },[dtTodos])\r\n\r\n\r\n\r\n  /* Hook 선언 끝 */\r\n \r\n\r\n\r\n\r\n  /* 함수 시작 */\r\n\r\n\r\n  //목표수정 컴포넌트로 이동 함수 (파라미터 추가)\r\n  const moveEditGoalForm = (e) => {\r\n    window.location.replace(`/goals/goalEditForm/`+e.target.id)\r\n  }\r\n\r\n  \r\n  // //목표 수정 이벤트핸들러 함수\r\n  // async function clickGoaltoEdit(e){\r\n  //   const { id } = e.target;\r\n  //   await moveEditGoalForm(id)\r\n  // }\r\n\r\n\r\n/* 함수 끝 */\r\n\r\n\r\n  return (\r\n      <div className=\"goal-goals-list-wrap\" >\r\n            {\r\n            todoDataArray.map((data, idx) => {\r\n              return (\r\n                <React.Fragment key={data.id}>\r\n                  <div className=\"goals-list-box\" key={data.goalOrderNo}>\r\n                    <Button className=\"goals-list-button\" id={data.id} name={data.id} data={data} onClick={moveEditGoalForm} >\r\n                        <ReceiptIcon className=\"goals-list-icon\" />\r\n                        <div className=\"goals-list-text\" id={data.goalOrderNo} name={data.goalOrderNo} style={{ color:data.titleColor }}  ><p>{data.title}</p>\r\n                        </div>\r\n                    </Button>\r\n                    <NavigateNextIcon className=\"goal-list-arrow\" />\r\n                  </div>\r\n\r\n                </React.Fragment>\r\n              )\r\n            })\r\n          }\r\n      </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}